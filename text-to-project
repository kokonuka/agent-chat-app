├── .codespellignore
├── .dockerignore
├── .editorconfig
├── .github
    └── workflows
    │   ├── ci.yml
    │   └── e2e.yml
├── .gitignore
├── .prettierignore
├── .yarnrc.yml
├── LICENSE
├── README.md
├── eslint.config.js
├── package.json
├── scripts
    ├── cleanup-tests.sh
    ├── run-all-e2e-local.sh
    ├── run-e2e-local.sh
    ├── test-build.sh
    └── test-create-command.sh
├── src
    ├── gitignore.ts
    └── index.ts
├── static
    └── demo.gif
├── templates
    ├── memory-agent
    │   ├── README.md
    │   ├── configuration.ts
    │   ├── graph.ts
    │   ├── prompts.ts
    │   ├── state.ts
    │   ├── static
    │   │   ├── memories.png
    │   │   └── memory_graph.png
    │   ├── tests
    │   │   ├── integration
    │   │   │   └── graph.int.test.ts
    │   │   └── unit
    │   │   │   ├── configuration.test.ts
    │   │   │   └── graph.test.ts
    │   ├── tools.ts
    │   └── utils.ts
    ├── monorepo
    │   ├── .gitignore
    │   ├── README.md
    │   ├── apps
    │   │   └── agents
    │   │   │   ├── .gitignore
    │   │   │   ├── .prettierrc
    │   │   │   ├── README.md
    │   │   │   ├── eslint.config.js
    │   │   │   ├── package.json
    │   │   │   ├── tsconfig.json
    │   │   │   └── turbo.json
    │   ├── langgraph.json
    │   ├── package.json
    │   ├── tsconfig.json
    │   └── turbo.json
    ├── nextjs
    │   ├── .dockerignore
    │   ├── .env.example
    │   ├── .gitignore
    │   ├── .prettierrc
    │   ├── README.md
    │   ├── components.json
    │   ├── eslint.config.js
    │   ├── next.config.mjs
    │   ├── package.json
    │   ├── postcss.config.mjs
    │   ├── src
    │   │   ├── app
    │   │   │   ├── api
    │   │   │   │   └── [..._path]
    │   │   │   │   │   └── route.ts
    │   │   │   ├── favicon.ico
    │   │   │   ├── globals.css
    │   │   │   ├── layout.tsx
    │   │   │   └── page.tsx
    │   │   ├── components
    │   │   │   ├── icons
    │   │   │   │   ├── github.tsx
    │   │   │   │   └── langgraph.tsx
    │   │   │   ├── thread
    │   │   │   │   ├── agent-inbox
    │   │   │   │   │   ├── components
    │   │   │   │   │   │   ├── inbox-item-input.tsx
    │   │   │   │   │   │   ├── state-view.tsx
    │   │   │   │   │   │   ├── thread-actions-view.tsx
    │   │   │   │   │   │   ├── thread-id.tsx
    │   │   │   │   │   │   └── tool-call-table.tsx
    │   │   │   │   │   ├── hooks
    │   │   │   │   │   │   └── use-interrupted-actions.tsx
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   ├── types.ts
    │   │   │   │   │   └── utils.ts
    │   │   │   │   ├── history
    │   │   │   │   │   └── index.tsx
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── markdown-styles.css
    │   │   │   │   ├── markdown-text.tsx
    │   │   │   │   ├── messages
    │   │   │   │   │   ├── ai.tsx
    │   │   │   │   │   ├── generic-interrupt.tsx
    │   │   │   │   │   ├── human.tsx
    │   │   │   │   │   ├── shared.tsx
    │   │   │   │   │   └── tool-calls.tsx
    │   │   │   │   ├── syntax-highlighter.tsx
    │   │   │   │   ├── tooltip-icon-button.tsx
    │   │   │   │   └── utils.ts
    │   │   │   └── ui
    │   │   │   │   ├── avatar.tsx
    │   │   │   │   ├── button.tsx
    │   │   │   │   ├── card.tsx
    │   │   │   │   ├── input.tsx
    │   │   │   │   ├── label.tsx
    │   │   │   │   ├── password-input.tsx
    │   │   │   │   ├── separator.tsx
    │   │   │   │   ├── sheet.tsx
    │   │   │   │   ├── skeleton.tsx
    │   │   │   │   ├── sonner.tsx
    │   │   │   │   ├── switch.tsx
    │   │   │   │   ├── textarea.tsx
    │   │   │   │   └── tooltip.tsx
    │   │   ├── hooks
    │   │   │   └── useMediaQuery.tsx
    │   │   ├── lib
    │   │   │   ├── agent-inbox-interrupt.ts
    │   │   │   ├── api-key.tsx
    │   │   │   ├── ensure-tool-responses.ts
    │   │   │   └── utils.ts
    │   │   └── providers
    │   │   │   ├── Stream.tsx
    │   │   │   ├── Thread.tsx
    │   │   │   └── client.ts
    │   ├── tailwind.config.js
    │   ├── tsconfig.json
    │   └── turbo.json
    ├── react-agent
    │   ├── README.md
    │   ├── configuration.ts
    │   ├── graph.ts
    │   ├── prompts.ts
    │   ├── static
    │   │   └── studio_ui.png
    │   ├── tests
    │   │   ├── integration
    │   │   │   └── graph.int.test.ts
    │   │   └── unit
    │   │   │   └── graph.test.ts
    │   ├── tools.ts
    │   └── utils.ts
    ├── research-agent
    │   ├── README.md
    │   ├── index-graph
    │   │   ├── configuration.ts
    │   │   ├── graph.ts
    │   │   └── state.ts
    │   ├── retrieval-graph
    │   │   ├── configuration.ts
    │   │   ├── graph.ts
    │   │   ├── prompts.ts
    │   │   ├── researcher-graph
    │   │   │   ├── graph.ts
    │   │   │   └── state.ts
    │   │   ├── state.ts
    │   │   └── utils.ts
    │   ├── sample_docs.json
    │   ├── shared
    │   │   ├── configuration.ts
    │   │   ├── retrieval.ts
    │   │   ├── state.ts
    │   │   └── utils.ts
    │   └── static
    │   │   └── studio_ui.png
    ├── retrieval-agent
    │   ├── README.md
    │   ├── configuration.ts
    │   ├── graph.ts
    │   ├── index_graph.ts
    │   ├── prompts.ts
    │   ├── retrieval.ts
    │   ├── state.ts
    │   ├── static
    │   │   └── studio_ui.png
    │   └── utils.ts
    └── vite
    │   ├── .dockerignore
    │   ├── .env.example
    │   ├── .gitignore
    │   ├── .prettierrc
    │   ├── README.md
    │   ├── components.json
    │   ├── eslint.config.js
    │   ├── index.html
    │   ├── package.json
    │   ├── public
    │       └── logo.svg
    │   ├── src
    │       ├── App.css
    │       ├── App.tsx
    │       ├── components
    │       │   ├── icons
    │       │   │   ├── github.tsx
    │       │   │   └── langgraph.tsx
    │       │   ├── thread
    │       │   │   ├── agent-inbox
    │       │   │   │   ├── components
    │       │   │   │   │   ├── inbox-item-input.tsx
    │       │   │   │   │   ├── state-view.tsx
    │       │   │   │   │   ├── thread-actions-view.tsx
    │       │   │   │   │   ├── thread-id.tsx
    │       │   │   │   │   └── tool-call-table.tsx
    │       │   │   │   ├── hooks
    │       │   │   │   │   └── use-interrupted-actions.tsx
    │       │   │   │   ├── index.tsx
    │       │   │   │   ├── types.ts
    │       │   │   │   └── utils.ts
    │       │   │   ├── history
    │       │   │   │   └── index.tsx
    │       │   │   ├── index.tsx
    │       │   │   ├── markdown-styles.css
    │       │   │   ├── markdown-text.tsx
    │       │   │   ├── messages
    │       │   │   │   ├── ai.tsx
    │       │   │   │   ├── generic-interrupt.tsx
    │       │   │   │   ├── human.tsx
    │       │   │   │   ├── shared.tsx
    │       │   │   │   └── tool-calls.tsx
    │       │   │   ├── syntax-highlighter.tsx
    │       │   │   ├── tooltip-icon-button.tsx
    │       │   │   └── utils.ts
    │       │   └── ui
    │       │   │   ├── avatar.tsx
    │       │   │   ├── button.tsx
    │       │   │   ├── card.tsx
    │       │   │   ├── input.tsx
    │       │   │   ├── label.tsx
    │       │   │   ├── password-input.tsx
    │       │   │   ├── separator.tsx
    │       │   │   ├── sheet.tsx
    │       │   │   ├── skeleton.tsx
    │       │   │   ├── sonner.tsx
    │       │   │   ├── switch.tsx
    │       │   │   ├── textarea.tsx
    │       │   │   └── tooltip.tsx
    │       ├── hooks
    │       │   └── useMediaQuery.tsx
    │       ├── index.css
    │       ├── lib
    │       │   ├── agent-inbox-interrupt.ts
    │       │   ├── api-key.tsx
    │       │   ├── ensure-tool-responses.ts
    │       │   └── utils.ts
    │       ├── main.tsx
    │       ├── providers
    │       │   ├── Stream.tsx
    │       │   ├── Thread.tsx
    │       │   └── client.ts
    │       └── vite-env.d.ts
    │   ├── tailwind.config.js
    │   ├── tsconfig.app.json
    │   ├── tsconfig.json
    │   ├── tsconfig.node.json
    │   ├── turbo.json
    │   └── vite.config.ts
├── tsconfig.json
└── yarn.lock


/.codespellignore:
--------------------------------------------------------------------------------
1 | IST
2 | afterAll
3 | devlop
4 | trough


--------------------------------------------------------------------------------
/.dockerignore:
--------------------------------------------------------------------------------
1 | node_modules
2 | dist


--------------------------------------------------------------------------------
/.editorconfig:
--------------------------------------------------------------------------------
 1 | root = true
 2 | 
 3 | [*]
 4 | end_of_line = lf
 5 | insert_final_newline = true
 6 | 
 7 | [*.{js,json,yml}]
 8 | charset = utf-8
 9 | indent_style = space
10 | indent_size = 2
11 | 


--------------------------------------------------------------------------------
/.github/workflows/ci.yml:
--------------------------------------------------------------------------------
 1 | # Run formatting on all PRs
 2 | 
 3 | name: CI
 4 | 
 5 | on:
 6 |   push:
 7 |     branches: ["main"]
 8 |   pull_request:
 9 |   workflow_dispatch: # Allows triggering the workflow manually in GitHub UI
10 | 
11 | # If another push to the same PR or branch happens while this workflow is still running,
12 | # cancel the earlier run in favor of the next run.
13 | #
14 | # There's no point in testing an outdated version of the code. GitHub only allows
15 | # a limited number of job runners to be active at the same time, so it's better to cancel
16 | # pointless jobs early so that more useful jobs can run sooner.
17 | concurrency:
18 |   group: ${{ github.workflow }}-${{ github.ref }}
19 |   cancel-in-progress: true
20 | 
21 | jobs:
22 |   format:
23 |     name: Check formatting
24 |     runs-on: ubuntu-latest
25 |     steps:
26 |       - uses: actions/checkout@v4
27 | 
28 |       - name: Enable Corepack
29 |         run: corepack enable
30 | 
31 |       - name: Use Node.js 18.x
32 |         uses: actions/setup-node@v3
33 |         with:
34 |           node-version: 18.x
35 |           cache: "yarn"
36 | 
37 |       - name: Install dependencies
38 |         run: yarn install --immutable --mode=skip-build
39 | 
40 |       - name: Check formatting
41 |         run: yarn format:check
42 | 
43 |   lint:
44 |     name: Check linting
45 |     runs-on: ubuntu-latest
46 |     steps:
47 |       - uses: actions/checkout@v4
48 | 
49 |       - name: Enable Corepack
50 |         run: corepack enable
51 | 
52 |       - name: Use Node.js 18.x
53 |         uses: actions/setup-node@v3
54 |         with:
55 |           node-version: 18.x
56 |           cache: "yarn"
57 | 
58 |       - name: Install dependencies
59 |         run: yarn install --immutable --mode=skip-build
60 | 
61 |       - name: Check linting
62 |         run: yarn run lint
63 | 
64 |   readme-spelling:
65 |     name: Check README spelling
66 |     runs-on: ubuntu-latest
67 |     steps:
68 |       - uses: actions/checkout@v4
69 |       - uses: codespell-project/actions-codespell@v2
70 |         with:
71 |           ignore_words_file: .codespellignore
72 |           path: README.md
73 | 
74 |   check-spelling:
75 |     name: Check code spelling
76 |     runs-on: ubuntu-latest
77 |     steps:
78 |       - uses: actions/checkout@v4
79 |       - uses: codespell-project/actions-codespell@v2
80 |         with:
81 |           ignore_words_file: .codespellignore
82 |           path: src
83 | 


--------------------------------------------------------------------------------
/.github/workflows/e2e.yml:
--------------------------------------------------------------------------------
 1 | name: E2E Tests
 2 | 
 3 | on:
 4 |   push:
 5 |     branches: ["main"]
 6 |   pull_request:
 7 |   workflow_dispatch: # Allows triggering the workflow manually in GitHub UI
 8 | 
 9 | # If another push to the same PR or branch happens while this workflow is still running,
10 | # cancel the earlier run in favor of the next run.
11 | #
12 | # There's no point in testing an outdated version of the code. GitHub only allows
13 | # a limited number of job runners to be active at the same time, so it's better to cancel
14 | # pointless jobs early so that more useful jobs can run sooner.
15 | concurrency:
16 |   group: ${{ github.workflow }}-${{ github.ref }}
17 |   cancel-in-progress: true
18 | 
19 | jobs:
20 |   test-create-command:
21 |     runs-on: ubuntu-latest
22 |     strategy:
23 |       matrix:
24 |         node-version: [18.x, 20.x, 22.x]
25 |         package-manager: [npm, yarn, pnpm]
26 | 
27 |     steps:
28 |       - uses: actions/checkout@v4
29 | 
30 |       - name: Enable Corepack
31 |         run: corepack enable
32 | 
33 |       - name: Set up Node.js ${{ matrix.node-version }}
34 |         uses: actions/setup-node@v4
35 |         with:
36 |           node-version: ${{ matrix.node-version }}
37 |           cache: "yarn"
38 | 
39 |       - name: Setup pnpm
40 |         if: matrix.package-manager == 'pnpm'
41 |         uses: pnpm/action-setup@v2
42 |         with:
43 |           version: 10.5.1
44 | 
45 |       - name: Install dependencies
46 |         run: yarn install --frozen-lockfile
47 | 
48 |       - name: Build package
49 |         run: yarn build
50 | 
51 |       - name: Create test directory
52 |         run: mkdir -p /tmp/test-${{ matrix.package-manager }}
53 | 
54 |       - name: Run create-agent-chat-app command
55 |         run: ./scripts/test-create-command.sh ${{ matrix.package-manager }}
56 | 
57 |       - name: Test build in created project
58 |         run: ./scripts/test-build.sh ${{ matrix.package-manager }}
59 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
 1 | node_modules
 2 | index.js
 3 | gitignore.js
 4 | .yarn/*
 5 | !.yarn/patches
 6 | !.yarn/plugins
 7 | !.yarn/releases
 8 | !.yarn/sdks
 9 | !.yarn/versions
10 | yarn-error.log
11 | 
12 | .turbo
13 | **/.turbo
14 | **/.eslintcache
15 | 
16 | .env
17 | .env.full
18 | .env.quickstart
19 | .ipynb_checkpoints
20 | 
21 | 
22 | # LangGraph API
23 | .langgraph_api
24 | 
25 | __pycache__/
26 | .mypy_cache/
27 | .ruff_cache/


--------------------------------------------------------------------------------
/.prettierignore:
--------------------------------------------------------------------------------
1 | node_modules
2 | dist
3 | .env
4 | coverage
5 | index.js
6 | 


--------------------------------------------------------------------------------
/.yarnrc.yml:
--------------------------------------------------------------------------------
1 | nodeLinker: node-modules
2 | 


--------------------------------------------------------------------------------
/LICENSE:
--------------------------------------------------------------------------------
 1 | MIT License
 2 | 
 3 | Copyright (c) 2024 Brace Sproul
 4 | 
 5 | Permission is hereby granted, free of charge, to any person obtaining a copy
 6 | of this software and associated documentation files (the "Software"), to deal
 7 | in the Software without restriction, including without limitation the rights
 8 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 9 | copies of the Software, and to permit persons to whom the Software is
10 | furnished to do so, subject to the following conditions:
11 | 
12 | The above copyright notice and this permission notice shall be included in all
13 | copies or substantial portions of the Software.
14 | 
15 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
21 | SOFTWARE.
22 | 


--------------------------------------------------------------------------------
/eslint.config.js:
--------------------------------------------------------------------------------
 1 | import js from "@eslint/js";
 2 | import tseslint from "@typescript-eslint/eslint-plugin";
 3 | import tsparser from "@typescript-eslint/parser";
 4 | import importPlugin from "eslint-plugin-import";
 5 | import noInstanceofPlugin from "eslint-plugin-no-instanceof";
 6 | import prettierConfig from "eslint-config-prettier";
 7 | import globals from "globals";
 8 | 
 9 | export default [
10 |   js.configs.recommended,
11 |   prettierConfig,
12 |   {
13 |     files: ["**/*.ts", "**/*.tsx"],
14 |     plugins: {
15 |       "@typescript-eslint": tseslint,
16 |       import: importPlugin,
17 |       "no-instanceof": noInstanceofPlugin,
18 |     },
19 |     languageOptions: {
20 |       parser: tsparser,
21 |       parserOptions: {
22 |         ecmaVersion: 2021,
23 |         sourceType: "module",
24 |         project: "./tsconfig.json",
25 |         tsconfigRootDir: ".",
26 |       },
27 |       globals: {
28 |         ...globals.node,
29 |       },
30 |     },
31 |     ignores: [
32 |       "node_modules/**",
33 |       "dist/**",
34 |       "dist-cjs/**",
35 |       ".eslintrc.cjs",
36 |       "scripts/**",
37 |       "*.d.ts",
38 |     ],
39 |     rules: {
40 |       "@typescript-eslint/explicit-module-boundary-types": 0,
41 |       "@typescript-eslint/no-empty-function": 0,
42 |       "@typescript-eslint/no-shadow": 0,
43 |       "@typescript-eslint/no-empty-interface": 0,
44 |       "no-unused-vars": 0,
45 |       "@typescript-eslint/no-use-before-define": ["error", "nofunc"],
46 |       "@typescript-eslint/no-unused-vars": [
47 |         "warn",
48 |         {
49 |           args: "none",
50 |           varsIgnorePattern: "^_",
51 |           argsIgnorePattern: "^_",
52 |           caughtErrorsIgnorePattern: "^_",
53 |           destructuredArrayIgnorePattern: "^_",
54 |           ignoreRestSiblings: true,
55 |         },
56 |       ],
57 |       "@typescript-eslint/no-floating-promises": "error",
58 |       "@typescript-eslint/no-misused-promises": "error",
59 |       "@typescript-eslint/no-explicit-any": 0,
60 |       camelcase: 0,
61 |       "class-methods-use-this": 0,
62 |       "import/extensions": [2, "ignorePackages"],
63 |       "import/no-extraneous-dependencies": [
64 |         "error",
65 |         { devDependencies: ["**/*.test.ts"] },
66 |       ],
67 |       "import/no-unresolved": 0,
68 |       "import/prefer-default-export": 0,
69 |       "keyword-spacing": "error",
70 |       "max-classes-per-file": 0,
71 |       "max-len": 0,
72 |       "no-await-in-loop": 0,
73 |       "no-bitwise": 0,
74 |       "no-console": 0,
75 |       "no-restricted-syntax": 0,
76 |       "no-shadow": 0,
77 |       "no-continue": 0,
78 |       "no-underscore-dangle": 0,
79 |       "no-use-before-define": 0,
80 |       "no-useless-constructor": 0,
81 |       "no-return-await": 0,
82 |       "consistent-return": 0,
83 |       "no-else-return": 0,
84 |       "new-cap": ["error", { properties: false, capIsNew: false }],
85 |     },
86 |   },
87 | ];
88 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "create-agent-chat-app",
 3 |   "version": "0.1.6",
 4 |   "description": "Create a LangGraph chat app with one command",
 5 |   "repository": {
 6 |     "type": "git",
 7 |     "url": "git+https://github.com/langchain-ai/create-agent-chat-app.git"
 8 |   },
 9 |   "homepage": "https://github.com/langchain-ai/create-agent-chat-app/blob/main/README.md",
10 |   "packageManager": "yarn@3.5.1",
11 |   "main": "index.js",
12 |   "author": "Brace Sproul",
13 |   "license": "MIT",
14 |   "type": "module",
15 |   "bin": "index.js",
16 |   "engines": {
17 |     "node": ">=16.0.0"
18 |   },
19 |   "files": [
20 |     "index.js",
21 |     "gitignore.js",
22 |     "templates/**"
23 |   ],
24 |   "scripts": {
25 |     "build": "tsc ./src/*.ts --esModuleInterop --target es2020 --module esnext --moduleResolution node --outDir .",
26 |     "prepublishOnly": "npm run build",
27 |     "clean": "rm -rf src/index.js",
28 |     "format": "prettier --write . --ignore-path .prettierignore",
29 |     "lint": "eslint 'src/**/*.{ts,tsx}'",
30 |     "lint:fix": "eslint 'src/**/*.{ts,tsx}' --fix",
31 |     "format:check": "prettier --check . --ignore-path .prettierignore",
32 |     "e2e": "./scripts/run-all-e2e-local.sh",
33 |     "e2e:npm": "./scripts/run-e2e-local.sh npm cleanup",
34 |     "e2e:yarn": "./scripts/run-e2e-local.sh yarn cleanup",
35 |     "e2e:pnpm": "./scripts/run-e2e-local.sh pnpm cleanup",
36 |     "e2e:cleanup": "./scripts/cleanup-tests.sh"
37 |   },
38 |   "dependencies": {
39 |     "@clack/prompts": "^0.10.0",
40 |     "chalk": "^5.3.0",
41 |     "commander": "^13.1.0",
42 |     "fs-extra": "^11.2.0"
43 |   },
44 |   "devDependencies": {
45 |     "@eslint/eslintrc": "^3.3.0",
46 |     "@eslint/js": "^9.22.0",
47 |     "@jest/globals": "^29.7.0",
48 |     "@tsconfig/recommended": "^1.0.7",
49 |     "@types/fs-extra": "^11.0.4",
50 |     "@types/jest": "^29.5.0",
51 |     "@types/node": "^22.10.6",
52 |     "@types/prompts": "^2.4.9",
53 |     "@typescript-eslint/eslint-plugin": "^8.26.1",
54 |     "@typescript-eslint/parser": "^8.26.1",
55 |     "dotenv": "^16.4.7",
56 |     "eslint": "^9.19.0",
57 |     "eslint-config-prettier": "^10.1.1",
58 |     "eslint-plugin-import": "^2.31.0",
59 |     "eslint-plugin-no-instanceof": "^1.0.1",
60 |     "eslint-plugin-prettier": "^5.2.3",
61 |     "globals": "^16.0.0",
62 |     "jest": "^29.7.0",
63 |     "prettier": "^3.3.3",
64 |     "ts-jest": "^29.1.0",
65 |     "tsx": "^4.19.2",
66 |     "typescript": "^5.3.3"
67 |   },
68 |   "keywords": [
69 |     "langgraph",
70 |     "starter",
71 |     "template",
72 |     "create-app",
73 |     "vite",
74 |     "react",
75 |     "langchain",
76 |     "openai"
77 |   ]
78 | }
79 | 


--------------------------------------------------------------------------------
/scripts/cleanup-tests.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | set -e
 3 | 
 4 | echo "Cleaning up test directories..."
 5 | 
 6 | # Clean up test directories for all package managers
 7 | rm -rf /tmp/test-npm /tmp/test-yarn /tmp/test-pnpm
 8 | 
 9 | echo "Cleanup completed successfully!"
10 | 


--------------------------------------------------------------------------------
/scripts/run-all-e2e-local.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | set -e
 3 | 
 4 | SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
 5 | 
 6 | # Run tests for each package manager
 7 | echo "Running E2E tests for all package managers..."
 8 | 
 9 | # Test npm
10 | echo "=== Testing with npm ==="
11 | "$SCRIPT_DIR/run-e2e-local.sh" npm
12 | 
13 | # Test yarn
14 | echo "=== Testing with yarn ==="
15 | "$SCRIPT_DIR/run-e2e-local.sh" yarn
16 | 
17 | # Test pnpm
18 | echo "=== Testing with pnpm ==="
19 | "$SCRIPT_DIR/run-e2e-local.sh" pnpm
20 | 
21 | # Clean up after all tests
22 | echo "Cleaning up test directories..."
23 | "$SCRIPT_DIR/cleanup-tests.sh"
24 | 
25 | echo "All E2E tests completed successfully!"
26 | 


--------------------------------------------------------------------------------
/scripts/run-e2e-local.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | set -e
 3 | 
 4 | # Check if package manager is provided
 5 | if [ -z "$1" ]; then
 6 |   echo "Usage: $0 <package-manager> [cleanup]"
 7 |   echo "  package-manager: npm, yarn, or pnpm"
 8 |   echo "  cleanup: add 'cleanup' as second argument to clean up test directories after tests"
 9 |   exit 1
10 | fi
11 | 
12 | PACKAGE_MANAGER=$1
13 | CLEANUP=$2
14 | SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
15 | PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
16 | 
17 | # Build the package first
18 | echo "Building package..."
19 | cd "$PROJECT_ROOT"
20 | yarn build
21 | 
22 | # Run the test scripts
23 | echo "Running E2E tests for $PACKAGE_MANAGER..."
24 | "$SCRIPT_DIR/test-create-command.sh" "$PACKAGE_MANAGER"
25 | "$SCRIPT_DIR/test-build.sh" "$PACKAGE_MANAGER"
26 | 
27 | # Clean up if requested
28 | if [ "$CLEANUP" = "cleanup" ]; then
29 |   echo "Cleaning up test directories..."
30 |   "$SCRIPT_DIR/cleanup-tests.sh"
31 | fi
32 | 
33 | echo "E2E tests for $PACKAGE_MANAGER completed successfully!"
34 | 


--------------------------------------------------------------------------------
/scripts/test-build.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | set -e
 3 | 
 4 | # Get the package manager from the first argument
 5 | PACKAGE_MANAGER=$1
 6 | TEST_DIR="/tmp/test-${PACKAGE_MANAGER}"
 7 | PROJECT_NAME="test-agent-chat-app"
 8 | PROJECT_DIR="${TEST_DIR}/${PROJECT_NAME}"
 9 | 
10 | echo "Testing build in created project with package manager: ${PACKAGE_MANAGER}"
11 | 
12 | # Navigate to the project directory
13 | cd "${PROJECT_DIR}"
14 | 
15 | # Run the build command based on the package manager
16 | echo "Building project..."
17 | case "${PACKAGE_MANAGER}" in
18 |   npm)
19 |     npm run build
20 |     ;;
21 |   yarn)
22 |     yarn build
23 |     ;;
24 |   pnpm)
25 |     pnpm build
26 |     ;;
27 |   *)
28 |     echo "Unsupported package manager: ${PACKAGE_MANAGER}"
29 |     exit 1
30 |     ;;
31 | esac
32 | 
33 | # Check if the build was successful
34 | if [ $? -eq 0 ]; then
35 |   echo "Build completed successfully!"
36 | else
37 |   echo "Build failed!"
38 |   exit 1
39 | fi
40 | 


--------------------------------------------------------------------------------
/scripts/test-create-command.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | set -e
 3 | 
 4 | # Get the package manager from the first argument
 5 | PACKAGE_MANAGER=$1
 6 | TEST_DIR="/tmp/test-${PACKAGE_MANAGER}"
 7 | PROJECT_NAME="test-agent-chat-app"
 8 | PROJECT_DIR="${TEST_DIR}/${PROJECT_NAME}"
 9 | 
10 | echo "Testing create-agent-chat-app with package manager: ${PACKAGE_MANAGER}"
11 | 
12 | # Clean up any previous test directory
13 | rm -rf "${PROJECT_DIR}"
14 | mkdir -p "${TEST_DIR}"
15 | cd "${TEST_DIR}"
16 | 
17 | # Determine the project root in local environment or CI
18 | PROJECT_ROOT=${GITHUB_WORKSPACE:-$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)}
19 | 
20 | # Run the create command with the specified package manager
21 | echo "Running create-agent-chat-app command..."
22 | cd "${TEST_DIR}"
23 | 
24 | # Run the command directly using node with the local index.js file
25 | echo "Using local package from ${PROJECT_ROOT}"
26 | node "${PROJECT_ROOT}/index.js" -Y --project-name="${PROJECT_NAME}" --package-manager="${PACKAGE_MANAGER}"
27 | 
28 | # Verify the project was created
29 | if [ ! -d "${PROJECT_DIR}" ]; then
30 |   echo "Error: Project directory was not created at ${PROJECT_DIR}"
31 |   exit 1
32 | fi
33 | 
34 | echo "Project created successfully at ${PROJECT_DIR}"
35 | 


--------------------------------------------------------------------------------
/src/gitignore.ts:
--------------------------------------------------------------------------------
  1 | export const BASE_GITIGNORE = `# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
  2 | 
  3 | # dependencies
  4 | /node_modules
  5 | **/node_modules
  6 | /.pnp
  7 | .pnp.js
  8 | .yarn/install-state.gz
  9 | .yarn/cache
 10 | 
 11 | # testing
 12 | /coverage
 13 | 
 14 | # next.js
 15 | /.next/
 16 | /out/
 17 | 
 18 | # production
 19 | /build
 20 | /dist
 21 | **/dist
 22 | .turbo/
 23 | 
 24 | # misc
 25 | .DS_Store
 26 | *.pem
 27 | 
 28 | # debug
 29 | npm-debug.log*
 30 | yarn-debug.log*
 31 | yarn-error.log*
 32 | 
 33 | # local env files
 34 | .env*.local
 35 | .env
 36 | 
 37 | # vercel
 38 | .vercel
 39 | 
 40 | # typescript
 41 | *.tsbuildinfo
 42 | next-env.d.ts
 43 | 
 44 | credentials.json
 45 | 
 46 | # LangGraph API
 47 | .langgraph_api
 48 | `;
 49 | 
 50 | export const NEXTJS_GITIGNORE = `# Logs
 51 | logs
 52 | *.log
 53 | npm-debug.log*
 54 | yarn-debug.log*
 55 | yarn-error.log*
 56 | pnpm-debug.log*
 57 | lerna-debug.log*
 58 | 
 59 | node_modules
 60 | dist
 61 | dist-ssr
 62 | *.local
 63 | 
 64 | # Editor directories and files
 65 | .vscode/*
 66 | !.vscode/extensions.json
 67 | .idea
 68 | .DS_Store
 69 | *.suo
 70 | *.ntvs*
 71 | *.njsproj
 72 | *.sln
 73 | *.sw?
 74 | 
 75 | # LangGraph API
 76 | .langgraph_api
 77 | .env
 78 | .next/
 79 | next-env.d.ts`;
 80 | 
 81 | export const VITE_GITIGNORE = `# Logs
 82 | logs
 83 | *.log
 84 | npm-debug.log*
 85 | yarn-debug.log*
 86 | yarn-error.log*
 87 | pnpm-debug.log*
 88 | lerna-debug.log*
 89 | 
 90 | node_modules
 91 | dist
 92 | dist-ssr
 93 | *.local
 94 | 
 95 | # Editor directories and files
 96 | .vscode/*
 97 | !.vscode/extensions.json
 98 | .idea
 99 | .DS_Store
100 | *.suo
101 | *.ntvs*
102 | *.njsproj
103 | *.sln
104 | *.sw?
105 | 
106 | # LangGraph API
107 | .langgraph_api
108 | .env`;
109 | 


--------------------------------------------------------------------------------
/static/demo.gif:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/static/demo.gif


--------------------------------------------------------------------------------
/templates/memory-agent/configuration.ts:
--------------------------------------------------------------------------------
 1 | // Define the configurable parameters for the agent
 2 | 
 3 | import { Annotation, LangGraphRunnableConfig } from "@langchain/langgraph";
 4 | import { SYSTEM_PROMPT } from "./prompts.js";
 5 | 
 6 | export const ConfigurationAnnotation = Annotation.Root({
 7 |   userId: Annotation<string>(),
 8 |   model: Annotation<string>(),
 9 |   systemPrompt: Annotation<string>(),
10 | });
11 | 
12 | export type Configuration = typeof ConfigurationAnnotation.State;
13 | 
14 | export function ensureConfiguration(config?: LangGraphRunnableConfig) {
15 |   const configurable = config?.configurable || {};
16 |   return {
17 |     userId: configurable?.userId || "default",
18 |     model: configurable?.model || "anthropic/claude-3-7-sonnet-latest",
19 |     systemPrompt: configurable?.systemPrompt || SYSTEM_PROMPT,
20 |   };
21 | }
22 | 


--------------------------------------------------------------------------------
/templates/memory-agent/graph.ts:
--------------------------------------------------------------------------------
  1 | // Main graph
  2 | import {
  3 |   LangGraphRunnableConfig,
  4 |   START,
  5 |   StateGraph,
  6 |   END,
  7 | } from "@langchain/langgraph";
  8 | import { BaseMessage, AIMessage } from "@langchain/core/messages";
  9 | import { initChatModel } from "langchain/chat_models/universal";
 10 | import { initializeTools } from "./tools.js";
 11 | import {
 12 |   ConfigurationAnnotation,
 13 |   ensureConfiguration,
 14 | } from "./configuration.js";
 15 | import { GraphAnnotation } from "./state.js";
 16 | import { getStoreFromConfigOrThrow, splitModelAndProvider } from "./utils.js";
 17 | 
 18 | async function callModel(
 19 |   state: typeof GraphAnnotation.State,
 20 |   config: LangGraphRunnableConfig,
 21 | ): Promise<{ messages: BaseMessage[] }> {
 22 |   const llm = await initChatModel();
 23 |   const store = getStoreFromConfigOrThrow(config);
 24 |   const configurable = ensureConfiguration(config);
 25 |   const memories = await store.search(["memories", configurable.userId], {
 26 |     limit: 10,
 27 |   });
 28 | 
 29 |   let formatted =
 30 |     memories
 31 |       ?.map((mem) => `[${mem.key}]: ${JSON.stringify(mem.value)}`)
 32 |       ?.join("\n") || "";
 33 |   if (formatted) {
 34 |     formatted = `\n<memories>\n${formatted}\n</memories>`;
 35 |   }
 36 | 
 37 |   const sys = configurable.systemPrompt
 38 |     .replace("{user_info}", formatted)
 39 |     .replace("{time}", new Date().toISOString());
 40 | 
 41 |   const tools = initializeTools(config);
 42 |   const boundLLM = llm.bind({
 43 |     tools: tools,
 44 |     tool_choice: "auto",
 45 |   });
 46 | 
 47 |   const result = await boundLLM.invoke(
 48 |     [{ role: "system", content: sys }, ...state.messages],
 49 |     {
 50 |       configurable: splitModelAndProvider(configurable.model),
 51 |     },
 52 |   );
 53 | 
 54 |   return { messages: [result] };
 55 | }
 56 | 
 57 | async function storeMemory(
 58 |   state: typeof GraphAnnotation.State,
 59 |   config: LangGraphRunnableConfig,
 60 | ): Promise<{ messages: BaseMessage[] }> {
 61 |   const lastMessage = state.messages[state.messages.length - 1] as AIMessage;
 62 |   const toolCalls = lastMessage.tool_calls || [];
 63 | 
 64 |   const tools = initializeTools(config);
 65 |   const upsertMemoryTool = tools[0];
 66 | 
 67 |   const savedMemories = await Promise.all(
 68 |     toolCalls.map(async (tc) => {
 69 |       return await upsertMemoryTool.invoke(tc);
 70 |     }),
 71 |   );
 72 | 
 73 |   return { messages: savedMemories };
 74 | }
 75 | 
 76 | function routeMessage(
 77 |   state: typeof GraphAnnotation.State,
 78 | ): "store_memory" | typeof END {
 79 |   const lastMessage = state.messages[state.messages.length - 1] as AIMessage;
 80 |   if (lastMessage.tool_calls?.length) {
 81 |     return "store_memory";
 82 |   }
 83 |   return END;
 84 | }
 85 | 
 86 | // Create the graph + all nodes
 87 | export const builder = new StateGraph(
 88 |   {
 89 |     stateSchema: GraphAnnotation,
 90 |   },
 91 |   ConfigurationAnnotation,
 92 | )
 93 |   .addNode("call_model", callModel)
 94 |   .addNode("store_memory", storeMemory)
 95 |   .addEdge(START, "call_model")
 96 |   .addConditionalEdges("call_model", routeMessage, {
 97 |     store_memory: "store_memory",
 98 |     [END]: END,
 99 |   })
100 |   .addEdge("store_memory", "call_model");
101 | 
102 | export const graph = builder.compile();
103 | graph.name = "MemoryAgent";
104 | 


--------------------------------------------------------------------------------
/templates/memory-agent/prompts.ts:
--------------------------------------------------------------------------------
1 | // Define default prompts
2 | 
3 | export const SYSTEM_PROMPT = `You are a helpful and friendly chatbot. Get to know the user! \
4 | Ask questions! Be spontaneous! 
5 | {user_info}
6 | 
7 | System Time: {time}`;
8 | 


--------------------------------------------------------------------------------
/templates/memory-agent/state.ts:
--------------------------------------------------------------------------------
 1 | import { BaseMessage } from "@langchain/core/messages";
 2 | import {
 3 |   Annotation,
 4 |   Messages,
 5 |   messagesStateReducer,
 6 | } from "@langchain/langgraph";
 7 | 
 8 | /**
 9 |  * Main graph state.
10 |  */
11 | export const GraphAnnotation = Annotation.Root({
12 |   /**
13 |    * The messages in the conversation.
14 |    */
15 |   messages: Annotation<BaseMessage[], Messages>({
16 |     reducer: messagesStateReducer,
17 |     default: () => [],
18 |   }),
19 | });
20 | 


--------------------------------------------------------------------------------
/templates/memory-agent/static/memories.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/memory-agent/static/memories.png


--------------------------------------------------------------------------------
/templates/memory-agent/static/memory_graph.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/memory-agent/static/memory_graph.png


--------------------------------------------------------------------------------
/templates/memory-agent/tests/integration/graph.int.test.ts:
--------------------------------------------------------------------------------
 1 | import { describe, it, expect } from "@jest/globals";
 2 | import { MemorySaver, InMemoryStore } from "@langchain/langgraph";
 3 | import { builder } from "../../graph.js";
 4 | 
 5 | describe("Memory Graph", () => {
 6 |   const conversations = [
 7 |     ["My name is Alice and I love pizza. Remember this."],
 8 |     [
 9 |       "Hi, I'm Bob and I enjoy playing tennis. Remember this.",
10 |       "Yes, I also have a pet dog named Max.",
11 |       "Max is a golden retriever and he's 5 years old. Please remember this too.",
12 |     ],
13 |     [
14 |       "Hello, I'm Charlie. I work as a software engineer and I'm passionate about AI. Remember this.",
15 |       "I specialize in machine learning algorithms and I'm currently working on a project involving natural language processing.",
16 |       "My main goal is to improve sentiment analysis accuracy in multi-lingual texts. It's challenging but exciting.",
17 |       "We've made some progress using transformer models, but we're still working on handling context and idioms across languages.",
18 |       "Chinese and English have been the most challenging pair so far due to their vast differences in structure and cultural contexts.",
19 |     ],
20 |   ];
21 | 
22 |   it.each(
23 |     conversations.map((conversation, index) => [
24 |       ["short", "medium", "long"][index],
25 |       conversation,
26 |     ]),
27 |   )(
28 |     "should store memories for %s conversation",
29 |     async (_, conversation) => {
30 |       const memStore = new InMemoryStore();
31 |       const graph = builder.compile({
32 |         store: memStore,
33 |         checkpointer: new MemorySaver(),
34 |       });
35 |       const userId = "test-user";
36 |       for (const content of conversation) {
37 |         await graph.invoke(
38 |           {
39 |             messages: [
40 |               { role: "user", content: [{ type: "text", text: content }] },
41 |             ],
42 |           },
43 |           {
44 |             configurable: {
45 |               userId,
46 |               thread_id: "thread",
47 |               model: "gpt-4o-mini",
48 |               systemPrompt: "You are a helpful assistant.",
49 |             },
50 |           },
51 |         );
52 |       }
53 | 
54 |       const namespace = ["memories", userId];
55 |       const memories = await memStore.search(namespace);
56 |       expect(memories.length).toBeGreaterThan(0);
57 | 
58 |       const badNamespace = ["memories", "wrong-user"];
59 |       const badMemories = await memStore.search(badNamespace);
60 |       expect(badMemories.length).toBe(0);
61 |     },
62 |     30000,
63 |   );
64 | });
65 | 


--------------------------------------------------------------------------------
/templates/memory-agent/tests/unit/configuration.test.ts:
--------------------------------------------------------------------------------
 1 | import { describe, it, expect } from "@jest/globals";
 2 | import { ensureConfiguration } from "../../configuration.js";
 3 | 
 4 | describe("Configuration", () => {
 5 |   it("should initialize configuration from an empty object", () => {
 6 |     const emptyConfig = {};
 7 |     const result = ensureConfiguration(emptyConfig);
 8 |     expect(result).toBeDefined();
 9 |     expect(typeof result).toBe("object");
10 |   });
11 | });
12 | 


--------------------------------------------------------------------------------
/templates/memory-agent/tests/unit/graph.test.ts:
--------------------------------------------------------------------------------
 1 | import { describe, it, expect } from "@jest/globals";
 2 | import { graph } from "../../graph.js";
 3 | 
 4 | describe("Memory Graph", () => {
 5 |   it("should initialize and compile the graph", () => {
 6 |     expect(graph).toBeDefined();
 7 |     expect(graph.name).toBe("MemoryAgent");
 8 |   });
 9 | 
10 |   // TODO: Add more test cases for individual nodes, routing logic, tool integration, and output validation
11 | });
12 | 


--------------------------------------------------------------------------------
/templates/memory-agent/tools.ts:
--------------------------------------------------------------------------------
 1 | import { LangGraphRunnableConfig } from "@langchain/langgraph";
 2 | import { ensureConfiguration } from "./configuration.js";
 3 | import { v4 as uuidv4 } from "uuid";
 4 | import { tool } from "@langchain/core/tools";
 5 | import { z } from "zod";
 6 | import { getStoreFromConfigOrThrow } from "./utils.js";
 7 | 
 8 | /**
 9 |  * Initialize tools within a function so that they have access to the current
10 |  * state and config at runtime.
11 |  */
12 | export function initializeTools(config?: LangGraphRunnableConfig) {
13 |   /**
14 |    * Upsert a memory in the database.
15 |    * @param content The main content of the memory.
16 |    * @param context Additional context for the memory.
17 |    * @param memoryId Optional ID to overwrite an existing memory.
18 |    * @returns A string confirming the memory storage.
19 |    */
20 |   async function upsertMemory(opts: {
21 |     content: string;
22 |     context: string;
23 |     memoryId?: string;
24 |   }): Promise<string> {
25 |     const { content, context, memoryId } = opts;
26 |     if (!config || !config.store) {
27 |       throw new Error("Config or store not provided");
28 |     }
29 | 
30 |     const configurable = ensureConfiguration(config);
31 |     const memId = memoryId || uuidv4();
32 |     const store = getStoreFromConfigOrThrow(config);
33 | 
34 |     await store.put(["memories", configurable.userId], memId, {
35 |       content,
36 |       context,
37 |     });
38 | 
39 |     return `Stored memory ${memId}`;
40 |   }
41 | 
42 |   const upsertMemoryTool = tool(upsertMemory, {
43 |     name: "upsertMemory",
44 |     description:
45 |       "Upsert a memory in the database. If a memory conflicts with an existing one, \
46 |       update the existing one by passing in the memory_id instead of creating a duplicate. \
47 |       If the user corrects a memory, update it. Can call multiple times in parallel \
48 |       if you need to store or update multiple memories.",
49 |     schema: z.object({
50 |       content: z.string().describe(
51 |         "The main content of the memory. For example: \
52 |           'User expressed interest in learning about French.'",
53 |       ),
54 |       context: z.string().describe(
55 |         "Additional context for the memory. For example: \
56 |           'This was mentioned while discussing career options in Europe.'",
57 |       ),
58 |       memoryId: z
59 |         .string()
60 |         .optional()
61 |         .describe(
62 |           "The memory ID to overwrite. Only provide if updating an existing memory.",
63 |         ),
64 |     }),
65 |   });
66 | 
67 |   return [upsertMemoryTool];
68 | }
69 | 


--------------------------------------------------------------------------------
/templates/memory-agent/utils.ts:
--------------------------------------------------------------------------------
 1 | import { BaseStore, LangGraphRunnableConfig } from "@langchain/langgraph";
 2 | /**
 3 |  * Get the store from the configuration or throw an error.
 4 |  */
 5 | export function getStoreFromConfigOrThrow(
 6 |   config: LangGraphRunnableConfig,
 7 | ): BaseStore {
 8 |   if (!config.store) {
 9 |     throw new Error("Store not found in configuration");
10 |   }
11 | 
12 |   return config.store;
13 | }
14 | 
15 | /**
16 |  * Split the fully specified model name into model and provider.
17 |  */
18 | export function splitModelAndProvider(fullySpecifiedName: string): {
19 |   model: string;
20 |   provider?: string;
21 | } {
22 |   let provider: string | undefined;
23 |   let model: string;
24 | 
25 |   if (fullySpecifiedName.includes("/")) {
26 |     [provider, model] = fullySpecifiedName.split("/", 2);
27 |   } else {
28 |     model = fullySpecifiedName;
29 |   }
30 | 
31 |   return { model, provider };
32 | }
33 | 


--------------------------------------------------------------------------------
/templates/monorepo/.gitignore:
--------------------------------------------------------------------------------
 1 | # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 2 | 
 3 | # dependencies
 4 | /node_modules
 5 | **/node_modules
 6 | /.pnp
 7 | .pnp.js
 8 | .yarn/install-state.gz
 9 | .yarn/cache
10 | 
11 | # testing
12 | /coverage
13 | 
14 | # next.js
15 | /.next/
16 | /out/
17 | 
18 | # production
19 | /build
20 | /dist
21 | **/dist
22 | .turbo/
23 | 
24 | # misc
25 | .DS_Store
26 | *.pem
27 | 
28 | # debug
29 | npm-debug.log*
30 | yarn-debug.log*
31 | yarn-error.log*
32 | 
33 | # local env files
34 | .env*.local
35 | .env
36 | 
37 | # vercel
38 | .vercel
39 | 
40 | # typescript
41 | *.tsbuildinfo
42 | next-env.d.ts
43 | 
44 | credentials.json
45 | 
46 | # LangGraph API
47 | .langgraph_api
48 | 


--------------------------------------------------------------------------------
/templates/monorepo/README.md:
--------------------------------------------------------------------------------
 1 | # Agent App Monorepo
 2 | 
 3 | This monorepo contains a Chat UI, and up to four pre-built LangGraph agents.
 4 | 
 5 | ## Setup
 6 | 
 7 | First, install dependencies, if you didn't select the auto-install option when creating the app:
 8 | 
 9 | ```bash
10 | yarn install
11 | # or
12 | pnpm install
13 | # or
14 | npm install
15 | ```
16 | 
17 | Then, set the necessary environment variables:
18 | 
19 | ```bash
20 | cp .env.example .env
21 | ```
22 | 
23 | When running the Chat UI, it will prompt you to enter your deployment URL, assistant ID, and LangSmith API key. If you want to hardcode these values, and bypass the initial setup form, you can set the following environment variables inside `apps/web/.env`:
24 | 
25 | If using Vite:
26 | 
27 | ```bash
28 | VITE_API_URL=http://localhost:2024
29 | VITE_ASSISTANT_ID=agent
30 | ```
31 | 
32 | If using Next.js:
33 | 
34 | ```bash
35 | NEXT_PUBLIC_API_URL=http://localhost:2024
36 | NEXT_PUBLIC_ASSISTANT_ID=agent
37 | ```
38 | 
39 | > [!TIP]
40 | > If you want to connect to a production LangGraph server, read the [Going to Production](apps/web/README.md#going-to-production) section in the Chat UI readme.
41 | 
42 | Once you have all the necessary environment variables set, you can run both the Chat UI, and agent server in dev mode:
43 | 
44 | ```bash
45 | yarn dev
46 | # or
47 | pnpm dev
48 | # or
49 | npm run dev
50 | ```
51 | 
52 | For more information on the agents, and Chat UI, read their respective READMEs:
53 | 
54 | - [Chat UI](apps/web/README.md)
55 | - [Agents](apps/agents/README.md)
56 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/.gitignore:
--------------------------------------------------------------------------------
 1 | # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 2 | 
 3 | # dependencies
 4 | /node_modules
 5 | /.pnp
 6 | .pnp.js
 7 | .yarn/install-state.gz
 8 | .yarn/cache
 9 | 
10 | # testing
11 | /coverage
12 | 
13 | # next.js
14 | /.next/
15 | /out/
16 | 
17 | # production
18 | /build
19 | 
20 | # misc
21 | .DS_Store
22 | *.pem
23 | 
24 | # debug
25 | npm-debug.log*
26 | yarn-debug.log*
27 | yarn-error.log*
28 | 
29 | # local env files
30 | .env*.local
31 | .env
32 | 
33 | # vercel
34 | .vercel
35 | 
36 | # typescript
37 | *.tsbuildinfo
38 | next-env.d.ts
39 | 
40 | credentials.json
41 | 
42 | # LangGraph API
43 | .langgraph_api
44 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/.prettierrc:
--------------------------------------------------------------------------------
 1 | {
 2 |   "$schema": "https://json.schemastore.org/prettierrc",
 3 |   "printWidth": 80,
 4 |   "tabWidth": 2,
 5 |   "useTabs": false,
 6 |   "semi": true,
 7 |   "singleQuote": false,
 8 |   "quoteProps": "as-needed",
 9 |   "jsxSingleQuote": false,
10 |   "trailingComma": "es5",
11 |   "bracketSpacing": true,
12 |   "arrowParens": "always",
13 |   "requirePragma": false,
14 |   "insertPragma": false,
15 |   "proseWrap": "preserve",
16 |   "htmlWhitespaceSensitivity": "css",
17 |   "vueIndentScriptAndStyle": false,
18 |   "endOfLine": "lf"
19 | }
20 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/README.md:
--------------------------------------------------------------------------------
1 | # LangGraph Agents
2 | 
3 | This package contains the agents you selected when configuring the Agent Chat App. Each individual agent has its own `README.md` file with instructions specific to that agent. For information on each agent, read their respective READMEs.
4 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/eslint.config.js:
--------------------------------------------------------------------------------
 1 | import js from "@eslint/js";
 2 | import tseslint from "@typescript-eslint/eslint-plugin";
 3 | import tsparser from "@typescript-eslint/parser";
 4 | import importPlugin from "eslint-plugin-import";
 5 | import noInstanceofPlugin from "eslint-plugin-no-instanceof";
 6 | import prettierConfig from "eslint-config-prettier";
 7 | import globals from "globals";
 8 | 
 9 | export default [
10 |   js.configs.recommended,
11 |   prettierConfig,
12 |   {
13 |     files: ["**/*.ts", "**/*.tsx"],
14 |     plugins: {
15 |       "@typescript-eslint": tseslint,
16 |       import: importPlugin,
17 |       "no-instanceof": noInstanceofPlugin,
18 |     },
19 |     languageOptions: {
20 |       parser: tsparser,
21 |       parserOptions: {
22 |         ecmaVersion: 2021,
23 |         sourceType: "module",
24 |         project: "./tsconfig.json",
25 |         tsconfigRootDir: ".",
26 |       },
27 |       globals: {
28 |         ...globals.node,
29 |         ...globals.browser,
30 |       },
31 |     },
32 |     ignores: [
33 |       "node_modules/**",
34 |       "dist/**",
35 |       "dist-cjs/**",
36 |       "eslint.config.js",
37 |       "scripts/**",
38 |       "*.d.ts",
39 |     ],
40 |     rules: {
41 |       "@typescript-eslint/explicit-module-boundary-types": 0,
42 |       "@typescript-eslint/no-empty-function": 0,
43 |       "@typescript-eslint/no-shadow": 0,
44 |       "@typescript-eslint/no-empty-interface": 0,
45 |       "no-unused-vars": 0,
46 |       "@typescript-eslint/no-use-before-define": ["error", "nofunc"],
47 |       "@typescript-eslint/no-unused-vars": [
48 |         "warn",
49 |         {
50 |           args: "none",
51 |           varsIgnorePattern: "^_",
52 |           argsIgnorePattern: "^_",
53 |           caughtErrorsIgnorePattern: "^_",
54 |           destructuredArrayIgnorePattern: "^_",
55 |           ignoreRestSiblings: true,
56 |         },
57 |       ],
58 |       "@typescript-eslint/no-floating-promises": "error",
59 |       "@typescript-eslint/no-misused-promises": "error",
60 |       "@typescript-eslint/no-explicit-any": 0,
61 |       camelcase: 0,
62 |       "class-methods-use-this": 0,
63 |       "import/extensions": [2, "ignorePackages"],
64 |       "import/no-extraneous-dependencies": [
65 |         "error",
66 |         { devDependencies: ["**/*.test.ts"] },
67 |       ],
68 |       "import/no-unresolved": 0,
69 |       "import/prefer-default-export": 0,
70 |       "keyword-spacing": "error",
71 |       "max-classes-per-file": 0,
72 |       "max-len": 0,
73 |       "no-await-in-loop": 0,
74 |       "no-bitwise": 0,
75 |       "no-console": 0,
76 |       "no-restricted-syntax": 0,
77 |       "no-shadow": 0,
78 |       "no-continue": 0,
79 |       "no-underscore-dangle": 0,
80 |       "no-use-before-define": 0,
81 |       "no-useless-constructor": 0,
82 |       "no-return-await": 0,
83 |       "consistent-return": 0,
84 |       "no-else-return": 0,
85 |       "new-cap": ["error", { properties: false, capIsNew: false }],
86 |     },
87 |   },
88 | ];
89 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "agents",
 3 |   "author": "Your Name",
 4 |   "version": "0.0.1",
 5 |   "private": true,
 6 |   "type": "module",
 7 |   "scripts": {
 8 |     "dev": "npx @langchain/langgraph-cli dev --port 2024 --config ../../langgraph.json",
 9 |     "build": "turbo build:internal --filter=agents",
10 |     "build:internal": "{PACKAGE_MANAGER} run clean && tsc",
11 |     "clean": "rm -rf ./dist .turbo || true",
12 |     "format": "prettier --config .prettierrc --write \"src\"",
13 |     "lint": "eslint src",
14 |     "lint:fix": "eslint src --fix"
15 |   },
16 |   "dependencies": {
17 |     "@langchain/core": "^0.3.42",
18 |     "@langchain/langgraph": "^0.2.55",
19 |     "langchain": "^0.3.19",
20 |     "dotenv": "^16.4.5",
21 |     "uuid": "^10.0.0",
22 |     "zod": "^3.23.8"
23 |   },
24 |   "devDependencies": {
25 |     "@typescript-eslint/eslint-plugin": "^8.26.1",
26 |     "@typescript-eslint/parser": "^8.26.1",
27 |     "eslint": "^9.19.0",
28 |     "eslint-config-prettier": "^10.1.1",
29 |     "eslint-plugin-import": "^2.31.0",
30 |     "@jest/globals": "^29.7.0",
31 |     "globals": "^15.14.0",
32 |     "eslint-plugin-no-instanceof": "^1.0.1",
33 |     "eslint-plugin-prettier": "^5.2.3",
34 |     "@eslint/eslintrc": "^3.3.0",
35 |     "@eslint/js": "^9.22.0",
36 |     "@types/node": "^20",
37 |     "@types/uuid": "^10.0.0",
38 |     "prettier": "^3.3.3",
39 |     "tsx": "^4.19.1",
40 |     "turbo": "latest",
41 |     "typescript": "^5"
42 |   }
43 | }
44 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "extends": "@tsconfig/recommended",
 3 |   "compilerOptions": {
 4 |     "outDir": "./dist",
 5 |     "rootDir": "./src",
 6 |     "baseUrl": ".",
 7 |     "target": "ES2021",
 8 |     "lib": ["ES2021", "ES2022.Object", "DOM", "es2023"],
 9 |     "module": "NodeNext",
10 |     "moduleResolution": "NodeNext",
11 |     "esModuleInterop": true,
12 |     "declaration": true,
13 |     "noImplicitReturns": true,
14 |     "noFallthroughCasesInSwitch": true,
15 |     "noUnusedLocals": true,
16 |     "noUnusedParameters": true,
17 |     "useDefineForClassFields": true,
18 |     "strictPropertyInitialization": false,
19 |     "allowJs": true,
20 |     "strict": true
21 |   },
22 |   "include": ["src/"],
23 |   "exclude": ["node_modules/", "dist"]
24 | }
25 | 


--------------------------------------------------------------------------------
/templates/monorepo/apps/agents/turbo.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "extends": ["//"],
 3 |   "tasks": {
 4 |     "build": {
 5 |       "outputs": ["**/dist/**"]
 6 |     },
 7 |     "build:internal": {
 8 |       "dependsOn": ["^build:internal"]
 9 |     },
10 |     "dev": {
11 |       "dependsOn": ["^dev"]
12 |     }
13 |   }
14 | }
15 | 


--------------------------------------------------------------------------------
/templates/monorepo/langgraph.json:
--------------------------------------------------------------------------------
1 | {
2 |   "node_version": "20",
3 |   "dependencies": ["."],
4 |   "graphs": {},
5 |   "env": ".env"
6 | }
7 | 


--------------------------------------------------------------------------------
/templates/monorepo/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "agent-app",
 3 |   "author": "Your Name",
 4 |   "private": true,
 5 |   "workspaces": [
 6 |     "apps/*"
 7 |   ],
 8 |   "scripts": {
 9 |     "dev": "concurrently \"turbo dev --filter=web\" \"turbo dev --filter=agents\"",
10 |     "build": "turbo build",
11 |     "turbo:command": "turbo",
12 |     "format": "turbo format",
13 |     "lint": "turbo lint",
14 |     "lint:fix": "turbo lint:fix"
15 |   },
16 |   "devDependencies": {
17 |     "turbo": "latest",
18 |     "tsx": "^4.19.1",
19 |     "typescript": "^5",
20 |     "eslint": "^9.19.0",
21 |     "concurrently": "^9.1.2",
22 |     "@typescript-eslint/eslint-plugin": "^8.26.1",
23 |     "@eslint/eslintrc": "^3.3.0",
24 |     "@typescript-eslint/parser": "^8.26.1",
25 |     "@tsconfig/recommended": "^1.0.8",
26 |     "eslint-config-prettier": "^10.1.1",
27 |     "eslint-plugin-import": "^2.31.0",
28 |     "eslint-plugin-no-instanceof": "^1.0.1",
29 |     "eslint-plugin-prettier": "^5.2.3",
30 |     "prettier": "^3.3.3"
31 |   },
32 |   "resolutions": {
33 |     "@langchain/core": "^0.3.42"
34 |   }
35 | }
36 | 


--------------------------------------------------------------------------------
/templates/monorepo/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "lib": ["dom", "dom.iterable", "esnext"],
 4 |     "allowJs": true,
 5 |     "skipLibCheck": true,
 6 |     "strict": true,
 7 |     "noEmit": true,
 8 |     "esModuleInterop": true,
 9 |     "module": "esnext",
10 |     "moduleResolution": "bundler",
11 |     "resolveJsonModule": true,
12 |     "isolatedModules": true,
13 |     "jsx": "preserve",
14 |     "incremental": true,
15 |     "plugins": [
16 |       {
17 |         "name": "next"
18 |       }
19 |     ]
20 |   },
21 |   "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
22 |   "exclude": ["node_modules"]
23 | }
24 | 


--------------------------------------------------------------------------------
/templates/monorepo/turbo.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "$schema": "https://turbo.build/schema.json",
 3 |   "globalDependencies": ["**/.env"],
 4 |   "tasks": {
 5 |     "build": {
 6 |       "dependsOn": ["^build"],
 7 |       "outputs": ["dist/**", ".next/**", "!.next/cache/**"]
 8 |     },
 9 |     "lint": {
10 |       "dependsOn": ["^lint"]
11 |     },
12 |     "lint:fix": {
13 |       "dependsOn": ["^lint:fix"]
14 |     },
15 |     "format": {
16 |       "dependsOn": ["^format"]
17 |     },
18 |     "dev": {
19 |       "dependsOn": ["^dev"]
20 |     }
21 |   }
22 | }
23 | 


--------------------------------------------------------------------------------
/templates/nextjs/.dockerignore:
--------------------------------------------------------------------------------
1 | node_modules
2 | .next
3 | .git
4 | .env


--------------------------------------------------------------------------------
/templates/nextjs/.env.example:
--------------------------------------------------------------------------------
 1 | # LangGraph Configuration
 2 | NEXT_PUBLIC_API_URL=http://localhost:2024
 3 | NEXT_PUBLIC_ASSISTANT_ID=agent
 4 | # Do NOT prefix this with "NEXT_PUBLIC_" as we do not want this exposed in the client.
 5 | LANGSMITH_API_KEY=
 6 | 
 7 | # Production LangGraph Configuration (quickstart) - Uncomment to use
 8 | # NEXT_PUBLIC_ASSISTANT_ID="agent"
 9 | # This should be the deployment URL of your LangGraph server
10 | # LANGGRAPH_API_URL="https://my-agent.default.us.langgraph.app"
11 | # This should be the URL of your website + "/api". This is how you connect to the API proxy
12 | # NEXT_PUBLIC_API_URL="https://my-website.com/api"
13 | # LANGSMITH_API_KEY="lsv2_..."
14 | 


--------------------------------------------------------------------------------
/templates/nextjs/.gitignore:
--------------------------------------------------------------------------------
 1 | # Logs
 2 | logs
 3 | *.log
 4 | npm-debug.log*
 5 | yarn-debug.log*
 6 | yarn-error.log*
 7 | pnpm-debug.log*
 8 | lerna-debug.log*
 9 | 
10 | node_modules
11 | dist
12 | dist-ssr
13 | *.local
14 | 
15 | # Editor directories and files
16 | .vscode/*
17 | !.vscode/extensions.json
18 | .idea
19 | .DS_Store
20 | *.suo
21 | *.ntvs*
22 | *.njsproj
23 | *.sln
24 | *.sw?
25 | 
26 | # LangGraph API
27 | .langgraph_api
28 | .env
29 | .next/
30 | next-env.d.ts


--------------------------------------------------------------------------------
/templates/nextjs/.prettierrc:
--------------------------------------------------------------------------------
1 | {
2 |   "tabWidth": 2,
3 |   "useTabs": false
4 | }
5 | 


--------------------------------------------------------------------------------
/templates/nextjs/components.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "$schema": "https://ui.shadcn.com/schema.json",
 3 |   "style": "new-york",
 4 |   "rsc": false,
 5 |   "tsx": true,
 6 |   "tailwind": {
 7 |     "config": "tailwind.config.js",
 8 |     "css": "src/index.css",
 9 |     "baseColor": "neutral",
10 |     "cssVariables": true,
11 |     "prefix": ""
12 |   },
13 |   "aliases": {
14 |     "components": "@/components",
15 |     "utils": "@/lib/utils",
16 |     "ui": "@/components/ui",
17 |     "lib": "@/lib",
18 |     "hooks": "@/hooks"
19 |   },
20 |   "iconLibrary": "lucide"
21 | }
22 | 


--------------------------------------------------------------------------------
/templates/nextjs/eslint.config.js:
--------------------------------------------------------------------------------
 1 | import js from "@eslint/js";
 2 | import globals from "globals";
 3 | import reactHooks from "eslint-plugin-react-hooks";
 4 | import reactRefresh from "eslint-plugin-react-refresh";
 5 | import tseslint from "typescript-eslint";
 6 | 
 7 | export default tseslint.config(
 8 |   { ignores: ["dist"] },
 9 |   {
10 |     extends: [js.configs.recommended, ...tseslint.configs.recommended],
11 |     files: ["**/*.{ts,tsx}"],
12 |     languageOptions: {
13 |       ecmaVersion: 2020,
14 |       globals: globals.browser,
15 |     },
16 |     plugins: {
17 |       "react-hooks": reactHooks,
18 |       "react-refresh": reactRefresh,
19 |     },
20 |     rules: {
21 |       ...reactHooks.configs.recommended.rules,
22 |       "@typescript-eslint/no-explicit-any": 0,
23 |       "@typescript-eslint/no-unused-vars": [
24 |         "warn",
25 |         { args: "none", argsIgnorePattern: "^_", varsIgnorePattern: "^_" },
26 |       ],
27 |       "react-refresh/only-export-components": [
28 |         "warn",
29 |         { allowConstantExport: true },
30 |       ],
31 |     },
32 |   },
33 | );
34 | 


--------------------------------------------------------------------------------
/templates/nextjs/next.config.mjs:
--------------------------------------------------------------------------------
1 | /** @type {import('next').NextConfig} */
2 | const nextConfig = {};
3 | 
4 | export default nextConfig;
5 | 


--------------------------------------------------------------------------------
/templates/nextjs/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "web",
 3 |   "private": true,
 4 |   "version": "0.0.0",
 5 |   "type": "module",
 6 |   "scripts": {
 7 |     "dev": "next dev",
 8 |     "build": "turbo build:internal --filter=web",
 9 |     "build:internal": "next build",
10 |     "start": "next start",
11 |     "lint": "next lint",
12 |     "lint:fix": "next lint --fix",
13 |     "format": "prettier --write .",
14 |     "format:check": "prettier --check ."
15 |   },
16 |   "dependencies": {
17 |     "@langchain/core": "^0.3.42",
18 |     "@langchain/langgraph": "^0.2.55",
19 |     "@langchain/langgraph-api": "^0.0.16",
20 |     "@langchain/langgraph-cli": "^0.0.16",
21 |     "@langchain/langgraph-sdk": "^0.0.57",
22 |     "@radix-ui/react-avatar": "^1.1.3",
23 |     "@radix-ui/react-dialog": "^1.1.6",
24 |     "@radix-ui/react-label": "^2.1.2",
25 |     "@radix-ui/react-separator": "^1.1.2",
26 |     "@radix-ui/react-slot": "^1.1.2",
27 |     "@radix-ui/react-switch": "^1.1.3",
28 |     "@radix-ui/react-tooltip": "^1.1.8",
29 |     "class-variance-authority": "^0.7.1",
30 |     "clsx": "^2.1.1",
31 |     "date-fns": "^4.1.0",
32 |     "esbuild": "^0.25.0",
33 |     "esbuild-plugin-tailwindcss": "^2.0.1",
34 |     "framer-motion": "^12.4.9",
35 |     "katex": "^0.16.21",
36 |     "langgraph-nextjs-api-passthrough": "^0.0.4",
37 |     "lodash": "^4.17.21",
38 |     "lucide-react": "^0.476.0",
39 |     "next-themes": "^0.4.4",
40 |     "prettier": "^3.5.2",
41 |     "react": "^19.0.0",
42 |     "react-dom": "^19.0.0",
43 |     "react-markdown": "^10.0.1",
44 |     "nuqs": "^2.4.1",
45 |     "react-syntax-highlighter": "^15.5.0",
46 |     "recharts": "^2.15.1",
47 |     "rehype-katex": "^7.0.1",
48 |     "remark-gfm": "^4.0.1",
49 |     "remark-math": "^6.0.0",
50 |     "sonner": "^2.0.1",
51 |     "tailwind-merge": "^3.0.2",
52 |     "tailwindcss-animate": "^1.0.7",
53 |     "use-stick-to-bottom": "^1.0.46",
54 |     "uuid": "^11.0.5",
55 |     "zod": "^3.24.2"
56 |   },
57 |   "devDependencies": {
58 |     "@eslint/js": "^9.19.0",
59 |     "@tailwindcss/postcss": "^4.0.13",
60 |     "@types/lodash": "^4.17.16",
61 |     "@types/node": "^22.13.5",
62 |     "@types/react": "^19.0.8",
63 |     "@types/react-dom": "^19.0.3",
64 |     "@types/react-syntax-highlighter": "^15.5.13",
65 |     "autoprefixer": "^10.4.20",
66 |     "dotenv": "^16.4.7",
67 |     "turbo": "latest",
68 |     "eslint": "^9.19.0",
69 |     "eslint-config-next": "15.2.2",
70 |     "eslint-plugin-react-hooks": "^5.0.0",
71 |     "eslint-plugin-react-refresh": "^0.4.18",
72 |     "globals": "^15.14.0",
73 |     "next": "^15.2.3",
74 |     "postcss": "^8.5.3",
75 |     "tailwind-scrollbar": "^4.0.1",
76 |     "tailwindcss": "^4.0.13",
77 |     "typescript": "~5.7.2",
78 |     "typescript-eslint": "^8.22.0"
79 |   },
80 |   "overrides": {
81 |     "react-is": "^19.0.0-rc-69d4b800-20241021"
82 |   }
83 | }
84 | 


--------------------------------------------------------------------------------
/templates/nextjs/postcss.config.mjs:
--------------------------------------------------------------------------------
1 | export default {
2 |   plugins: {
3 |     "@tailwindcss/postcss": {},
4 |   },
5 | };
6 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/app/api/[..._path]/route.ts:
--------------------------------------------------------------------------------
 1 | import { initApiPassthrough } from "langgraph-nextjs-api-passthrough";
 2 | 
 3 | // This file acts as a proxy for requests to your LangGraph server.
 4 | // Read the [Going to Production](https://github.com/langchain-ai/agent-chat-ui?tab=readme-ov-file#going-to-production) section for more information.
 5 | 
 6 | export const { GET, POST, PUT, PATCH, DELETE, OPTIONS, runtime } =
 7 |   initApiPassthrough({
 8 |     apiUrl: process.env.LANGGRAPH_API_URL ?? "remove-me", // default, if not defined it will attempt to read process.env.LANGGRAPH_API_URL
 9 |     apiKey: process.env.LANGSMITH_API_KEY ?? "remove-me", // default, if not defined it will attempt to read process.env.LANGSMITH_API_KEY
10 |     runtime: "edge", // default
11 |   });
12 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/app/favicon.ico:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/nextjs/src/app/favicon.ico


--------------------------------------------------------------------------------
/templates/nextjs/src/app/layout.tsx:
--------------------------------------------------------------------------------
 1 | import type { Metadata } from "next";
 2 | import "./globals.css";
 3 | import { Inter } from "next/font/google";
 4 | import React from "react";
 5 | import { NuqsAdapter } from "nuqs/adapters/next/app";
 6 | 
 7 | const inter = Inter({
 8 |   subsets: ["latin"],
 9 |   preload: true,
10 |   display: "swap",
11 | });
12 | 
13 | export const metadata: Metadata = {
14 |   title: "Agent Inbox",
15 |   description: "Agent Inbox UX by LangChain",
16 | };
17 | 
18 | export default function RootLayout({
19 |   children,
20 | }: Readonly<{
21 |   children: React.ReactNode;
22 | }>) {
23 |   return (
24 |     <html lang="en">
25 |       <body className={inter.className}>
26 |         <NuqsAdapter>{children}</NuqsAdapter>
27 |       </body>
28 |     </html>
29 |   );
30 | }
31 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/app/page.tsx:
--------------------------------------------------------------------------------
 1 | "use client";
 2 | 
 3 | import { Thread } from "@/components/thread";
 4 | import { StreamProvider } from "@/providers/Stream";
 5 | import { ThreadProvider } from "@/providers/Thread";
 6 | import { Toaster } from "@/components/ui/sonner";
 7 | import React from "react";
 8 | 
 9 | export default function DemoPage(): React.ReactNode {
10 |   return (
11 |     <React.Suspense fallback={<div>Loading (layout)...</div>}>
12 |       <Toaster />
13 |       <ThreadProvider>
14 |         <StreamProvider>
15 |           <Thread />
16 |         </StreamProvider>
17 |       </ThreadProvider>
18 |     </React.Suspense>
19 |   );
20 | }
21 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/icons/github.tsx:
--------------------------------------------------------------------------------
 1 | export const GitHubSVG = ({ width = "100%", height = "100%" }) => (
 2 |   <svg
 3 |     role="img"
 4 |     viewBox="0 0 24 24"
 5 |     width={width}
 6 |     height={height}
 7 |     xmlns="http://www.w3.org/2000/svg"
 8 |   >
 9 |     <title>GitHub</title>
10 |     <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
11 |   </svg>
12 | );
13 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/agent-inbox/components/thread-id.tsx:
--------------------------------------------------------------------------------
 1 | import { Copy, CopyCheck } from "lucide-react";
 2 | import {
 3 |   Tooltip,
 4 |   TooltipContent,
 5 |   TooltipProvider,
 6 |   TooltipTrigger,
 7 | } from "@/components/ui/tooltip";
 8 | import React from "react";
 9 | import { motion, AnimatePresence } from "framer-motion";
10 | import { TooltipIconButton } from "../../tooltip-icon-button";
11 | 
12 | export function ThreadIdTooltip({ threadId }: { threadId: string }) {
13 |   const firstThreeChars = threadId.slice(0, 3);
14 |   const lastThreeChars = threadId.slice(-3);
15 | 
16 |   return (
17 |     <TooltipProvider>
18 |       <Tooltip>
19 |         <TooltipTrigger>
20 |           <p className="font-mono tracking-tighter text-[10px] leading-[12px] px-1 py-[2px] bg-gray-100 rounded-md">
21 |             {firstThreeChars}...{lastThreeChars}
22 |           </p>
23 |         </TooltipTrigger>
24 |         <TooltipContent>
25 |           <ThreadIdCopyable threadId={threadId} />
26 |         </TooltipContent>
27 |       </Tooltip>
28 |     </TooltipProvider>
29 |   );
30 | }
31 | 
32 | export function ThreadIdCopyable({
33 |   threadId,
34 |   showUUID = false,
35 | }: {
36 |   threadId: string;
37 |   showUUID?: boolean;
38 | }) {
39 |   const [copied, setCopied] = React.useState(false);
40 | 
41 |   const handleCopy = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
42 |     e.stopPropagation();
43 |     navigator.clipboard.writeText(threadId);
44 |     setCopied(true);
45 |     setTimeout(() => setCopied(false), 2000);
46 |   };
47 | 
48 |   return (
49 |     <TooltipIconButton
50 |       onClick={(e) => handleCopy(e)}
51 |       variant="ghost"
52 |       tooltip="Copy thread ID"
53 |       className="flex flex-grow-0 gap-1 items-center p-1 rounded-md border-[1px] cursor-pointer hover:bg-gray-50/90 border-gray-200 w-fit"
54 |     >
55 |       <p className="font-mono text-xs">{showUUID ? threadId : "ID"}</p>
56 |       <AnimatePresence mode="wait" initial={false}>
57 |         {copied ? (
58 |           <motion.div
59 |             key="check"
60 |             initial={{ opacity: 0, scale: 0.8 }}
61 |             animate={{ opacity: 1, scale: 1 }}
62 |             exit={{ opacity: 0, scale: 0.8 }}
63 |             transition={{ duration: 0.15 }}
64 |           >
65 |             <CopyCheck className="text-green-500 max-w-3 w-3 max-h-3 h-3" />
66 |           </motion.div>
67 |         ) : (
68 |           <motion.div
69 |             key="copy"
70 |             initial={{ opacity: 0, scale: 0.8 }}
71 |             animate={{ opacity: 1, scale: 1 }}
72 |             exit={{ opacity: 0, scale: 0.8 }}
73 |             transition={{ duration: 0.15 }}
74 |           >
75 |             <Copy className="text-gray-500 max-w-3 w-3 max-h-3 h-3" />
76 |           </motion.div>
77 |         )}
78 |       </AnimatePresence>
79 |     </TooltipIconButton>
80 |   );
81 | }
82 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/agent-inbox/components/tool-call-table.tsx:
--------------------------------------------------------------------------------
 1 | import { ToolCall } from "@langchain/core/messages/tool";
 2 | import { unknownToPrettyDate } from "../utils";
 3 | 
 4 | export function ToolCallTable({ toolCall }: { toolCall: ToolCall }) {
 5 |   return (
 6 |     <div className="min-w-[300px] max-w-full border rounded-lg overflow-hidden">
 7 |       <table className="w-full border-collapse">
 8 |         <thead>
 9 |           <tr>
10 |             <th className="text-left px-2 py-0 bg-gray-100 text-sm" colSpan={2}>
11 |               {toolCall.name}
12 |             </th>
13 |           </tr>
14 |         </thead>
15 |         <tbody>
16 |           {Object.entries(toolCall.args).map(([key, value]) => {
17 |             let valueStr = "";
18 |             if (["string", "number"].includes(typeof value)) {
19 |               valueStr = value.toString();
20 |             }
21 | 
22 |             const date = unknownToPrettyDate(value);
23 |             if (date) {
24 |               valueStr = date;
25 |             }
26 | 
27 |             try {
28 |               valueStr = valueStr || JSON.stringify(value, null);
29 |             } catch (_) {
30 |               // failed to stringify, just assign an empty string
31 |               valueStr = "";
32 |             }
33 | 
34 |             return (
35 |               <tr key={key} className="border-t">
36 |                 <td className="px-2 py-1 font-medium w-1/3 text-xs">{key}</td>
37 |                 <td className="px-2 py-1 font-mono text-xs">{valueStr}</td>
38 |               </tr>
39 |             );
40 |           })}
41 |         </tbody>
42 |       </table>
43 |     </div>
44 |   );
45 | }
46 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/agent-inbox/index.tsx:
--------------------------------------------------------------------------------
 1 | import { StateView } from "./components/state-view";
 2 | import { ThreadActionsView } from "./components/thread-actions-view";
 3 | import { useState } from "react";
 4 | import { HumanInterrupt } from "@langchain/langgraph/prebuilt";
 5 | import { useStreamContext } from "@/providers/Stream";
 6 | 
 7 | interface ThreadViewProps {
 8 |   interrupt: HumanInterrupt | HumanInterrupt[];
 9 | }
10 | 
11 | export function ThreadView({ interrupt }: ThreadViewProps) {
12 |   const interruptObj = Array.isArray(interrupt) ? interrupt[0] : interrupt;
13 |   const thread = useStreamContext();
14 |   const [showDescription, setShowDescription] = useState(false);
15 |   const [showState, setShowState] = useState(false);
16 |   const showSidePanel = showDescription || showState;
17 | 
18 |   const handleShowSidePanel = (
19 |     showState: boolean,
20 |     showDescription: boolean,
21 |   ) => {
22 |     if (showState && showDescription) {
23 |       console.error("Cannot show both state and description");
24 |       return;
25 |     }
26 |     if (showState) {
27 |       setShowDescription(false);
28 |       setShowState(true);
29 |     } else if (showDescription) {
30 |       setShowState(false);
31 |       setShowDescription(true);
32 |     } else {
33 |       setShowState(false);
34 |       setShowDescription(false);
35 |     }
36 |   };
37 | 
38 |   return (
39 |     <div className="flex flex-col lg:flex-row w-full h-[80vh] p-8 bg-gray-50/50 rounded-2xl overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent">
40 |       {showSidePanel ? (
41 |         <StateView
42 |           handleShowSidePanel={handleShowSidePanel}
43 |           description={interruptObj.description}
44 |           values={thread.values}
45 |           view={showState ? "state" : "description"}
46 |         />
47 |       ) : (
48 |         <ThreadActionsView
49 |           interrupt={interruptObj}
50 |           handleShowSidePanel={handleShowSidePanel}
51 |           showState={showState}
52 |           showDescription={showDescription}
53 |         />
54 |       )}
55 |     </div>
56 |   );
57 | }
58 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/agent-inbox/types.ts:
--------------------------------------------------------------------------------
 1 | import { BaseMessage } from "@langchain/core/messages";
 2 | import { Thread, ThreadStatus } from "@langchain/langgraph-sdk";
 3 | import { HumanInterrupt, HumanResponse } from "@langchain/langgraph/prebuilt";
 4 | 
 5 | export type HumanResponseWithEdits = HumanResponse &
 6 |   (
 7 |     | { acceptAllowed?: false; editsMade?: never }
 8 |     | { acceptAllowed?: true; editsMade?: boolean }
 9 |   );
10 | 
11 | export type Email = {
12 |   id: string;
13 |   thread_id: string;
14 |   from_email: string;
15 |   to_email: string;
16 |   subject: string;
17 |   page_content: string;
18 |   send_time: string | undefined;
19 |   read?: boolean;
20 |   status?: "in-queue" | "processing" | "hitl" | "done";
21 | };
22 | 
23 | export interface ThreadValues {
24 |   email: Email;
25 |   messages: BaseMessage[];
26 |   triage: {
27 |     logic: string;
28 |     response: string;
29 |   };
30 | }
31 | 
32 | export type ThreadData<
33 |   ThreadValues extends Record<string, any> = Record<string, any>,
34 | > = {
35 |   thread: Thread<ThreadValues>;
36 | } & (
37 |   | {
38 |       status: "interrupted";
39 |       interrupts: HumanInterrupt[] | undefined;
40 |     }
41 |   | {
42 |       status: "idle" | "busy" | "error";
43 |       interrupts?: never;
44 |     }
45 | );
46 | 
47 | export type ThreadStatusWithAll = ThreadStatus | "all";
48 | 
49 | export type SubmitType = "accept" | "response" | "edit";
50 | 
51 | export interface AgentInbox {
52 |   /**
53 |    * A unique identifier for the inbox.
54 |    */
55 |   id: string;
56 |   /**
57 |    * The ID of the graph.
58 |    */
59 |   graphId: string;
60 |   /**
61 |    * The URL of the deployment. Either a localhost URL, or a deployment URL.
62 |    */
63 |   deploymentUrl: string;
64 |   /**
65 |    * Optional name for the inbox, used in the UI to label the inbox.
66 |    */
67 |   name?: string;
68 |   /**
69 |    * Whether or not the inbox is selected.
70 |    */
71 |   selected: boolean;
72 | }
73 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/history/index.tsx:
--------------------------------------------------------------------------------
  1 | import { Button } from "@/components/ui/button";
  2 | import { useThreads } from "@/providers/Thread";
  3 | import { Thread } from "@langchain/langgraph-sdk";
  4 | import { useEffect } from "react";
  5 | 
  6 | import { getContentString } from "../utils";
  7 | import { useQueryState, parseAsBoolean } from "nuqs";
  8 | import {
  9 |   Sheet,
 10 |   SheetContent,
 11 |   SheetHeader,
 12 |   SheetTitle,
 13 | } from "@/components/ui/sheet";
 14 | import { Skeleton } from "@/components/ui/skeleton";
 15 | import { PanelRightOpen, PanelRightClose } from "lucide-react";
 16 | import { useMediaQuery } from "@/hooks/useMediaQuery";
 17 | 
 18 | function ThreadList({
 19 |   threads,
 20 |   onThreadClick,
 21 | }: {
 22 |   threads: Thread[];
 23 |   onThreadClick?: (threadId: string) => void;
 24 | }) {
 25 |   const [threadId, setThreadId] = useQueryState("threadId");
 26 | 
 27 |   return (
 28 |     <div className="h-full flex flex-col w-full gap-2 items-start justify-start overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent">
 29 |       {threads.map((t) => {
 30 |         let itemText = t.thread_id;
 31 |         if (
 32 |           typeof t.values === "object" &&
 33 |           t.values &&
 34 |           "messages" in t.values &&
 35 |           Array.isArray(t.values.messages) &&
 36 |           t.values.messages?.length > 0
 37 |         ) {
 38 |           const firstMessage = t.values.messages[0];
 39 |           itemText = getContentString(firstMessage.content);
 40 |         }
 41 |         return (
 42 |           <div key={t.thread_id} className="w-full px-1">
 43 |             <Button
 44 |               variant="ghost"
 45 |               className="text-left items-start justify-start font-normal w-[280px]"
 46 |               onClick={(e) => {
 47 |                 e.preventDefault();
 48 |                 onThreadClick?.(t.thread_id);
 49 |                 if (t.thread_id === threadId) return;
 50 |                 setThreadId(t.thread_id);
 51 |               }}
 52 |             >
 53 |               <p className="truncate text-ellipsis">{itemText}</p>
 54 |             </Button>
 55 |           </div>
 56 |         );
 57 |       })}
 58 |     </div>
 59 |   );
 60 | }
 61 | 
 62 | function ThreadHistoryLoading() {
 63 |   return (
 64 |     <div className="h-full flex flex-col w-full gap-2 items-start justify-start overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent">
 65 |       {Array.from({ length: 30 }).map((_, i) => (
 66 |         <Skeleton key={`skeleton-${i}`} className="w-[280px] h-10" />
 67 |       ))}
 68 |     </div>
 69 |   );
 70 | }
 71 | 
 72 | export default function ThreadHistory() {
 73 |   const isLargeScreen = useMediaQuery("(min-width: 1024px)");
 74 |   const [chatHistoryOpen, setChatHistoryOpen] = useQueryState(
 75 |     "chatHistoryOpen",
 76 |     parseAsBoolean.withDefault(false),
 77 |   );
 78 | 
 79 |   const { getThreads, threads, setThreads, threadsLoading, setThreadsLoading } =
 80 |     useThreads();
 81 | 
 82 |   useEffect(() => {
 83 |     if (typeof window === "undefined") return;
 84 |     setThreadsLoading(true);
 85 |     getThreads()
 86 |       .then(setThreads)
 87 |       .catch(console.error)
 88 |       .finally(() => setThreadsLoading(false));
 89 |   }, []);
 90 | 
 91 |   return (
 92 |     <>
 93 |       <div className="hidden lg:flex flex-col border-r-[1px] border-slate-300 items-start justify-start gap-6 h-screen w-[300px] shrink-0 shadow-inner-right">
 94 |         <div className="flex items-center justify-between w-full pt-1.5 px-4">
 95 |           <Button
 96 |             className="hover:bg-gray-100"
 97 |             variant="ghost"
 98 |             onClick={() => setChatHistoryOpen((p) => !p)}
 99 |           >
100 |             {chatHistoryOpen ? (
101 |               <PanelRightOpen className="size-5" />
102 |             ) : (
103 |               <PanelRightClose className="size-5" />
104 |             )}
105 |           </Button>
106 |           <h1 className="text-xl font-semibold tracking-tight">
107 |             Thread History
108 |           </h1>
109 |         </div>
110 |         {threadsLoading ? (
111 |           <ThreadHistoryLoading />
112 |         ) : (
113 |           <ThreadList threads={threads} />
114 |         )}
115 |       </div>
116 |       <div className="lg:hidden">
117 |         <Sheet
118 |           open={!!chatHistoryOpen && !isLargeScreen}
119 |           onOpenChange={(open) => {
120 |             if (isLargeScreen) return;
121 |             setChatHistoryOpen(open);
122 |           }}
123 |         >
124 |           <SheetContent side="left" className="lg:hidden flex">
125 |             <SheetHeader>
126 |               <SheetTitle>Thread History</SheetTitle>
127 |             </SheetHeader>
128 |             <ThreadList
129 |               threads={threads}
130 |               onThreadClick={() => setChatHistoryOpen((o) => !o)}
131 |             />
132 |           </SheetContent>
133 |         </Sheet>
134 |       </div>
135 |     </>
136 |   );
137 | }
138 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/markdown-styles.css:
--------------------------------------------------------------------------------
 1 | /* Base markdown styles */
 2 | .markdown-content code:not(pre code) {
 3 |   background-color: rgba(0, 0, 0, 0.05);
 4 |   padding: 0.2em 0.4em;
 5 |   border-radius: 3px;
 6 |   font-size: 0.9em;
 7 | }
 8 | 
 9 | .markdown-content a {
10 |   color: #0070f3;
11 |   text-decoration: none;
12 | }
13 | 
14 | .markdown-content a:hover {
15 |   text-decoration: underline;
16 | }
17 | 
18 | .markdown-content blockquote {
19 |   border-left: 4px solid #ddd;
20 |   padding-left: 1rem;
21 |   color: #666;
22 | }
23 | 
24 | .markdown-content pre {
25 |   overflow-x: auto;
26 | }
27 | 
28 | .markdown-content table {
29 |   border-collapse: collapse;
30 |   width: 100%;
31 | }
32 | 
33 | .markdown-content th,
34 | .markdown-content td {
35 |   border: 1px solid #ddd;
36 |   padding: 8px;
37 | }
38 | 
39 | .markdown-content th {
40 |   background-color: #f2f2f2;
41 | }
42 | 
43 | .markdown-content tr:nth-child(even) {
44 |   background-color: #f9f9f9;
45 | }
46 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/messages/human.tsx:
--------------------------------------------------------------------------------
  1 | import { useStreamContext } from "@/providers/Stream";
  2 | import { Message } from "@langchain/langgraph-sdk";
  3 | import { useState } from "react";
  4 | import { getContentString } from "../utils";
  5 | import { cn } from "@/lib/utils";
  6 | import { Textarea } from "@/components/ui/textarea";
  7 | import { BranchSwitcher, CommandBar } from "./shared";
  8 | 
  9 | function EditableContent({
 10 |   value,
 11 |   setValue,
 12 |   onSubmit,
 13 | }: {
 14 |   value: string;
 15 |   setValue: React.Dispatch<React.SetStateAction<string>>;
 16 |   onSubmit: () => void;
 17 | }) {
 18 |   const handleKeyDown = (e: React.KeyboardEvent) => {
 19 |     if ((e.metaKey || e.ctrlKey) && e.key === "Enter") {
 20 |       e.preventDefault();
 21 |       onSubmit();
 22 |     }
 23 |   };
 24 | 
 25 |   return (
 26 |     <Textarea
 27 |       value={value}
 28 |       onChange={(e) => setValue(e.target.value)}
 29 |       onKeyDown={handleKeyDown}
 30 |       className="focus-visible:ring-0"
 31 |     />
 32 |   );
 33 | }
 34 | 
 35 | export function HumanMessage({
 36 |   message,
 37 |   isLoading,
 38 | }: {
 39 |   message: Message;
 40 |   isLoading: boolean;
 41 | }) {
 42 |   const thread = useStreamContext();
 43 |   const meta = thread.getMessagesMetadata(message);
 44 |   const parentCheckpoint = meta?.firstSeenState?.parent_checkpoint;
 45 | 
 46 |   const [isEditing, setIsEditing] = useState(false);
 47 |   const [value, setValue] = useState("");
 48 |   const contentString = getContentString(message.content);
 49 | 
 50 |   const handleSubmitEdit = () => {
 51 |     setIsEditing(false);
 52 | 
 53 |     const newMessage: Message = { type: "human", content: value };
 54 |     thread.submit(
 55 |       { messages: [newMessage] },
 56 |       {
 57 |         checkpoint: parentCheckpoint,
 58 |         streamMode: ["values"],
 59 |         optimisticValues: (prev) => {
 60 |           const values = meta?.firstSeenState?.values;
 61 |           if (!values) return prev;
 62 | 
 63 |           return {
 64 |             ...values,
 65 |             messages: [...(values.messages ?? []), newMessage],
 66 |           };
 67 |         },
 68 |       },
 69 |     );
 70 |   };
 71 | 
 72 |   return (
 73 |     <div
 74 |       className={cn(
 75 |         "flex items-center ml-auto gap-2 group",
 76 |         isEditing && "w-full max-w-xl",
 77 |       )}
 78 |     >
 79 |       <div className={cn("flex flex-col gap-2", isEditing && "w-full")}>
 80 |         {isEditing ? (
 81 |           <EditableContent
 82 |             value={value}
 83 |             setValue={setValue}
 84 |             onSubmit={handleSubmitEdit}
 85 |           />
 86 |         ) : (
 87 |           <p className="px-4 py-2 rounded-3xl bg-muted w-fit ml-auto whitespace-pre-wrap">
 88 |             {contentString}
 89 |           </p>
 90 |         )}
 91 | 
 92 |         <div
 93 |           className={cn(
 94 |             "flex gap-2 items-center ml-auto transition-opacity",
 95 |             "opacity-0 group-focus-within:opacity-100 group-hover:opacity-100",
 96 |             isEditing && "opacity-100",
 97 |           )}
 98 |         >
 99 |           <BranchSwitcher
100 |             branch={meta?.branch}
101 |             branchOptions={meta?.branchOptions}
102 |             onSelect={(branch) => thread.setBranch(branch)}
103 |             isLoading={isLoading}
104 |           />
105 |           <CommandBar
106 |             isLoading={isLoading}
107 |             content={contentString}
108 |             isEditing={isEditing}
109 |             setIsEditing={(c) => {
110 |               if (c) {
111 |                 setValue(contentString);
112 |               }
113 |               setIsEditing(c);
114 |             }}
115 |             handleSubmitEdit={handleSubmitEdit}
116 |             isHumanMessage={true}
117 |           />
118 |         </div>
119 |       </div>
120 |     </div>
121 |   );
122 | }
123 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/syntax-highlighter.tsx:
--------------------------------------------------------------------------------
 1 | import { PrismAsyncLight as SyntaxHighlighterPrism } from "react-syntax-highlighter";
 2 | import tsx from "react-syntax-highlighter/dist/esm/languages/prism/tsx";
 3 | import python from "react-syntax-highlighter/dist/esm/languages/prism/python";
 4 | import { coldarkDark } from "react-syntax-highlighter/dist/cjs/styles/prism";
 5 | import { FC } from "react";
 6 | 
 7 | // Register languages you want to support
 8 | SyntaxHighlighterPrism.registerLanguage("js", tsx);
 9 | SyntaxHighlighterPrism.registerLanguage("jsx", tsx);
10 | SyntaxHighlighterPrism.registerLanguage("ts", tsx);
11 | SyntaxHighlighterPrism.registerLanguage("tsx", tsx);
12 | SyntaxHighlighterPrism.registerLanguage("python", python);
13 | 
14 | interface SyntaxHighlighterProps {
15 |   children: string;
16 |   language: string;
17 |   className?: string;
18 | }
19 | 
20 | export const SyntaxHighlighter: FC<SyntaxHighlighterProps> = ({
21 |   children,
22 |   language,
23 |   className,
24 | }) => {
25 |   return (
26 |     <SyntaxHighlighterPrism
27 |       language={language}
28 |       style={coldarkDark}
29 |       customStyle={{
30 |         margin: 0,
31 |         width: "100%",
32 |         background: "transparent",
33 |         padding: "1.5rem 1rem",
34 |       }}
35 |       className={className}
36 |     >
37 |       {children}
38 |     </SyntaxHighlighterPrism>
39 |   );
40 | };
41 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/tooltip-icon-button.tsx:
--------------------------------------------------------------------------------
 1 | "use client";
 2 | 
 3 | import { forwardRef } from "react";
 4 | 
 5 | import {
 6 |   Tooltip,
 7 |   TooltipContent,
 8 |   TooltipProvider,
 9 |   TooltipTrigger,
10 | } from "@/components/ui/tooltip";
11 | import { Button, ButtonProps } from "@/components/ui/button";
12 | import { cn } from "@/lib/utils";
13 | 
14 | export type TooltipIconButtonProps = ButtonProps & {
15 |   tooltip: string;
16 |   side?: "top" | "bottom" | "left" | "right";
17 | };
18 | 
19 | export const TooltipIconButton = forwardRef<
20 |   HTMLButtonElement,
21 |   TooltipIconButtonProps
22 | >(({ children, tooltip, side = "bottom", className, ...rest }, ref) => {
23 |   return (
24 |     <TooltipProvider>
25 |       <Tooltip>
26 |         <TooltipTrigger asChild>
27 |           <Button
28 |             variant="ghost"
29 |             size="icon"
30 |             {...rest}
31 |             className={cn("size-6 p-1", className)}
32 |             ref={ref}
33 |           >
34 |             {children}
35 |             <span className="sr-only">{tooltip}</span>
36 |           </Button>
37 |         </TooltipTrigger>
38 |         <TooltipContent side={side}>{tooltip}</TooltipContent>
39 |       </Tooltip>
40 |     </TooltipProvider>
41 |   );
42 | });
43 | 
44 | TooltipIconButton.displayName = "TooltipIconButton";
45 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/thread/utils.ts:
--------------------------------------------------------------------------------
 1 | import type { Message } from "@langchain/langgraph-sdk";
 2 | 
 3 | export function getContentString(content: Message["content"]): string {
 4 |   if (typeof content === "string") return content;
 5 |   const texts = content
 6 |     .filter((c): c is { type: "text"; text: string } => c.type === "text")
 7 |     .map((c) => c.text);
 8 |   return texts.join(" ");
 9 | }
10 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/avatar.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as AvatarPrimitive from "@radix-ui/react-avatar";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Avatar({
 7 |   className,
 8 |   ...props
 9 | }: React.ComponentProps<typeof AvatarPrimitive.Root>) {
10 |   return (
11 |     <AvatarPrimitive.Root
12 |       data-slot="avatar"
13 |       className={cn(
14 |         "relative flex size-8 shrink-0 overflow-hidden rounded-full",
15 |         className,
16 |       )}
17 |       {...props}
18 |     />
19 |   );
20 | }
21 | 
22 | function AvatarImage({
23 |   className,
24 |   ...props
25 | }: React.ComponentProps<typeof AvatarPrimitive.Image>) {
26 |   return (
27 |     <AvatarPrimitive.Image
28 |       data-slot="avatar-image"
29 |       className={cn("aspect-square size-full", className)}
30 |       {...props}
31 |     />
32 |   );
33 | }
34 | 
35 | function AvatarFallback({
36 |   className,
37 |   ...props
38 | }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
39 |   return (
40 |     <AvatarPrimitive.Fallback
41 |       data-slot="avatar-fallback"
42 |       className={cn(
43 |         "bg-muted flex size-full items-center justify-center rounded-full",
44 |         className,
45 |       )}
46 |       {...props}
47 |     />
48 |   );
49 | }
50 | 
51 | export { Avatar, AvatarImage, AvatarFallback };
52 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/button.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import { Slot } from "@radix-ui/react-slot";
 3 | import { cva, type VariantProps } from "class-variance-authority";
 4 | 
 5 | import { cn } from "@/lib/utils";
 6 | 
 7 | const buttonVariants = cva(
 8 |   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
 9 |   {
10 |     variants: {
11 |       variant: {
12 |         default:
13 |           "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
14 |         destructive:
15 |           "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
16 |         outline:
17 |           "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
18 |         secondary:
19 |           "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
20 |         ghost: "hover:bg-accent hover:text-accent-foreground",
21 |         link: "text-primary underline-offset-4 hover:underline",
22 |         brand: "bg-[#2F6868] hover:bg-[#2F6868]/90 border-[#2F6868] text-white",
23 |       },
24 |       size: {
25 |         default: "h-9 px-4 py-2 has-[>svg]:px-3",
26 |         sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
27 |         lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
28 |         icon: "size-9",
29 |       },
30 |     },
31 |     defaultVariants: {
32 |       variant: "default",
33 |       size: "default",
34 |     },
35 |   },
36 | );
37 | 
38 | type ButtonProps = React.ComponentProps<"button"> &
39 |   VariantProps<typeof buttonVariants> & {
40 |     asChild?: boolean;
41 |   };
42 | 
43 | function Button({
44 |   className,
45 |   variant,
46 |   size,
47 |   asChild = false,
48 |   ...props
49 | }: ButtonProps) {
50 |   const Comp = asChild ? Slot : "button";
51 | 
52 |   return (
53 |     <Comp
54 |       data-slot="button"
55 |       className={cn(buttonVariants({ variant, size, className }))}
56 |       {...props}
57 |     />
58 |   );
59 | }
60 | 
61 | export { Button, buttonVariants, type ButtonProps };
62 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/card.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | 
 3 | import { cn } from "@/lib/utils";
 4 | 
 5 | function Card({ className, ...props }: React.ComponentProps<"div">) {
 6 |   return (
 7 |     <div
 8 |       data-slot="card"
 9 |       className={cn(
10 |         "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
11 |         className,
12 |       )}
13 |       {...props}
14 |     />
15 |   );
16 | }
17 | 
18 | function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
19 |   return (
20 |     <div
21 |       data-slot="card-header"
22 |       className={cn("flex flex-col gap-1.5 px-6", className)}
23 |       {...props}
24 |     />
25 |   );
26 | }
27 | 
28 | function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
29 |   return (
30 |     <div
31 |       data-slot="card-title"
32 |       className={cn("leading-none font-semibold", className)}
33 |       {...props}
34 |     />
35 |   );
36 | }
37 | 
38 | function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
39 |   return (
40 |     <div
41 |       data-slot="card-description"
42 |       className={cn("text-muted-foreground text-sm", className)}
43 |       {...props}
44 |     />
45 |   );
46 | }
47 | 
48 | function CardContent({ className, ...props }: React.ComponentProps<"div">) {
49 |   return (
50 |     <div
51 |       data-slot="card-content"
52 |       className={cn("px-6", className)}
53 |       {...props}
54 |     />
55 |   );
56 | }
57 | 
58 | function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
59 |   return (
60 |     <div
61 |       data-slot="card-footer"
62 |       className={cn("flex items-center px-6", className)}
63 |       {...props}
64 |     />
65 |   );
66 | }
67 | 
68 | export {
69 |   Card,
70 |   CardHeader,
71 |   CardFooter,
72 |   CardTitle,
73 |   CardDescription,
74 |   CardContent,
75 | };
76 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/input.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | 
 3 | import { cn } from "@/lib/utils";
 4 | 
 5 | function Input({ className, type, ...props }: React.ComponentProps<"input">) {
 6 |   return (
 7 |     <input
 8 |       type={type}
 9 |       data-slot="input"
10 |       className={cn(
11 |         "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
12 |         "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
13 |         className,
14 |       )}
15 |       {...props}
16 |     />
17 |   );
18 | }
19 | 
20 | export { Input };
21 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/label.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as LabelPrimitive from "@radix-ui/react-label";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Label({
 7 |   className,
 8 |   ...props
 9 | }: React.ComponentProps<typeof LabelPrimitive.Root>) {
10 |   return (
11 |     <LabelPrimitive.Root
12 |       data-slot="label"
13 |       className={cn(
14 |         "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
15 |         className,
16 |       )}
17 |       {...props}
18 |     />
19 |   );
20 | }
21 | 
22 | export { Label };
23 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/password-input.tsx:
--------------------------------------------------------------------------------
 1 | "use client";
 2 | 
 3 | import * as React from "react";
 4 | 
 5 | import { cn } from "@/lib/utils";
 6 | import { Input } from "./input";
 7 | import { Button } from "./button";
 8 | import { EyeIcon, EyeOffIcon } from "lucide-react";
 9 | 
10 | export const PasswordInput = React.forwardRef<
11 |   HTMLInputElement,
12 |   React.ComponentProps<"input">
13 | >(({ className, ...props }, ref) => {
14 |   const [showPassword, setShowPassword] = React.useState(false);
15 | 
16 |   return (
17 |     <div className="relative w-full">
18 |       <Input
19 |         type={showPassword ? "text" : "password"}
20 |         className={cn("hide-password-toggle pr-10", className)}
21 |         ref={ref}
22 |         {...props}
23 |       />
24 |       <Button
25 |         type="button"
26 |         variant="ghost"
27 |         size="sm"
28 |         className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
29 |         onClick={() => setShowPassword((prev) => !prev)}
30 |       >
31 |         {showPassword ? (
32 |           <EyeIcon className="h-4 w-4" aria-hidden="true" />
33 |         ) : (
34 |           <EyeOffIcon className="h-4 w-4" aria-hidden="true" />
35 |         )}
36 |         <span className="sr-only">
37 |           {showPassword ? "Hide password" : "Show password"}
38 |         </span>
39 |       </Button>
40 | 
41 |       {/* hides browsers password toggles */}
42 |       <style>{`
43 | 					.hide-password-toggle::-ms-reveal,
44 | 					.hide-password-toggle::-ms-clear {
45 | 						visibility: hidden;
46 | 						pointer-events: none;
47 | 						display: none;
48 | 					}
49 | 				`}</style>
50 |     </div>
51 |   );
52 | });
53 | 
54 | PasswordInput.displayName = "PasswordInput";
55 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/separator.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as SeparatorPrimitive from "@radix-ui/react-separator";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Separator({
 7 |   className,
 8 |   orientation = "horizontal",
 9 |   decorative = true,
10 |   ...props
11 | }: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
12 |   return (
13 |     <SeparatorPrimitive.Root
14 |       data-slot="separator-root"
15 |       decorative={decorative}
16 |       orientation={orientation}
17 |       className={cn(
18 |         "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
19 |         className,
20 |       )}
21 |       {...props}
22 |     />
23 |   );
24 | }
25 | 
26 | export { Separator };
27 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/sheet.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react";
  2 | import * as SheetPrimitive from "@radix-ui/react-dialog";
  3 | import { XIcon } from "lucide-react";
  4 | 
  5 | import { cn } from "@/lib/utils";
  6 | 
  7 | function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  8 |   return <SheetPrimitive.Root data-slot="sheet" {...props} />;
  9 | }
 10 | 
 11 | function SheetTrigger({
 12 |   ...props
 13 | }: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
 14 |   return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
 15 | }
 16 | 
 17 | function SheetClose({
 18 |   ...props
 19 | }: React.ComponentProps<typeof SheetPrimitive.Close>) {
 20 |   return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
 21 | }
 22 | 
 23 | function SheetPortal({
 24 |   ...props
 25 | }: React.ComponentProps<typeof SheetPrimitive.Portal>) {
 26 |   return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
 27 | }
 28 | 
 29 | function SheetOverlay({
 30 |   className,
 31 |   ...props
 32 | }: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
 33 |   return (
 34 |     <SheetPrimitive.Overlay
 35 |       data-slot="sheet-overlay"
 36 |       className={cn(
 37 |         "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
 38 |         className,
 39 |       )}
 40 |       {...props}
 41 |     />
 42 |   );
 43 | }
 44 | 
 45 | function SheetContent({
 46 |   className,
 47 |   children,
 48 |   side = "right",
 49 |   ...props
 50 | }: React.ComponentProps<typeof SheetPrimitive.Content> & {
 51 |   side?: "top" | "right" | "bottom" | "left";
 52 | }) {
 53 |   return (
 54 |     <SheetPortal>
 55 |       <SheetOverlay />
 56 |       <SheetPrimitive.Content
 57 |         data-slot="sheet-content"
 58 |         className={cn(
 59 |           "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
 60 |           side === "right" &&
 61 |             "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
 62 |           side === "left" &&
 63 |             "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
 64 |           side === "top" &&
 65 |             "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
 66 |           side === "bottom" &&
 67 |             "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
 68 |           className,
 69 |         )}
 70 |         {...props}
 71 |       >
 72 |         {children}
 73 |         <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
 74 |           <XIcon className="size-4" />
 75 |           <span className="sr-only">Close</span>
 76 |         </SheetPrimitive.Close>
 77 |       </SheetPrimitive.Content>
 78 |     </SheetPortal>
 79 |   );
 80 | }
 81 | 
 82 | function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
 83 |   return (
 84 |     <div
 85 |       data-slot="sheet-header"
 86 |       className={cn("flex flex-col gap-1.5 p-4", className)}
 87 |       {...props}
 88 |     />
 89 |   );
 90 | }
 91 | 
 92 | function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
 93 |   return (
 94 |     <div
 95 |       data-slot="sheet-footer"
 96 |       className={cn("mt-auto flex flex-col gap-2 p-4", className)}
 97 |       {...props}
 98 |     />
 99 |   );
100 | }
101 | 
102 | function SheetTitle({
103 |   className,
104 |   ...props
105 | }: React.ComponentProps<typeof SheetPrimitive.Title>) {
106 |   return (
107 |     <SheetPrimitive.Title
108 |       data-slot="sheet-title"
109 |       className={cn("text-foreground font-semibold", className)}
110 |       {...props}
111 |     />
112 |   );
113 | }
114 | 
115 | function SheetDescription({
116 |   className,
117 |   ...props
118 | }: React.ComponentProps<typeof SheetPrimitive.Description>) {
119 |   return (
120 |     <SheetPrimitive.Description
121 |       data-slot="sheet-description"
122 |       className={cn("text-muted-foreground text-sm", className)}
123 |       {...props}
124 |     />
125 |   );
126 | }
127 | 
128 | export {
129 |   Sheet,
130 |   SheetTrigger,
131 |   SheetClose,
132 |   SheetContent,
133 |   SheetHeader,
134 |   SheetFooter,
135 |   SheetTitle,
136 |   SheetDescription,
137 | };
138 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/skeleton.tsx:
--------------------------------------------------------------------------------
 1 | import { cn } from "@/lib/utils";
 2 | 
 3 | function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
 4 |   return (
 5 |     <div
 6 |       data-slot="skeleton"
 7 |       className={cn("bg-primary/10 animate-pulse rounded-md", className)}
 8 |       {...props}
 9 |     />
10 |   );
11 | }
12 | 
13 | export { Skeleton };
14 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/sonner.tsx:
--------------------------------------------------------------------------------
 1 | import { useTheme } from "next-themes";
 2 | import { Toaster as Sonner, ToasterProps } from "sonner";
 3 | 
 4 | const Toaster = ({ ...props }: ToasterProps) => {
 5 |   const { theme = "system" } = useTheme();
 6 | 
 7 |   return (
 8 |     <Sonner
 9 |       theme={theme as ToasterProps["theme"]}
10 |       className="toaster group"
11 |       toastOptions={{
12 |         classNames: {
13 |           toast:
14 |             "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
15 |           description: "group-[.toast]:text-muted-foreground",
16 |           actionButton:
17 |             "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
18 |           cancelButton:
19 |             "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
20 |         },
21 |       }}
22 |       {...props}
23 |     />
24 |   );
25 | };
26 | 
27 | export { Toaster };
28 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/switch.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as SwitchPrimitive from "@radix-ui/react-switch";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Switch({
 7 |   className,
 8 |   ...props
 9 | }: React.ComponentProps<typeof SwitchPrimitive.Root>) {
10 |   return (
11 |     <SwitchPrimitive.Root
12 |       data-slot="switch"
13 |       className={cn(
14 |         "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
15 |         className,
16 |       )}
17 |       {...props}
18 |     >
19 |       <SwitchPrimitive.Thumb
20 |         data-slot="switch-thumb"
21 |         className={cn(
22 |           "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
23 |         )}
24 |       />
25 |     </SwitchPrimitive.Root>
26 |   );
27 | }
28 | 
29 | export { Switch };
30 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/textarea.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | 
 3 | import { cn } from "@/lib/utils";
 4 | 
 5 | function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
 6 |   return (
 7 |     <textarea
 8 |       data-slot="textarea"
 9 |       className={cn(
10 |         "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
11 |         className,
12 |       )}
13 |       {...props}
14 |     />
15 |   );
16 | }
17 | 
18 | export { Textarea };
19 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/components/ui/tooltip.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as TooltipPrimitive from "@radix-ui/react-tooltip";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function TooltipProvider({
 7 |   delayDuration = 0,
 8 |   ...props
 9 | }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
10 |   return (
11 |     <TooltipPrimitive.Provider
12 |       data-slot="tooltip-provider"
13 |       delayDuration={delayDuration}
14 |       {...props}
15 |     />
16 |   );
17 | }
18 | 
19 | function Tooltip({
20 |   ...props
21 | }: React.ComponentProps<typeof TooltipPrimitive.Root>) {
22 |   return (
23 |     <TooltipProvider>
24 |       <TooltipPrimitive.Root data-slot="tooltip" {...props} />
25 |     </TooltipProvider>
26 |   );
27 | }
28 | 
29 | function TooltipTrigger({
30 |   ...props
31 | }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
32 |   return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
33 | }
34 | 
35 | function TooltipContent({
36 |   className,
37 |   sideOffset = 0,
38 |   children,
39 |   ...props
40 | }: React.ComponentProps<typeof TooltipPrimitive.Content>) {
41 |   return (
42 |     <TooltipPrimitive.Portal>
43 |       <TooltipPrimitive.Content
44 |         data-slot="tooltip-content"
45 |         sideOffset={sideOffset}
46 |         className={cn(
47 |           "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
48 |           className,
49 |         )}
50 |         {...props}
51 |       >
52 |         {children}
53 |         <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
54 |       </TooltipPrimitive.Content>
55 |     </TooltipPrimitive.Portal>
56 |   );
57 | }
58 | 
59 | export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
60 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/hooks/useMediaQuery.tsx:
--------------------------------------------------------------------------------
 1 | import { useEffect, useState } from "react";
 2 | 
 3 | export function useMediaQuery(query: string) {
 4 |   const [matches, setMatches] = useState(false);
 5 | 
 6 |   useEffect(() => {
 7 |     const media = window.matchMedia(query);
 8 |     setMatches(media.matches);
 9 | 
10 |     const listener = (e: MediaQueryListEvent) => setMatches(e.matches);
11 |     media.addEventListener("change", listener);
12 |     return () => media.removeEventListener("change", listener);
13 |   }, [query]);
14 | 
15 |   return matches;
16 | }
17 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/lib/agent-inbox-interrupt.ts:
--------------------------------------------------------------------------------
 1 | import { HumanInterrupt } from "@langchain/langgraph/prebuilt";
 2 | 
 3 | export function isAgentInboxInterruptSchema(
 4 |   value: unknown,
 5 | ): value is HumanInterrupt | HumanInterrupt[] {
 6 |   const valueAsObject = Array.isArray(value) ? value[0] : value;
 7 |   return (
 8 |     valueAsObject &&
 9 |     typeof valueAsObject === "object" &&
10 |     "action_request" in valueAsObject &&
11 |     typeof valueAsObject.action_request === "object" &&
12 |     "config" in valueAsObject &&
13 |     typeof valueAsObject.config === "object" &&
14 |     "allow_respond" in valueAsObject.config &&
15 |     "allow_accept" in valueAsObject.config &&
16 |     "allow_edit" in valueAsObject.config &&
17 |     "allow_ignore" in valueAsObject.config
18 |   );
19 | }
20 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/lib/api-key.tsx:
--------------------------------------------------------------------------------
 1 | export function getApiKey(): string | null {
 2 |   try {
 3 |     if (typeof window === "undefined") return null;
 4 |     return window.localStorage.getItem("lg:chat:apiKey") ?? null;
 5 |   } catch {
 6 |     // no-op
 7 |   }
 8 | 
 9 |   return null;
10 | }
11 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/lib/ensure-tool-responses.ts:
--------------------------------------------------------------------------------
 1 | import { v4 as uuidv4 } from "uuid";
 2 | import { Message, ToolMessage } from "@langchain/langgraph-sdk";
 3 | 
 4 | export const DO_NOT_RENDER_ID_PREFIX = "do-not-render-";
 5 | 
 6 | export function ensureToolCallsHaveResponses(messages: Message[]): Message[] {
 7 |   const newMessages: ToolMessage[] = [];
 8 | 
 9 |   messages.forEach((message, index) => {
10 |     if (message.type !== "ai" || message.tool_calls?.length === 0) {
11 |       // If it's not an AI message, or it doesn't have tool calls, we can ignore.
12 |       return;
13 |     }
14 |     // If it has tool calls, ensure the message which follows this is a tool message
15 |     const followingMessage = messages[index + 1];
16 |     if (followingMessage && followingMessage.type === "tool") {
17 |       // Following message is a tool message, so we can ignore.
18 |       return;
19 |     }
20 | 
21 |     // Since the following message is not a tool message, we must create a new tool message
22 |     newMessages.push(
23 |       ...(message.tool_calls?.map((tc) => ({
24 |         type: "tool" as const,
25 |         tool_call_id: tc.id ?? "",
26 |         id: `${DO_NOT_RENDER_ID_PREFIX}${uuidv4()}`,
27 |         name: tc.name,
28 |         content: "Successfully handled tool call.",
29 |       })) ?? []),
30 |     );
31 |   });
32 | 
33 |   return newMessages;
34 | }
35 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/lib/utils.ts:
--------------------------------------------------------------------------------
1 | import { clsx, type ClassValue } from "clsx";
2 | import { twMerge } from "tailwind-merge";
3 | 
4 | export function cn(...inputs: ClassValue[]) {
5 |   return twMerge(clsx(inputs));
6 | }
7 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/providers/Thread.tsx:
--------------------------------------------------------------------------------
 1 | import { validate } from "uuid";
 2 | import { getApiKey } from "@/lib/api-key";
 3 | import { Thread } from "@langchain/langgraph-sdk";
 4 | import { useQueryState } from "nuqs";
 5 | import {
 6 |   createContext,
 7 |   useContext,
 8 |   ReactNode,
 9 |   useCallback,
10 |   useState,
11 |   Dispatch,
12 |   SetStateAction,
13 | } from "react";
14 | import { createClient } from "./client";
15 | 
16 | interface ThreadContextType {
17 |   getThreads: () => Promise<Thread[]>;
18 |   threads: Thread[];
19 |   setThreads: Dispatch<SetStateAction<Thread[]>>;
20 |   threadsLoading: boolean;
21 |   setThreadsLoading: Dispatch<SetStateAction<boolean>>;
22 | }
23 | 
24 | const ThreadContext = createContext<ThreadContextType | undefined>(undefined);
25 | 
26 | function getThreadSearchMetadata(
27 |   assistantId: string,
28 | ): { graph_id: string } | { assistant_id: string } {
29 |   if (validate(assistantId)) {
30 |     return { assistant_id: assistantId };
31 |   } else {
32 |     return { graph_id: assistantId };
33 |   }
34 | }
35 | 
36 | export function ThreadProvider({ children }: { children: ReactNode }) {
37 |   const [apiUrl] = useQueryState("apiUrl");
38 |   const [assistantId] = useQueryState("assistantId");
39 |   const [threads, setThreads] = useState<Thread[]>([]);
40 |   const [threadsLoading, setThreadsLoading] = useState(false);
41 | 
42 |   const getThreads = useCallback(async (): Promise<Thread[]> => {
43 |     if (!apiUrl || !assistantId) return [];
44 |     const client = createClient(apiUrl, getApiKey() ?? undefined);
45 | 
46 |     const threads = await client.threads.search({
47 |       metadata: {
48 |         ...getThreadSearchMetadata(assistantId),
49 |       },
50 |       limit: 100,
51 |     });
52 | 
53 |     return threads;
54 |   }, [apiUrl, assistantId]);
55 | 
56 |   const value = {
57 |     getThreads,
58 |     threads,
59 |     setThreads,
60 |     threadsLoading,
61 |     setThreadsLoading,
62 |   };
63 | 
64 |   return (
65 |     <ThreadContext.Provider value={value}>{children}</ThreadContext.Provider>
66 |   );
67 | }
68 | 
69 | export function useThreads() {
70 |   const context = useContext(ThreadContext);
71 |   if (context === undefined) {
72 |     throw new Error("useThreads must be used within a ThreadProvider");
73 |   }
74 |   return context;
75 | }
76 | 


--------------------------------------------------------------------------------
/templates/nextjs/src/providers/client.ts:
--------------------------------------------------------------------------------
1 | import { Client } from "@langchain/langgraph-sdk";
2 | 
3 | export function createClient(apiUrl: string, apiKey: string | undefined) {
4 |   return new Client({
5 |     apiKey,
6 |     apiUrl,
7 |   });
8 | }
9 | 


--------------------------------------------------------------------------------
/templates/nextjs/tailwind.config.js:
--------------------------------------------------------------------------------
 1 | /** @type {import('tailwindcss').Config} */
 2 | module.exports = {
 3 |   darkMode: ["class"],
 4 |   content: [
 5 |     "./index.html",
 6 |     "./src/**/*.{ts,tsx,js,jsx}",
 7 |     "./agent/**/*.{ts,tsx,js,jsx}",
 8 |   ],
 9 |   theme: {
10 |     extend: {
11 |       borderRadius: {
12 |         lg: "var(--radius)",
13 |         md: "calc(var(--radius) - 2px)",
14 |         sm: "calc(var(--radius) - 4px)",
15 |       },
16 |       components: {
17 |         ".scrollbar-pretty":
18 |           "overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent",
19 |       },
20 |       colors: {
21 |         background: "hsl(var(--background))",
22 |         foreground: "hsl(var(--foreground))",
23 |         card: {
24 |           DEFAULT: "hsl(var(--card))",
25 |           foreground: "hsl(var(--card-foreground))",
26 |         },
27 |         popover: {
28 |           DEFAULT: "hsl(var(--popover))",
29 |           foreground: "hsl(var(--popover-foreground))",
30 |         },
31 |         primary: {
32 |           DEFAULT: "hsl(var(--primary))",
33 |           foreground: "hsl(var(--primary-foreground))",
34 |         },
35 |         secondary: {
36 |           DEFAULT: "hsl(var(--secondary))",
37 |           foreground: "hsl(var(--secondary-foreground))",
38 |         },
39 |         muted: {
40 |           DEFAULT: "hsl(var(--muted))",
41 |           foreground: "hsl(var(--muted-foreground))",
42 |         },
43 |         accent: {
44 |           DEFAULT: "hsl(var(--accent))",
45 |           foreground: "hsl(var(--accent-foreground))",
46 |         },
47 |         destructive: {
48 |           DEFAULT: "hsl(var(--destructive))",
49 |           foreground: "hsl(var(--destructive-foreground))",
50 |         },
51 |         border: "hsl(var(--border))",
52 |         input: "hsl(var(--input))",
53 |         ring: "hsl(var(--ring))",
54 |         chart: {
55 |           1: "hsl(var(--chart-1))",
56 |           2: "hsl(var(--chart-2))",
57 |           3: "hsl(var(--chart-3))",
58 |           4: "hsl(var(--chart-4))",
59 |           5: "hsl(var(--chart-5))",
60 |         },
61 |       },
62 |     },
63 |   },
64 |   plugins: [require("tailwindcss-animate"), require("tailwind-scrollbar")],
65 | };
66 | 


--------------------------------------------------------------------------------
/templates/nextjs/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "lib": ["dom", "dom.iterable", "esnext"],
 4 |     "allowJs": true,
 5 |     "skipLibCheck": true,
 6 |     "strict": true,
 7 |     "noEmit": true,
 8 |     "esModuleInterop": true,
 9 |     "module": "esnext",
10 |     "moduleResolution": "bundler",
11 |     "resolveJsonModule": true,
12 |     "isolatedModules": true,
13 |     "jsx": "preserve",
14 |     "incremental": true,
15 |     "plugins": [
16 |       {
17 |         "name": "next"
18 |       }
19 |     ],
20 |     "paths": {
21 |       "@/*": ["./src/*"]
22 |     },
23 |     "target": "ES2017"
24 |   },
25 |   "include": [
26 |     "next-env.d.ts",
27 |     "**/*.ts",
28 |     "**/*.tsx",
29 |     ".next/types/**/*.ts",
30 |     "src/hooks/use-threads",
31 |     "src/app/thread/[threadId]"
32 |   ],
33 |   "exclude": ["node_modules"]
34 | }
35 | 


--------------------------------------------------------------------------------
/templates/nextjs/turbo.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "extends": ["//"],
 3 |   "tasks": {
 4 |     "build": {
 5 |       "outputs": [".next/**", "!.next/cache/**"]
 6 |     },
 7 |     "build:internal": {
 8 |       "dependsOn": ["^build:internal"]
 9 |     },
10 |     "dev": {
11 |       "dependsOn": ["^dev"]
12 |     }
13 |   }
14 | }
15 | 


--------------------------------------------------------------------------------
/templates/react-agent/configuration.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Define the configurable parameters for the agent.
 3 |  */
 4 | import { Annotation } from "@langchain/langgraph";
 5 | import { SYSTEM_PROMPT_TEMPLATE } from "./prompts.js";
 6 | import { RunnableConfig } from "@langchain/core/runnables";
 7 | 
 8 | export const ConfigurationSchema = Annotation.Root({
 9 |   /**
10 |    * The system prompt to be used by the agent.
11 |    */
12 |   systemPromptTemplate: Annotation<string>,
13 | 
14 |   /**
15 |    * The name of the language model to be used by the agent.
16 |    */
17 |   model: Annotation<string>,
18 | });
19 | 
20 | export function ensureConfiguration(
21 |   config: RunnableConfig,
22 | ): typeof ConfigurationSchema.State {
23 |   /**
24 |    * Ensure the defaults are populated.
25 |    */
26 |   const configurable = config.configurable ?? {};
27 |   return {
28 |     systemPromptTemplate:
29 |       configurable.systemPromptTemplate ?? SYSTEM_PROMPT_TEMPLATE,
30 |     model: configurable.model ?? "claude-3-7-sonnet-latest",
31 |   };
32 | }
33 | 


--------------------------------------------------------------------------------
/templates/react-agent/graph.ts:
--------------------------------------------------------------------------------
 1 | import { AIMessage } from "@langchain/core/messages";
 2 | import { RunnableConfig } from "@langchain/core/runnables";
 3 | import { MessagesAnnotation, StateGraph } from "@langchain/langgraph";
 4 | import { ToolNode } from "@langchain/langgraph/prebuilt";
 5 | 
 6 | import { ConfigurationSchema, ensureConfiguration } from "./configuration.js";
 7 | import { TOOLS } from "./tools.js";
 8 | import { loadChatModel } from "./utils.js";
 9 | 
10 | // Define the function that calls the model
11 | async function callModel(
12 |   state: typeof MessagesAnnotation.State,
13 |   config: RunnableConfig,
14 | ): Promise<typeof MessagesAnnotation.Update> {
15 |   /** Call the LLM powering our agent. **/
16 |   const configuration = ensureConfiguration(config);
17 | 
18 |   // Feel free to customize the prompt, model, and other logic!
19 |   const model = (await loadChatModel(configuration.model)).bindTools(TOOLS);
20 | 
21 |   const response = await model.invoke([
22 |     {
23 |       role: "system",
24 |       content: configuration.systemPromptTemplate.replace(
25 |         "{system_time}",
26 |         new Date().toISOString(),
27 |       ),
28 |     },
29 |     ...state.messages,
30 |   ]);
31 | 
32 |   // We return a list, because this will get added to the existing list
33 |   return { messages: [response] };
34 | }
35 | 
36 | // Define the function that determines whether to continue or not
37 | function routeModelOutput(state: typeof MessagesAnnotation.State): string {
38 |   const messages = state.messages;
39 |   const lastMessage = messages[messages.length - 1];
40 |   // If the LLM is invoking tools, route there.
41 |   if ((lastMessage as AIMessage)?.tool_calls?.length || 0 > 0) {
42 |     return "tools";
43 |   }
44 |   // Otherwise end the graph.
45 |   else {
46 |     return "__end__";
47 |   }
48 | }
49 | 
50 | // Define a new graph. We use the prebuilt MessagesAnnotation to define state:
51 | // https://langchain-ai.github.io/langgraphjs/concepts/low_level/#messagesannotation
52 | const workflow = new StateGraph(MessagesAnnotation, ConfigurationSchema)
53 |   // Define the two nodes we will cycle between
54 |   .addNode("callModel", callModel)
55 |   .addNode("tools", new ToolNode(TOOLS))
56 |   // Set the entrypoint as `callModel`
57 |   // This means that this node is the first one called
58 |   .addEdge("__start__", "callModel")
59 |   .addConditionalEdges(
60 |     // First, we define the edges' source node. We use `callModel`.
61 |     // This means these are the edges taken after the `callModel` node is called.
62 |     "callModel",
63 |     // Next, we pass in the function that will determine the sink node(s), which
64 |     // will be called after the source node is called.
65 |     routeModelOutput,
66 |   )
67 |   // This means that after `tools` is called, `callModel` node is called next.
68 |   .addEdge("tools", "callModel");
69 | 
70 | // Finally, we compile it!
71 | // This compiles it into a graph you can invoke and deploy.
72 | export const graph = workflow.compile({
73 |   interruptBefore: [], // if you want to update the state before calling the tools
74 |   interruptAfter: [],
75 | });
76 | 


--------------------------------------------------------------------------------
/templates/react-agent/prompts.ts:
--------------------------------------------------------------------------------
1 | /**
2 |  * Default prompts used by the agent.
3 |  */
4 | 
5 | export const SYSTEM_PROMPT_TEMPLATE = `You are a helpful AI assistant.
6 | 
7 | System time: {system_time}`;
8 | 


--------------------------------------------------------------------------------
/templates/react-agent/static/studio_ui.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/react-agent/static/studio_ui.png


--------------------------------------------------------------------------------
/templates/react-agent/tests/integration/graph.int.test.ts:
--------------------------------------------------------------------------------
 1 | import { it, expect } from "@jest/globals";
 2 | import { BaseMessage } from "@langchain/core/messages";
 3 | 
 4 | import { graph } from "../../graph.js";
 5 | 
 6 | it("Simple runthrough", async () => {
 7 |   const res = await graph.invoke({
 8 |     messages: [
 9 |       {
10 |         role: "user",
11 |         content: "What is the current weather in SF?",
12 |       },
13 |     ],
14 |   });
15 |   expect(
16 |     res.messages.find((message: BaseMessage) => message._getType() === "tool"),
17 |   ).toBeDefined();
18 | });
19 | 


--------------------------------------------------------------------------------
/templates/react-agent/tests/unit/graph.test.ts:
--------------------------------------------------------------------------------
1 | import { it } from "@jest/globals";
2 | 
3 | it("Test", async () => {});
4 | 


--------------------------------------------------------------------------------
/templates/react-agent/tools.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * This file defines the tools available to the ReAct agent.
 3 |  * Tools are functions that the agent can use to interact with external systems or perform specific tasks.
 4 |  */
 5 | import { TavilySearchResults } from "@langchain/community/tools/tavily_search";
 6 | 
 7 | /**
 8 |  * Tavily search tool configuration
 9 |  * This tool allows the agent to perform web searches using the Tavily API.
10 |  */
11 | const searchTavily = new TavilySearchResults({
12 |   maxResults: 3,
13 | });
14 | 
15 | /**
16 |  * Export an array of all available tools
17 |  * Add new tools to this array to make them available to the agent
18 |  *
19 |  * Note: You can create custom tools by implementing the Tool interface from @langchain/core/tools
20 |  * and add them to this array.
21 |  * See https://js.langchain.com/docs/how_to/custom_tools/#tool-function for more information.
22 |  */
23 | export const TOOLS = [searchTavily];
24 | 


--------------------------------------------------------------------------------
/templates/react-agent/utils.ts:
--------------------------------------------------------------------------------
 1 | import { initChatModel } from "langchain/chat_models/universal";
 2 | 
 3 | /**
 4 |  * Load a chat model from a fully specified name.
 5 |  * @param fullySpecifiedName - String in the format 'provider/model' or 'provider/account/provider/model'.
 6 |  * @returns A Promise that resolves to a BaseChatModel instance.
 7 |  */
 8 | export async function loadChatModel(
 9 |   fullySpecifiedName: string,
10 | ): Promise<ReturnType<typeof initChatModel>> {
11 |   const index = fullySpecifiedName.indexOf("/");
12 |   if (index === -1) {
13 |     // If there's no "/", assume it's just the model
14 |     return await initChatModel(fullySpecifiedName);
15 |   } else {
16 |     const provider = fullySpecifiedName.slice(0, index);
17 |     const model = fullySpecifiedName.slice(index + 1);
18 |     return await initChatModel(model, { modelProvider: provider });
19 |   }
20 | }
21 | 


--------------------------------------------------------------------------------
/templates/research-agent/index-graph/configuration.ts:
--------------------------------------------------------------------------------
 1 | import { Annotation } from "@langchain/langgraph";
 2 | import { BaseConfigurationAnnotation } from "../shared/configuration.js";
 3 | import { RunnableConfig } from "@langchain/core/runnables";
 4 | import { ensureBaseConfiguration } from "../shared/configuration.js";
 5 | 
 6 | // This file contains sample documents to index, based on the following LangChain and LangGraph documentation pages:
 7 | // - https://python.langchain.com/docs/concepts/
 8 | // - https://langchain-ai.github.io/langgraph/concepts/low_level/
 9 | const DEFAULT_DOCS_FILE = "src/research-agent/sample_docs.json";
10 | 
11 | /**
12 |  * The configuration for the indexing process.
13 |  */
14 | export const IndexConfigurationAnnotation = Annotation.Root({
15 |   ...BaseConfigurationAnnotation.spec,
16 | 
17 |   /**
18 |    * Path to a JSON file containing default documents to index.
19 |    */
20 |   docsFile: Annotation<string>,
21 | });
22 | 
23 | /**
24 |  * Create an typeof IndexConfigurationAnnotation.State instance from a RunnableConfig object.
25 |  *
26 |  * @param config - The configuration object to use.
27 |  * @returns An instance of typeof IndexConfigurationAnnotation.State with the specified configuration.
28 |  */
29 | export function ensureIndexConfiguration(
30 |   config: RunnableConfig,
31 | ): typeof IndexConfigurationAnnotation.State {
32 |   const configurable = (config?.configurable || {}) as Partial<
33 |     typeof IndexConfigurationAnnotation.State
34 |   >;
35 |   const baseConfig = ensureBaseConfiguration(config);
36 |   return {
37 |     ...baseConfig,
38 |     docsFile: configurable.docsFile || DEFAULT_DOCS_FILE,
39 |   };
40 | }
41 | 


--------------------------------------------------------------------------------
/templates/research-agent/index-graph/graph.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * This "graph" simply exposes an endpoint for a user to upload docs to be indexed.
 3 |  */
 4 | 
 5 | import { RunnableConfig } from "@langchain/core/runnables";
 6 | import { StateGraph, END, START } from "@langchain/langgraph";
 7 | import fs from "fs/promises";
 8 | 
 9 | import { IndexStateAnnotation } from "./state.js";
10 | import { makeRetriever } from "../shared/retrieval.js";
11 | import {
12 |   ensureIndexConfiguration,
13 |   IndexConfigurationAnnotation,
14 | } from "./configuration.js";
15 | import { reduceDocs } from "../shared/state.js";
16 | 
17 | async function indexDocs(
18 |   state: typeof IndexStateAnnotation.State,
19 |   config?: RunnableConfig,
20 | ): Promise<typeof IndexStateAnnotation.Update> {
21 |   if (!config) {
22 |     throw new Error("Configuration required to run index_docs.");
23 |   }
24 | 
25 |   const configuration = ensureIndexConfiguration(config);
26 |   let docs = state.docs;
27 | 
28 |   if (!docs.length) {
29 |     const fileContent = await fs.readFile(configuration.docsFile, "utf-8");
30 |     const serializedDocs = JSON.parse(fileContent);
31 |     docs = reduceDocs([], serializedDocs);
32 |   }
33 | 
34 |   const retriever = await makeRetriever(config);
35 |   await retriever.addDocuments(docs);
36 | 
37 |   return { docs: "delete" };
38 | }
39 | 
40 | // Define the graph
41 | const builder = new StateGraph(
42 |   IndexStateAnnotation,
43 |   IndexConfigurationAnnotation,
44 | )
45 |   .addNode("indexDocs", indexDocs)
46 |   .addEdge(START, "indexDocs")
47 |   .addEdge("indexDocs", END);
48 | 
49 | // Compile into a graph object that you can invoke and deploy.
50 | export const graph = builder.compile().withConfig({ runName: "IndexGraph" });
51 | 


--------------------------------------------------------------------------------
/templates/research-agent/index-graph/state.ts:
--------------------------------------------------------------------------------
 1 | import { Annotation } from "@langchain/langgraph";
 2 | import { Document } from "@langchain/core/documents";
 3 | import { reduceDocs } from "../shared/state.js";
 4 | 
 5 | /**
 6 |  * Represents the state for document indexing and retrieval.
 7 |  *
 8 |  * This interface defines the structure of the index state, which includes
 9 |  * the documents to be indexed and the retriever used for searching
10 |  * these documents.
11 |  */
12 | export const IndexStateAnnotation = Annotation.Root({
13 |   /**
14 |    * A list of documents that the agent can index.
15 |    */
16 |   docs: Annotation<
17 |     Document[],
18 |     Document[] | { [key: string]: any }[] | string[] | string | "delete"
19 |   >({
20 |     default: () => [],
21 |     reducer: reduceDocs,
22 |   }),
23 | });
24 | 
25 | export type IndexStateType = typeof IndexStateAnnotation.State;
26 | 


--------------------------------------------------------------------------------
/templates/research-agent/retrieval-graph/configuration.ts:
--------------------------------------------------------------------------------
  1 | import { Annotation } from "@langchain/langgraph";
  2 | import { RunnableConfig } from "@langchain/core/runnables";
  3 | 
  4 | import {
  5 |   ROUTER_SYSTEM_PROMPT,
  6 |   MORE_INFO_SYSTEM_PROMPT,
  7 |   GENERAL_SYSTEM_PROMPT,
  8 |   RESEARCH_PLAN_SYSTEM_PROMPT,
  9 |   GENERATE_QUERIES_SYSTEM_PROMPT,
 10 |   RESPONSE_SYSTEM_PROMPT,
 11 | } from "./prompts.js";
 12 | import {
 13 |   BaseConfigurationAnnotation,
 14 |   ensureBaseConfiguration,
 15 | } from "../shared/configuration.js";
 16 | 
 17 | /**
 18 |  * The configuration for the agent.
 19 |  */
 20 | export const AgentConfigurationAnnotation = Annotation.Root({
 21 |   ...BaseConfigurationAnnotation.spec,
 22 | 
 23 |   // models
 24 |   /**
 25 |    * The language model used for processing and refining queries.
 26 |    * Should be in the form: provider/model-name.
 27 |    */
 28 |   queryModel: Annotation<string>,
 29 | 
 30 |   /**
 31 |    * The language model used for generating responses.
 32 |    * Should be in the form: provider/model-name.
 33 |    */
 34 |   responseModel: Annotation<string>,
 35 | 
 36 |   // prompts
 37 |   /**
 38 |    * The system prompt used for classifying user questions to route them to the correct node.
 39 |    */
 40 |   routerSystemPrompt: Annotation<string>,
 41 | 
 42 |   /**
 43 |    * The system prompt used for asking for more information from the user.
 44 |    */
 45 |   moreInfoSystemPrompt: Annotation<string>,
 46 | 
 47 |   /**
 48 |    * The system prompt used for responding to general questions.
 49 |    */
 50 |   generalSystemPrompt: Annotation<string>,
 51 | 
 52 |   /**
 53 |    * The system prompt used for generating a research plan based on the user's question.
 54 |    */
 55 |   researchPlanSystemPrompt: Annotation<string>,
 56 | 
 57 |   /**
 58 |    * The system prompt used by the researcher to generate queries based on a step in the research plan.
 59 |    */
 60 |   generateQueriesSystemPrompt: Annotation<string>,
 61 | 
 62 |   /**
 63 |    * The system prompt used for generating responses.
 64 |    */
 65 |   responseSystemPrompt: Annotation<string>,
 66 | });
 67 | 
 68 | /**
 69 |  * Create a typeof ConfigurationAnnotation.State instance from a RunnableConfig object.
 70 |  *
 71 |  * @param config - The configuration object to use.
 72 |  * @returns An instance of typeof ConfigurationAnnotation.State with the specified configuration.
 73 |  */
 74 | export function ensureAgentConfiguration(
 75 |   config: RunnableConfig,
 76 | ): typeof AgentConfigurationAnnotation.State {
 77 |   const configurable = (config?.configurable || {}) as Partial<
 78 |     typeof AgentConfigurationAnnotation.State
 79 |   >;
 80 |   const baseConfig = ensureBaseConfiguration(config);
 81 |   return {
 82 |     ...baseConfig,
 83 |     queryModel: configurable.queryModel || "anthropic/claude-3-5-haiku-latest",
 84 |     responseModel:
 85 |       configurable.responseModel || "anthropic/claude-3-7-sonnet-latest",
 86 |     routerSystemPrompt: configurable.routerSystemPrompt || ROUTER_SYSTEM_PROMPT,
 87 |     moreInfoSystemPrompt:
 88 |       configurable.moreInfoSystemPrompt || MORE_INFO_SYSTEM_PROMPT,
 89 |     generalSystemPrompt:
 90 |       configurable.generalSystemPrompt || GENERAL_SYSTEM_PROMPT,
 91 |     researchPlanSystemPrompt:
 92 |       configurable.researchPlanSystemPrompt || RESEARCH_PLAN_SYSTEM_PROMPT,
 93 |     generateQueriesSystemPrompt:
 94 |       configurable.generateQueriesSystemPrompt ||
 95 |       GENERATE_QUERIES_SYSTEM_PROMPT,
 96 |     responseSystemPrompt:
 97 |       configurable.responseSystemPrompt || RESPONSE_SYSTEM_PROMPT,
 98 |   };
 99 | }
100 | 


--------------------------------------------------------------------------------
/templates/research-agent/retrieval-graph/prompts.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Default prompts.
 3 |  */
 4 | 
 5 | // Retrieval graph
 6 | 
 7 | export const ROUTER_SYSTEM_PROMPT = `You are a LangChain Developer advocate. Your job is help people using LangChain answer any issues they are running into.
 8 | 
 9 | A user will come to you with an inquiry. Your first job is to classify what type of inquiry it is. The types of inquiries you should classify it as are:
10 | 
11 | ## \`more-info\`
12 | Classify a user inquiry as this if you need more information before you will be able to help them. Examples include:
13 | - The user complains about an error but doesn't provide the error
14 | - The user says something isn't working but doesn't explain why/how it's not working
15 | 
16 | ## \`langchain\`
17 | Classify a user inquiry as this if it can be answered by looking up information related to LangChain open source package. The LangChain open source package \
18 | is a python library for working with LLMs. It integrates with various LLMs, databases and APIs.
19 | 
20 | ## \`general\`
21 | Classify a user inquiry as this if it is just a general question`;
22 | 
23 | export const GENERAL_SYSTEM_PROMPT = `You are a LangChain Developer advocate. Your job is help people using LangChain answer any issues they are running into.
24 | 
25 | Your boss has determined that the user is asking a general question, not one related to LangChain. This was their logic:
26 | 
27 | <logic>
28 | {logic}
29 | </logic>
30 | 
31 | Respond to the user. Politely decline to answer and tell them you can only answer questions about LangChain-related topics, and that if their question is about LangChain they should clarify how it is.\
32 | Be nice to them though - they are still a user!`;
33 | 
34 | export const MORE_INFO_SYSTEM_PROMPT = `You are a LangChain Developer advocate. Your job is help people using LangChain answer any issues they are running into.
35 | 
36 | Your boss has determined that more information is needed before doing any research on behalf of the user. This was their logic:
37 | 
38 | <logic>
39 | {logic}
40 | </logic>
41 | 
42 | Respond to the user and try to get any more relevant information. Do not overwhelm them! Be nice, and only ask them a single follow up question.`;
43 | 
44 | export const RESEARCH_PLAN_SYSTEM_PROMPT = `You are a LangChain expert and a world-class researcher, here to assist with any and all questions or issues with LangChain, LangGraph, LangSmith, or any related functionality. Users may come to you with questions or issues.
45 | 
46 | Based on the conversation below, generate a plan for how you will research the answer to their question. \
47 | The plan should generally not be more than 3 steps long, it can be as short as one. The length of the plan depends on the question.
48 | 
49 | You have access to the following documentation sources:
50 | - Conceptual docs
51 | - Integration docs
52 | - How-to guides
53 | 
54 | You do not need to specify where you want to research for all steps of the plan, but it's sometimes helpful.`;
55 | 
56 | export const RESPONSE_SYSTEM_PROMPT = `\
57 | You are an expert programmer and problem-solver, tasked with answering any question \
58 | about LangChain.
59 | 
60 | Generate a comprehensive and informative answer for the \
61 | given question based solely on the provided search results (URL and content). \
62 | Do NOT ramble, and adjust your response length based on the question. If they ask \
63 | a question that can be answered in one sentence, do that. If 5 paragraphs of detail is needed, \
64 | do that. You must \
65 | only use information from the provided search results. Use an unbiased and \
66 | journalistic tone. Combine search results together into a coherent answer. Do not \
67 | repeat text. Cite search results using [{{number}}] notation. Only cite the most \
68 | relevant results that answer the question accurately. Place these citations at the end \
69 | of the individual sentence or paragraph that reference them. \
70 | Do not put them all at the end, but rather sprinkle them throughout. If \
71 | different results refer to different entities within the same name, write separate \
72 | answers for each entity.
73 | 
74 | You should use bullet points in your answer for readability. Put citations where they apply
75 | rather than putting them all at the end. DO NOT PUT THEM ALL THAT END, PUT THEM IN THE BULLET POINTS.
76 | 
77 | If there is nothing in the context relevant to the question at hand, do NOT make up an answer. \
78 | Rather, tell them why you're unsure and ask for any additional information that may help you answer better.
79 | 
80 | Sometimes, what a user is asking may NOT be possible. Do NOT tell them that things are possible if you don't \
81 | see evidence for it in the context below. If you don't see based in the information below that something is possible, \
82 | do NOT say that it is - instead say that you're not sure.
83 | 
84 | Anything between the following \`context\` html blocks is retrieved from a knowledge \
85 | bank, not part of the conversation with the user.
86 | 
87 | <context>
88 |     {context}
89 | <context/>`;
90 | 
91 | // Researcher graph
92 | 
93 | export const GENERATE_QUERIES_SYSTEM_PROMPT = `\
94 | Generate 3 search queries to search for to answer the user's question. \
95 | These search queries should be diverse in nature - do not generate \
96 | repetitive ones.`;
97 | 


--------------------------------------------------------------------------------
/templates/research-agent/retrieval-graph/researcher-graph/graph.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Researcher graph used in the conversational retrieval system as a subgraph.
 3 |  * This module defines the core structure and functionality of the researcher graph,
 4 |  * which is responsible for generating search queries and retrieving relevant documents.
 5 |  */
 6 | 
 7 | import { StateGraph, END, START, Send } from "@langchain/langgraph";
 8 | import { z } from "zod";
 9 | 
10 | import { RunnableConfig } from "@langchain/core/runnables";
11 | import { ensureAgentConfiguration } from "../configuration.js";
12 | import { QueryStateAnnotation, ResearcherStateAnnotation } from "./state.js";
13 | import { makeRetriever } from "../../shared/retrieval.js";
14 | import { loadChatModel } from "../../shared/utils.js";
15 | 
16 | async function generateQueries(
17 |   state: typeof ResearcherStateAnnotation.State,
18 |   config: RunnableConfig,
19 | ): Promise<typeof ResearcherStateAnnotation.Update> {
20 |   const Response = z.object({
21 |     queries: z.array(z.string()),
22 |   });
23 | 
24 |   const configuration = ensureAgentConfiguration(config);
25 |   const model = (
26 |     await loadChatModel(configuration.queryModel)
27 |   ).withStructuredOutput(Response);
28 |   const messages: { role: string; content: string }[] = [
29 |     { role: "system", content: configuration.generateQueriesSystemPrompt },
30 |     { role: "human", content: state.question },
31 |   ];
32 |   const response = await model.invoke(messages);
33 |   return { queries: response.queries };
34 | }
35 | 
36 | async function retrieveDocuments(
37 |   state: typeof QueryStateAnnotation.State,
38 |   config: RunnableConfig,
39 | ): Promise<typeof ResearcherStateAnnotation.Update> {
40 |   const retriever = await makeRetriever(config);
41 |   const response = await retriever.invoke(state.query, config);
42 |   return { documents: response };
43 | }
44 | 
45 | function retrieveInParallel(
46 |   state: typeof ResearcherStateAnnotation.State,
47 | ): Send[] {
48 |   return state.queries.map(
49 |     (query: string) => new Send("retrieveDocuments", { query }),
50 |   );
51 | }
52 | 
53 | // Define the graph
54 | const builder = new StateGraph({
55 |   stateSchema: ResearcherStateAnnotation,
56 | })
57 |   .addNode("generateQueries", generateQueries)
58 |   .addNode("retrieveDocuments", retrieveDocuments)
59 |   .addEdge(START, "generateQueries")
60 |   .addConditionalEdges("generateQueries", retrieveInParallel, [
61 |     "retrieveDocuments",
62 |   ])
63 |   .addEdge("retrieveDocuments", END);
64 | 
65 | // Compile into a graph object that you can invoke and deploy.
66 | export const graph = builder
67 |   .compile()
68 |   .withConfig({ runName: "ResearcherGraph" });
69 | 


--------------------------------------------------------------------------------
/templates/research-agent/retrieval-graph/researcher-graph/state.ts:
--------------------------------------------------------------------------------
 1 | import { Annotation } from "@langchain/langgraph";
 2 | import { Document } from "@langchain/core/documents";
 3 | import { reduceDocs } from "../../shared/state.js";
 4 | 
 5 | /**
 6 |  * Private state for the retrieve_documents node in the researcher graph.
 7 |  */
 8 | export const QueryStateAnnotation = Annotation.Root({
 9 |   query: Annotation<string>(),
10 | });
11 | 
12 | /**
13 |  * State of the researcher graph / agent.
14 |  */
15 | export const ResearcherStateAnnotation = Annotation.Root({
16 |   /**
17 |    * A step in the research plan generated by the retriever agent.
18 |    */
19 |   question: Annotation<string>(),
20 | 
21 |   /**
22 |    * A list of search queries based on the question that the researcher generates.
23 |    */
24 |   queries: Annotation<string[]>({
25 |     default: () => [],
26 |     reducer: (existing: string[], newQueries: string[]) => [
27 |       ...existing,
28 |       ...newQueries,
29 |     ],
30 |   }),
31 | 
32 |   /**
33 |    * Populated by the retriever. This is a list of documents that the agent can reference.
34 |    */
35 |   documents: Annotation<
36 |     Document[],
37 |     Document[] | { [key: string]: any }[] | string[] | string | "delete"
38 |   >({
39 |     default: () => [],
40 |     reducer: reduceDocs,
41 |   }),
42 | 
43 |   // Feel free to add additional attributes to your state as needed.
44 |   // Common examples include retrieved documents, extracted entities, API connections, etc.
45 | });
46 | 
47 | export type ResearcherStateType = typeof ResearcherStateAnnotation.State;
48 | 


--------------------------------------------------------------------------------
/templates/research-agent/retrieval-graph/state.ts:
--------------------------------------------------------------------------------
 1 | import { Annotation, MessagesAnnotation } from "@langchain/langgraph";
 2 | import { Document } from "@langchain/core/documents";
 3 | import { reduceDocs } from "../shared/state.js";
 4 | 
 5 | /**
 6 |  * Represents the input state for the agent.
 7 |  * This is a restricted version of the State that defines a narrower interface
 8 |  * to the outside world compared to what is maintained internally.
 9 |  */
10 | export const InputStateAnnotation = Annotation.Root({
11 |   /**
12 |    * Messages track the primary execution state of the agent.
13 |    * @type {BaseMessage[]}
14 |    * @description
15 |    * Typically accumulates a pattern of Human/AI/Human/AI messages. If combined with a
16 |    * tool-calling ReAct agent pattern, it may follow this sequence:
17 |    * 1. HumanMessage - user input
18 |    * 2. AIMessage with .tool_calls - agent picking tool(s) to use
19 |    * 3. ToolMessage(s) - responses (or errors) from executed tools
20 |    *    (... repeat steps 2 and 3 as needed ...)
21 |    * 4. AIMessage without .tool_calls - agent's unstructured response to user
22 |    * 5. HumanMessage - user's next conversational turn
23 |    *    (... repeat steps 2-5 as needed ...)
24 |    */
25 |   ...MessagesAnnotation.spec,
26 | });
27 | 
28 | /**
29 |  * Classifies user query.
30 |  * @typedef {Object} Router
31 |  * @property {string} logic - The logic behind the classification.
32 |  * @property {'more-info' | 'langchain' | 'general'} type - The type of the query.
33 |  */
34 | 
35 | type Router = {
36 |   logic: string;
37 |   type: "more-info" | "langchain" | "general";
38 | };
39 | 
40 | /**
41 |  * Represents the state of the retrieval graph / agent.
42 |  */
43 | export const AgentStateAnnotation = Annotation.Root({
44 |   ...InputStateAnnotation.spec,
45 | 
46 |   /**
47 |    * The router's classification of the user's query.
48 |    * @type {Router}
49 |    */
50 |   router: Annotation<Router>({
51 |     default: () => ({ type: "general", logic: "" }),
52 |     reducer: (existing: Router, newRouter: Router) => ({
53 |       ...existing,
54 |       ...newRouter,
55 |     }),
56 |   }),
57 | 
58 |   /**
59 |    * A list of steps in the research plan.
60 |    * @type {string[]}
61 |    */
62 |   steps: Annotation<string[]>,
63 | 
64 |   /**
65 |    * Populated by the retriever. This is a list of documents that the agent can reference.
66 |    * @type {Document[]}
67 |    */
68 |   documents: Annotation<
69 |     Document[],
70 |     Document[] | { [key: string]: any }[] | string[] | string | "delete"
71 |   >({
72 |     default: () => [],
73 |     reducer: reduceDocs,
74 |   }),
75 | 
76 |   // Additional attributes can be added here as needed
77 |   // Examples might include retrieved documents, extracted entities, API connections, etc.
78 | });
79 | 


--------------------------------------------------------------------------------
/templates/research-agent/retrieval-graph/utils.ts:
--------------------------------------------------------------------------------
 1 | import { BaseMessage } from "@langchain/core/messages";
 2 | import { Document } from "@langchain/core/documents";
 3 | 
 4 | import { BaseChatModel } from "@langchain/core/language_models/chat_models";
 5 | import { initChatModel } from "langchain/chat_models/universal";
 6 | 
 7 | export function getMessageText(msg: BaseMessage): string {
 8 |   /** Get the text content of a message. */
 9 |   const content = msg.content;
10 |   if (typeof content === "string") {
11 |     return content;
12 |   } else {
13 |     // eslint-disable-next-line @typescript-eslint/no-explicit-any
14 |     const txts = (content as any[]).map((c) =>
15 |       typeof c === "string" ? c : c.text || "",
16 |     );
17 |     return txts.join("").trim();
18 |   }
19 | }
20 | 
21 | export function formatDoc(doc: Document): string {
22 |   const metadata = doc.metadata || {};
23 |   const meta = Object.entries(metadata)
24 |     .map(([k, v]) => ` ${k}=${v}`)
25 |     .join("");
26 |   const metaStr = meta ? ` ${meta}` : "";
27 | 
28 |   return `<document${metaStr}>\n${doc.pageContent}\n</document>`;
29 | }
30 | 
31 | export function formatDocs(docs?: Document[]): string {
32 |   /**Format a list of documents as XML. */
33 |   if (!docs || docs.length === 0) {
34 |     return "<documents></documents>";
35 |   }
36 |   const formatted = docs.map(formatDoc).join("\n");
37 |   return `<documents>\n${formatted}\n</documents>`;
38 | }
39 | 
40 | /**
41 |  * Load a chat model from a fully specified name.
42 |  * @param fullySpecifiedName - String in the format 'provider/model' or 'provider/account/provider/model'.
43 |  * @returns A Promise that resolves to a BaseChatModel instance.
44 |  */
45 | export async function loadChatModel(
46 |   fullySpecifiedName: string,
47 | ): Promise<BaseChatModel> {
48 |   const index = fullySpecifiedName.indexOf("/");
49 |   if (index === -1) {
50 |     // If there's no "/", assume it's just the model
51 |     return await initChatModel(fullySpecifiedName);
52 |   } else {
53 |     const provider = fullySpecifiedName.slice(0, index);
54 |     const model = fullySpecifiedName.slice(index + 1);
55 |     return await initChatModel(model, { modelProvider: provider });
56 |   }
57 | }
58 | 


--------------------------------------------------------------------------------
/templates/research-agent/shared/configuration.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Define the configurable parameters for the agent.
 3 |  */
 4 | 
 5 | import { Annotation } from "@langchain/langgraph";
 6 | import { RunnableConfig } from "@langchain/core/runnables";
 7 | 
 8 | /**
 9 |  * typeof ConfigurationAnnotation.State class for indexing and retrieval operations.
10 |  *
11 |  * This annotation defines the parameters needed for configuring the indexing and
12 |  * retrieval processes, including user identification, embedding model selection,
13 |  * retriever provider choice, and search parameters.
14 |  */
15 | export const BaseConfigurationAnnotation = Annotation.Root({
16 |   /**
17 |    * Name of the embedding model to use. Must be a valid embedding model name.
18 |    */
19 |   embeddingModel: Annotation<string>,
20 | 
21 |   /**
22 |    * The vector store provider to use for retrieval.
23 |    * Options are 'elastic', 'elastic-local', 'pinecone', or 'mongodb'.
24 |    */
25 |   retrieverProvider: Annotation<
26 |     "elastic" | "elastic-local" | "pinecone" | "mongodb"
27 |   >,
28 | 
29 |   /**
30 |    * Additional keyword arguments to pass to the search function of the retriever.
31 |    */
32 |   // eslint-disable-next-line @typescript-eslint/no-explicit-any
33 |   searchKwargs: Annotation<Record<string, any>>,
34 | });
35 | 
36 | /**
37 |  * Create an typeof BaseConfigurationAnnotation.State instance from a RunnableConfig object.
38 |  *
39 |  * @param config - The configuration object to use.
40 |  * @returns An instance of typeof BaseConfigurationAnnotation.State with the specified configuration.
41 |  */
42 | export function ensureBaseConfiguration(
43 |   config: RunnableConfig,
44 | ): typeof BaseConfigurationAnnotation.State {
45 |   const configurable = (config?.configurable || {}) as Partial<
46 |     typeof BaseConfigurationAnnotation.State
47 |   >;
48 |   return {
49 |     embeddingModel:
50 |       configurable.embeddingModel || "openai/text-embedding-3-small",
51 |     retrieverProvider: configurable.retrieverProvider || "elastic-local",
52 |     searchKwargs: configurable.searchKwargs || {},
53 |   };
54 | }
55 | 


--------------------------------------------------------------------------------
/templates/research-agent/shared/state.ts:
--------------------------------------------------------------------------------
 1 | import { Document } from "@langchain/core/documents";
 2 | import { v4 as uuidv4 } from "uuid";
 3 | 
 4 | /**
 5 |  * Reduces the document array based on the provided new documents or actions.
 6 |  *
 7 |  * @param existing - The existing array of documents.
 8 |  * @param newDocs - The new documents or actions to apply.
 9 |  * @returns The updated array of documents.
10 |  */
11 | export function reduceDocs(
12 |   existing?: Document[],
13 |   newDocs?:
14 |     | Document[]
15 |     | { [key: string]: any }[]
16 |     | string[]
17 |     | string
18 |     | "delete",
19 | ): Document[] {
20 |   if (newDocs === "delete") {
21 |     return [];
22 |   }
23 | 
24 |   const existingList = existing || [];
25 |   const existingIds = new Set(existingList.map((doc) => doc.metadata?.uuid));
26 | 
27 |   if (typeof newDocs === "string") {
28 |     const docId = uuidv4();
29 |     return [
30 |       ...existingList,
31 |       { pageContent: newDocs, metadata: { uuid: docId } },
32 |     ];
33 |   }
34 | 
35 |   const newList: Document[] = [];
36 |   if (Array.isArray(newDocs)) {
37 |     for (const item of newDocs) {
38 |       if (typeof item === "string") {
39 |         const itemId = uuidv4();
40 |         newList.push({ pageContent: item, metadata: { uuid: itemId } });
41 |         existingIds.add(itemId);
42 |       } else if (typeof item === "object") {
43 |         const metadata = (item as Document).metadata ?? {};
44 |         const itemId = metadata.uuid ?? uuidv4();
45 | 
46 |         if (!existingIds.has(itemId)) {
47 |           if ("pageContent" in item) {
48 |             // It's a Document-like object
49 |             newList.push({
50 |               ...(item as Document),
51 |               metadata: { ...metadata, uuid: itemId },
52 |             });
53 |           } else {
54 |             // It's a generic object, treat it as metadata
55 |             newList.push({
56 |               pageContent: "",
57 |               metadata: { ...(item as { [key: string]: any }), uuid: itemId },
58 |             });
59 |           }
60 |           existingIds.add(itemId);
61 |         }
62 |       }
63 |     }
64 |   }
65 | 
66 |   return [...existingList, ...newList];
67 | }
68 | 


--------------------------------------------------------------------------------
/templates/research-agent/shared/utils.ts:
--------------------------------------------------------------------------------
 1 | import { Document } from "@langchain/core/documents";
 2 | 
 3 | import { BaseChatModel } from "@langchain/core/language_models/chat_models";
 4 | import { initChatModel } from "langchain/chat_models/universal";
 5 | 
 6 | export function formatDoc(doc: Document): string {
 7 |   const metadata = doc.metadata || {};
 8 |   const meta = Object.entries(metadata)
 9 |     .map(([k, v]) => ` ${k}=${v}`)
10 |     .join("");
11 |   const metaStr = meta ? ` ${meta}` : "";
12 | 
13 |   return `<document${metaStr}>\n${doc.pageContent}\n</document>`;
14 | }
15 | 
16 | export function formatDocs(docs?: Document[]): string {
17 |   /**Format a list of documents as XML. */
18 |   if (!docs || docs.length === 0) {
19 |     return "<documents></documents>";
20 |   }
21 |   const formatted = docs.map(formatDoc).join("\n");
22 |   return `<documents>\n${formatted}\n</documents>`;
23 | }
24 | 
25 | /**
26 |  * Load a chat model from a fully specified name.
27 |  * @param fullySpecifiedName - String in the format 'provider/model' or 'provider/account/provider/model'.
28 |  * @returns A Promise that resolves to a BaseChatModel instance.
29 |  */
30 | export async function loadChatModel(
31 |   fullySpecifiedName: string,
32 | ): Promise<BaseChatModel> {
33 |   const index = fullySpecifiedName.indexOf("/");
34 |   if (index === -1) {
35 |     // If there's no "/", assume it's just the model
36 |     return await initChatModel(fullySpecifiedName);
37 |   } else {
38 |     const provider = fullySpecifiedName.slice(0, index);
39 |     const model = fullySpecifiedName.slice(index + 1);
40 |     return await initChatModel(model, { modelProvider: provider });
41 |   }
42 | }
43 | 


--------------------------------------------------------------------------------
/templates/research-agent/static/studio_ui.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/research-agent/static/studio_ui.png


--------------------------------------------------------------------------------
/templates/retrieval-agent/configuration.ts:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Define the configurable parameters for the agent.
  3 |  */
  4 | import { RunnableConfig } from "@langchain/core/runnables";
  5 | import {
  6 |   RESPONSE_SYSTEM_PROMPT_TEMPLATE,
  7 |   QUERY_SYSTEM_PROMPT_TEMPLATE,
  8 | } from "./prompts.js";
  9 | import { Annotation } from "@langchain/langgraph";
 10 | 
 11 | /**
 12 |  * typeof ConfigurationAnnotation.State class for indexing and retrieval operations.
 13 |  *
 14 |  * This annotation defines the parameters needed for configuring the indexing and
 15 |  * retrieval processes, including user identification, embedding model selection,
 16 |  * retriever provider choice, and search parameters.
 17 |  */
 18 | export const IndexConfigurationAnnotation = Annotation.Root({
 19 |   /**
 20 |    * Unique identifier for the user.
 21 |    */
 22 |   userId: Annotation<string>,
 23 | 
 24 |   /**
 25 |    * Name of the embedding model to use. Must be a valid embedding model name.
 26 |    */
 27 |   embeddingModel: Annotation<string>,
 28 | 
 29 |   /**
 30 |    * The vector store provider to use for retrieval.
 31 |    * Options are 'elastic', 'elastic-local', 'pinecone', or 'mongodb'.
 32 |    */
 33 |   retrieverProvider: Annotation<
 34 |     "elastic" | "elastic-local" | "pinecone" | "mongodb"
 35 |   >,
 36 | 
 37 |   /**
 38 |    * Additional keyword arguments to pass to the search function of the retriever.
 39 |    */
 40 |   // eslint-disable-next-line @typescript-eslint/no-explicit-any
 41 |   searchKwargs: Annotation<Record<string, any>>,
 42 | });
 43 | 
 44 | /**
 45 |  * Create an typeof IndexConfigurationAnnotation.State instance from a RunnableConfig object.
 46 |  *
 47 |  * @param config - The configuration object to use.
 48 |  * @returns An instance of typeof IndexConfigurationAnnotation.State with the specified configuration.
 49 |  */
 50 | export function ensureIndexConfiguration(
 51 |   config: RunnableConfig | undefined = undefined,
 52 | ): typeof IndexConfigurationAnnotation.State {
 53 |   const configurable = (config?.configurable || {}) as Partial<
 54 |     typeof IndexConfigurationAnnotation.State
 55 |   >;
 56 |   return {
 57 |     userId: configurable.userId || "default", // Give a default user for shared docs
 58 |     embeddingModel:
 59 |       configurable.embeddingModel || "openai/text-embedding-3-small",
 60 |     retrieverProvider: configurable.retrieverProvider || "elastic",
 61 |     searchKwargs: configurable.searchKwargs || {},
 62 |   };
 63 | }
 64 | 
 65 | /**
 66 |  * The complete configuration for the agent.
 67 |  */
 68 | export const ConfigurationAnnotation = Annotation.Root({
 69 |   ...IndexConfigurationAnnotation.spec,
 70 |   /**
 71 |    * The system prompt used for generating responses.
 72 |    */
 73 |   responseSystemPromptTemplate: Annotation<string>,
 74 | 
 75 |   /**
 76 |    * The language model used for generating responses. Should be in the form: provider/model-name.
 77 |    */
 78 |   responseModel: Annotation<string>,
 79 | 
 80 |   /**
 81 |    * The system prompt used for processing and refining queries.
 82 |    */
 83 |   querySystemPromptTemplate: Annotation<string>,
 84 | 
 85 |   /**
 86 |    * The language model used for processing and refining queries. Should be in the form: provider/model-name.
 87 |    */
 88 |   queryModel: Annotation<string>,
 89 | });
 90 | 
 91 | /**
 92 |  * Create a typeof ConfigurationAnnotation.State instance from a RunnableConfig object.
 93 |  *
 94 |  * @param config - The configuration object to use.
 95 |  * @returns An instance of typeof ConfigurationAnnotation.State with the specified configuration.
 96 |  */
 97 | export function ensureConfiguration(
 98 |   config: RunnableConfig | undefined = undefined,
 99 | ): typeof ConfigurationAnnotation.State {
100 |   const indexConfig = ensureIndexConfiguration(config);
101 |   const configurable = (config?.configurable || {}) as Partial<
102 |     typeof ConfigurationAnnotation.State
103 |   >;
104 | 
105 |   return {
106 |     ...indexConfig,
107 |     responseSystemPromptTemplate:
108 |       configurable.responseSystemPromptTemplate ||
109 |       RESPONSE_SYSTEM_PROMPT_TEMPLATE,
110 |     responseModel:
111 |       configurable.responseModel || "anthropic/claude-3-7-sonnet-latest",
112 |     querySystemPromptTemplate:
113 |       configurable.querySystemPromptTemplate || QUERY_SYSTEM_PROMPT_TEMPLATE,
114 |     queryModel: configurable.queryModel || "anthropic/claude-3-5-haiku-latest",
115 |   };
116 | }
117 | 


--------------------------------------------------------------------------------
/templates/retrieval-agent/graph.ts:
--------------------------------------------------------------------------------
  1 | import { RunnableConfig } from "@langchain/core/runnables";
  2 | import { StateGraph } from "@langchain/langgraph";
  3 | import {
  4 |   ConfigurationAnnotation,
  5 |   ensureConfiguration,
  6 | } from "./configuration.js";
  7 | import { StateAnnotation, InputStateAnnotation } from "./state.js";
  8 | import { formatDocs, getMessageText, loadChatModel } from "./utils.js";
  9 | import { z } from "zod";
 10 | import { makeRetriever } from "./retrieval.js";
 11 | // Define the function that calls the model
 12 | 
 13 | const SearchQuery = z.object({
 14 |   query: z.string().describe("Search the indexed documents for a query."),
 15 | });
 16 | 
 17 | async function generateQuery(
 18 |   state: typeof StateAnnotation.State,
 19 |   config?: RunnableConfig,
 20 | ): Promise<typeof StateAnnotation.Update> {
 21 |   const messages = state.messages;
 22 |   if (messages.length === 1) {
 23 |     // It's the first user question. We will use the input directly to search.
 24 |     const humanInput = getMessageText(messages[messages.length - 1]);
 25 |     return { queries: [humanInput] };
 26 |   } else {
 27 |     const configuration = ensureConfiguration(config);
 28 |     // Feel free to customize the prompt, model, and other logic!
 29 |     const systemMessage = configuration.querySystemPromptTemplate
 30 |       .replace("{queries}", (state.queries || []).join("\n- "))
 31 |       .replace("{systemTime}", new Date().toISOString());
 32 | 
 33 |     const messageValue = [
 34 |       { role: "system", content: systemMessage },
 35 |       ...state.messages,
 36 |     ];
 37 |     const model = (
 38 |       await loadChatModel(configuration.responseModel)
 39 |     ).withStructuredOutput(SearchQuery);
 40 | 
 41 |     const generated = await model.invoke(messageValue);
 42 |     return {
 43 |       queries: [generated.query],
 44 |     };
 45 |   }
 46 | }
 47 | 
 48 | async function retrieve(
 49 |   state: typeof StateAnnotation.State,
 50 |   config: RunnableConfig,
 51 | ): Promise<typeof StateAnnotation.Update> {
 52 |   const query = state.queries[state.queries.length - 1];
 53 |   const retriever = await makeRetriever(config);
 54 |   const response = await retriever.invoke(query);
 55 |   return { retrievedDocs: response };
 56 | }
 57 | 
 58 | async function respond(
 59 |   state: typeof StateAnnotation.State,
 60 |   config: RunnableConfig,
 61 | ): Promise<typeof StateAnnotation.Update> {
 62 |   /**
 63 |    * Call the LLM powering our "agent".
 64 |    */
 65 |   const configuration = ensureConfiguration(config);
 66 | 
 67 |   const model = await loadChatModel(configuration.responseModel);
 68 | 
 69 |   const retrievedDocs = formatDocs(state.retrievedDocs);
 70 |   // Feel free to customize the prompt, model, and other logic!
 71 |   const systemMessage = configuration.responseSystemPromptTemplate
 72 |     .replace("{retrievedDocs}", retrievedDocs)
 73 |     .replace("{systemTime}", new Date().toISOString());
 74 |   const messageValue = [
 75 |     { role: "system", content: systemMessage },
 76 |     ...state.messages,
 77 |   ];
 78 |   const response = await model.invoke(messageValue);
 79 |   // We return a list, because this will get added to the existing list
 80 |   return { messages: [response] };
 81 | }
 82 | 
 83 | // Lay out the nodes and edges to define a graph
 84 | const builder = new StateGraph(
 85 |   {
 86 |     stateSchema: StateAnnotation,
 87 |     // The only input field is the user
 88 |     input: InputStateAnnotation,
 89 |   },
 90 |   ConfigurationAnnotation,
 91 | )
 92 |   .addNode("generateQuery", generateQuery)
 93 |   .addNode("retrieve", retrieve)
 94 |   .addNode("respond", respond)
 95 |   .addEdge("__start__", "generateQuery")
 96 |   .addEdge("generateQuery", "retrieve")
 97 |   .addEdge("retrieve", "respond");
 98 | 
 99 | // Finally, we compile it!
100 | // This compiles it into a graph you can invoke and deploy.
101 | export const graph = builder.compile({
102 |   interruptBefore: [], // if you want to update the state before calling the tools
103 |   interruptAfter: [],
104 | });
105 | 
106 | graph.name = "Retrieval Graph"; // Customizes the name displayed in LangSmith
107 | 


--------------------------------------------------------------------------------
/templates/retrieval-agent/index_graph.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * This "graph" simply exposes an endpoint for a user to upload docs to be indexed.
 3 |  */
 4 | 
 5 | import { Document } from "@langchain/core/documents";
 6 | import { RunnableConfig } from "@langchain/core/runnables";
 7 | import { StateGraph } from "@langchain/langgraph";
 8 | 
 9 | import { IndexStateAnnotation } from "./state.js";
10 | import { makeRetriever } from "./retrieval.js";
11 | import {
12 |   ensureIndexConfiguration,
13 |   IndexConfigurationAnnotation,
14 | } from "./configuration.js";
15 | 
16 | function ensureDocsHaveUserId(
17 |   docs: Document[],
18 |   config: RunnableConfig,
19 | ): Document[] {
20 |   const configuration = ensureIndexConfiguration(config);
21 |   const userId = configuration.userId;
22 |   return docs.map((doc) => {
23 |     return new Document({
24 |       pageContent: doc.pageContent,
25 |       metadata: { ...doc.metadata, user_id: userId },
26 |     });
27 |   });
28 | }
29 | 
30 | async function indexDocs(
31 |   state: typeof IndexStateAnnotation.State,
32 |   config?: RunnableConfig,
33 | ): Promise<typeof IndexStateAnnotation.Update> {
34 |   if (!config) {
35 |     throw new Error("ConfigurationAnnotation required to run index_docs.");
36 |   }
37 |   const docs = state.docs;
38 |   const retriever = await makeRetriever(config);
39 |   const stampedDocs = ensureDocsHaveUserId(docs, config);
40 | 
41 |   await retriever.addDocuments(stampedDocs);
42 |   return { docs: "delete" };
43 | }
44 | 
45 | // Define a new graph
46 | 
47 | const builder = new StateGraph(
48 |   IndexStateAnnotation,
49 |   IndexConfigurationAnnotation,
50 | )
51 |   .addNode("indexDocs", indexDocs)
52 |   .addEdge("__start__", "indexDocs");
53 | 
54 | // Finally, we compile it!
55 | // This compiles it into a graph you can invoke and deploy.
56 | export const graph = builder.compile();
57 | 
58 | graph.name = "Index Graph"; // Customizes the name displayed in LangSmith
59 | 


--------------------------------------------------------------------------------
/templates/retrieval-agent/prompts.ts:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * Default prompts.
 3 |  */
 4 | 
 5 | export const RESPONSE_SYSTEM_PROMPT_TEMPLATE = `You are a helpful AI assistant. Answer the user's questions based on the retrieved documents.
 6 | 
 7 | {retrievedDocs}
 8 | 
 9 | System time: {systemTime}`;
10 | 
11 | export const QUERY_SYSTEM_PROMPT_TEMPLATE = `Generate search queries to retrieve documents that may help answer the user's question. Previously, you made the following queries:
12 |     
13 | <previous_queries/>
14 | {queries}
15 | </previous_queries>
16 | 
17 | System time: {systemTime}`;
18 | 


--------------------------------------------------------------------------------
/templates/retrieval-agent/static/studio_ui.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/retrieval-agent/static/studio_ui.png


--------------------------------------------------------------------------------
/templates/retrieval-agent/utils.ts:
--------------------------------------------------------------------------------
 1 | import { BaseMessage } from "@langchain/core/messages";
 2 | import { Document } from "@langchain/core/documents";
 3 | 
 4 | import { BaseChatModel } from "@langchain/core/language_models/chat_models";
 5 | import { initChatModel } from "langchain/chat_models/universal";
 6 | 
 7 | export function getMessageText(msg: BaseMessage): string {
 8 |   /** Get the text content of a message. */
 9 |   const content = msg.content;
10 |   if (typeof content === "string") {
11 |     return content;
12 |   } else {
13 |     // eslint-disable-next-line @typescript-eslint/no-explicit-any
14 |     const txts = (content as any[]).map((c) =>
15 |       typeof c === "string" ? c : c.text || "",
16 |     );
17 |     return txts.join("").trim();
18 |   }
19 | }
20 | 
21 | export function formatDoc(doc: Document): string {
22 |   const metadata = doc.metadata || {};
23 |   const meta = Object.entries(metadata)
24 |     .map(([k, v]) => ` ${k}=${v}`)
25 |     .join("");
26 |   const metaStr = meta ? ` ${meta}` : "";
27 | 
28 |   return `<document${metaStr}>\n${doc.pageContent}\n</document>`;
29 | }
30 | 
31 | export function formatDocs(docs?: Document[]): string {
32 |   /**Format a list of documents as XML. */
33 |   if (!docs || docs.length === 0) {
34 |     return "<documents></documents>";
35 |   }
36 |   const formatted = docs.map(formatDoc).join("\n");
37 |   return `<documents>\n${formatted}\n</documents>`;
38 | }
39 | 
40 | /**
41 |  * Load a chat model from a fully specified name.
42 |  * @param fullySpecifiedName - String in the format 'provider/model' or 'provider/account/provider/model'.
43 |  * @returns A Promise that resolves to a BaseChatModel instance.
44 |  */
45 | export async function loadChatModel(
46 |   fullySpecifiedName: string,
47 | ): Promise<BaseChatModel> {
48 |   const index = fullySpecifiedName.indexOf("/");
49 |   if (index === -1) {
50 |     // If there's no "/", assume it's just the model
51 |     return await initChatModel(fullySpecifiedName);
52 |   } else {
53 |     const provider = fullySpecifiedName.slice(0, index);
54 |     const model = fullySpecifiedName.slice(index + 1);
55 |     return await initChatModel(model, { modelProvider: provider });
56 |   }
57 | }
58 | 


--------------------------------------------------------------------------------
/templates/vite/.dockerignore:
--------------------------------------------------------------------------------
1 | node_modules
2 | .next
3 | .git
4 | .env


--------------------------------------------------------------------------------
/templates/vite/.env.example:
--------------------------------------------------------------------------------
1 | # LangGraph Configuration
2 | VITE_API_URL=http://localhost:2024
3 | VITE_ASSISTANT_ID=agent
4 | 


--------------------------------------------------------------------------------
/templates/vite/.gitignore:
--------------------------------------------------------------------------------
 1 | # Logs
 2 | logs
 3 | *.log
 4 | npm-debug.log*
 5 | yarn-debug.log*
 6 | yarn-error.log*
 7 | pnpm-debug.log*
 8 | lerna-debug.log*
 9 | 
10 | node_modules
11 | dist
12 | dist-ssr
13 | *.local
14 | 
15 | # Editor directories and files
16 | .vscode/*
17 | !.vscode/extensions.json
18 | .idea
19 | .DS_Store
20 | *.suo
21 | *.ntvs*
22 | *.njsproj
23 | *.sln
24 | *.sw?
25 | 
26 | # LangGraph API
27 | .langgraph_api
28 | .env


--------------------------------------------------------------------------------
/templates/vite/.prettierrc:
--------------------------------------------------------------------------------
1 | {
2 |   "tabWidth": 2,
3 |   "useTabs": false
4 | }
5 | 


--------------------------------------------------------------------------------
/templates/vite/components.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "$schema": "https://ui.shadcn.com/schema.json",
 3 |   "style": "new-york",
 4 |   "rsc": false,
 5 |   "tsx": true,
 6 |   "tailwind": {
 7 |     "config": "tailwind.config.js",
 8 |     "css": "src/index.css",
 9 |     "baseColor": "neutral",
10 |     "cssVariables": true,
11 |     "prefix": ""
12 |   },
13 |   "aliases": {
14 |     "components": "@/components",
15 |     "utils": "@/lib/utils",
16 |     "ui": "@/components/ui",
17 |     "lib": "@/lib",
18 |     "hooks": "@/hooks"
19 |   },
20 |   "iconLibrary": "lucide"
21 | }
22 | 


--------------------------------------------------------------------------------
/templates/vite/eslint.config.js:
--------------------------------------------------------------------------------
 1 | import js from "@eslint/js";
 2 | import globals from "globals";
 3 | import reactHooks from "eslint-plugin-react-hooks";
 4 | import reactRefresh from "eslint-plugin-react-refresh";
 5 | import tseslint from "typescript-eslint";
 6 | 
 7 | export default tseslint.config(
 8 |   { ignores: ["dist"] },
 9 |   {
10 |     extends: [js.configs.recommended, ...tseslint.configs.recommended],
11 |     files: ["**/*.{ts,tsx}"],
12 |     languageOptions: {
13 |       ecmaVersion: 2020,
14 |       globals: globals.browser,
15 |     },
16 |     plugins: {
17 |       "react-hooks": reactHooks,
18 |       "react-refresh": reactRefresh,
19 |     },
20 |     rules: {
21 |       ...reactHooks.configs.recommended.rules,
22 |       "@typescript-eslint/no-explicit-any": 0,
23 |       "@typescript-eslint/no-unused-vars": [
24 |         "warn",
25 |         { args: "none", argsIgnorePattern: "^_", varsIgnorePattern: "^_" },
26 |       ],
27 |       "react-refresh/only-export-components": [
28 |         "warn",
29 |         { allowConstantExport: true },
30 |       ],
31 |     },
32 |   },
33 | );
34 | 


--------------------------------------------------------------------------------
/templates/vite/index.html:
--------------------------------------------------------------------------------
 1 | <!doctype html>
 2 | <html lang="en">
 3 |   <head>
 4 |     <meta charset="UTF-8" />
 5 |     <link rel="icon" type="image/svg+xml" href="/logo.svg" />
 6 |     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 7 |     <title>Agent Chat</title>
 8 |     <link href="/src/styles.css" rel="stylesheet" />
 9 |   </head>
10 |   <body>
11 |     <div id="root"></div>
12 |     <script type="module" src="/src/main.tsx"></script>
13 |   </body>
14 | </html>
15 | 


--------------------------------------------------------------------------------
/templates/vite/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "web",
 3 |   "private": true,
 4 |   "version": "0.0.0",
 5 |   "type": "module",
 6 |   "scripts": {
 7 |     "dev": "vite",
 8 |     "build": "turbo build:internal --filter=web",
 9 |     "build:internal": "tsc -b && vite build",
10 |     "lint": "eslint .",
11 |     "format": "prettier --write .",
12 |     "format:check": "prettier --check .",
13 |     "preview": "vite preview"
14 |   },
15 |   "dependencies": {
16 |     "@langchain/core": "^0.3.42",
17 |     "@langchain/langgraph": "^0.2.55",
18 |     "@langchain/langgraph-api": "^0.0.16",
19 |     "@langchain/langgraph-cli": "^0.0.16",
20 |     "@langchain/langgraph-sdk": "^0.0.57",
21 |     "@radix-ui/react-avatar": "^1.1.3",
22 |     "@radix-ui/react-dialog": "^1.1.6",
23 |     "@radix-ui/react-label": "^2.1.2",
24 |     "@radix-ui/react-separator": "^1.1.2",
25 |     "@radix-ui/react-slot": "^1.1.2",
26 |     "@radix-ui/react-switch": "^1.1.3",
27 |     "@radix-ui/react-tooltip": "^1.1.8",
28 |     "@tailwindcss/postcss": "^4.0.9",
29 |     "@tailwindcss/vite": "^4.0.9",
30 |     "class-variance-authority": "^0.7.1",
31 |     "clsx": "^2.1.1",
32 |     "date-fns": "^4.1.0",
33 |     "esbuild": "^0.25.0",
34 |     "esbuild-plugin-tailwindcss": "^2.0.1",
35 |     "framer-motion": "^12.4.9",
36 |     "katex": "^0.16.21",
37 |     "lodash": "^4.17.21",
38 |     "lucide-react": "^0.476.0",
39 |     "next-themes": "^0.4.4",
40 |     "prettier": "^3.5.2",
41 |     "react": "^19.0.0",
42 |     "react-dom": "^19.0.0",
43 |     "react-markdown": "^10.0.1",
44 |     "react-router-dom": "^6.17.0",
45 |     "react-syntax-highlighter": "^15.5.0",
46 |     "recharts": "^2.15.1",
47 |     "rehype-katex": "^7.0.1",
48 |     "remark-gfm": "^4.0.1",
49 |     "remark-math": "^6.0.0",
50 |     "sonner": "^2.0.1",
51 |     "nuqs": "^2.4.1",
52 |     "tailwind-merge": "^3.0.2",
53 |     "tailwindcss-animate": "^1.0.7",
54 |     "use-stick-to-bottom": "^1.0.46",
55 |     "uuid": "^11.0.5",
56 |     "zod": "^3.24.2"
57 |   },
58 |   "devDependencies": {
59 |     "@eslint/js": "^9.19.0",
60 |     "@types/lodash": "^4.17.16",
61 |     "@types/node": "^22.13.5",
62 |     "@types/react": "^19.0.8",
63 |     "@types/react-dom": "^19.0.3",
64 |     "@types/react-syntax-highlighter": "^15.5.13",
65 |     "turbo": "latest",
66 |     "@vitejs/plugin-react": "^4.3.4",
67 |     "autoprefixer": "^10.4.20",
68 |     "dotenv": "^16.4.7",
69 |     "eslint": "^9.19.0",
70 |     "eslint-plugin-react-hooks": "^5.0.0",
71 |     "eslint-plugin-react-refresh": "^0.4.18",
72 |     "globals": "^15.14.0",
73 |     "tailwind-scrollbar": "^4.0.1",
74 |     "tailwindcss": "^4.0.6",
75 |     "typescript": "~5.7.2",
76 |     "typescript-eslint": "^8.22.0",
77 |     "vite": "^6.1.0"
78 |   },
79 |   "overrides": {
80 |     "react-is": "^19.0.0-rc-69d4b800-20241021"
81 |   }
82 | }
83 | 


--------------------------------------------------------------------------------
/templates/vite/src/App.css:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/langchain-ai/create-agent-chat-app/38c4631e6eaa806dc78b1636688ae1520409d93a/templates/vite/src/App.css


--------------------------------------------------------------------------------
/templates/vite/src/App.tsx:
--------------------------------------------------------------------------------
1 | import "./App.css";
2 | import { Thread } from "@/components/thread";
3 | 
4 | function App() {
5 |   return <Thread />;
6 | }
7 | 
8 | export default App;
9 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/icons/github.tsx:
--------------------------------------------------------------------------------
 1 | export const GitHubSVG = ({ width = "100%", height = "100%" }) => (
 2 |   <svg
 3 |     role="img"
 4 |     viewBox="0 0 24 24"
 5 |     width={width}
 6 |     height={height}
 7 |     xmlns="http://www.w3.org/2000/svg"
 8 |   >
 9 |     <title>GitHub</title>
10 |     <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
11 |   </svg>
12 | );
13 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/agent-inbox/components/thread-id.tsx:
--------------------------------------------------------------------------------
 1 | import { Copy, CopyCheck } from "lucide-react";
 2 | import {
 3 |   Tooltip,
 4 |   TooltipContent,
 5 |   TooltipProvider,
 6 |   TooltipTrigger,
 7 | } from "@/components/ui/tooltip";
 8 | import React from "react";
 9 | import { motion, AnimatePresence } from "framer-motion";
10 | import { TooltipIconButton } from "../../tooltip-icon-button";
11 | 
12 | export function ThreadIdTooltip({ threadId }: { threadId: string }) {
13 |   const firstThreeChars = threadId.slice(0, 3);
14 |   const lastThreeChars = threadId.slice(-3);
15 | 
16 |   return (
17 |     <TooltipProvider>
18 |       <Tooltip>
19 |         <TooltipTrigger>
20 |           <p className="font-mono tracking-tighter text-[10px] leading-[12px] px-1 py-[2px] bg-gray-100 rounded-md">
21 |             {firstThreeChars}...{lastThreeChars}
22 |           </p>
23 |         </TooltipTrigger>
24 |         <TooltipContent>
25 |           <ThreadIdCopyable threadId={threadId} />
26 |         </TooltipContent>
27 |       </Tooltip>
28 |     </TooltipProvider>
29 |   );
30 | }
31 | 
32 | export function ThreadIdCopyable({
33 |   threadId,
34 |   showUUID = false,
35 | }: {
36 |   threadId: string;
37 |   showUUID?: boolean;
38 | }) {
39 |   const [copied, setCopied] = React.useState(false);
40 | 
41 |   const handleCopy = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {
42 |     e.stopPropagation();
43 |     navigator.clipboard.writeText(threadId);
44 |     setCopied(true);
45 |     setTimeout(() => setCopied(false), 2000);
46 |   };
47 | 
48 |   return (
49 |     <TooltipIconButton
50 |       onClick={(e) => handleCopy(e)}
51 |       variant="ghost"
52 |       tooltip="Copy thread ID"
53 |       className="flex flex-grow-0 gap-1 items-center p-1 rounded-md border-[1px] cursor-pointer hover:bg-gray-50/90 border-gray-200 w-fit"
54 |     >
55 |       <p className="font-mono text-xs">{showUUID ? threadId : "ID"}</p>
56 |       <AnimatePresence mode="wait" initial={false}>
57 |         {copied ? (
58 |           <motion.div
59 |             key="check"
60 |             initial={{ opacity: 0, scale: 0.8 }}
61 |             animate={{ opacity: 1, scale: 1 }}
62 |             exit={{ opacity: 0, scale: 0.8 }}
63 |             transition={{ duration: 0.15 }}
64 |           >
65 |             <CopyCheck className="text-green-500 max-w-3 w-3 max-h-3 h-3" />
66 |           </motion.div>
67 |         ) : (
68 |           <motion.div
69 |             key="copy"
70 |             initial={{ opacity: 0, scale: 0.8 }}
71 |             animate={{ opacity: 1, scale: 1 }}
72 |             exit={{ opacity: 0, scale: 0.8 }}
73 |             transition={{ duration: 0.15 }}
74 |           >
75 |             <Copy className="text-gray-500 max-w-3 w-3 max-h-3 h-3" />
76 |           </motion.div>
77 |         )}
78 |       </AnimatePresence>
79 |     </TooltipIconButton>
80 |   );
81 | }
82 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/agent-inbox/components/tool-call-table.tsx:
--------------------------------------------------------------------------------
 1 | import { ToolCall } from "@langchain/core/messages/tool";
 2 | import { unknownToPrettyDate } from "../utils";
 3 | 
 4 | export function ToolCallTable({ toolCall }: { toolCall: ToolCall }) {
 5 |   return (
 6 |     <div className="min-w-[300px] max-w-full border rounded-lg overflow-hidden">
 7 |       <table className="w-full border-collapse">
 8 |         <thead>
 9 |           <tr>
10 |             <th className="text-left px-2 py-0 bg-gray-100 text-sm" colSpan={2}>
11 |               {toolCall.name}
12 |             </th>
13 |           </tr>
14 |         </thead>
15 |         <tbody>
16 |           {Object.entries(toolCall.args).map(([key, value]) => {
17 |             let valueStr = "";
18 |             if (["string", "number"].includes(typeof value)) {
19 |               valueStr = value.toString();
20 |             }
21 | 
22 |             const date = unknownToPrettyDate(value);
23 |             if (date) {
24 |               valueStr = date;
25 |             }
26 | 
27 |             try {
28 |               valueStr = valueStr || JSON.stringify(value, null);
29 |             } catch (_) {
30 |               // failed to stringify, just assign an empty string
31 |               valueStr = "";
32 |             }
33 | 
34 |             return (
35 |               <tr key={key} className="border-t">
36 |                 <td className="px-2 py-1 font-medium w-1/3 text-xs">{key}</td>
37 |                 <td className="px-2 py-1 font-mono text-xs">{valueStr}</td>
38 |               </tr>
39 |             );
40 |           })}
41 |         </tbody>
42 |       </table>
43 |     </div>
44 |   );
45 | }
46 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/agent-inbox/index.tsx:
--------------------------------------------------------------------------------
 1 | import { StateView } from "./components/state-view";
 2 | import { ThreadActionsView } from "./components/thread-actions-view";
 3 | import { useState } from "react";
 4 | import { HumanInterrupt } from "@langchain/langgraph/prebuilt";
 5 | import { useStreamContext } from "@/providers/Stream";
 6 | 
 7 | interface ThreadViewProps {
 8 |   interrupt: HumanInterrupt | HumanInterrupt[];
 9 | }
10 | 
11 | export function ThreadView({ interrupt }: ThreadViewProps) {
12 |   const interruptObj = Array.isArray(interrupt) ? interrupt[0] : interrupt;
13 |   const thread = useStreamContext();
14 |   const [showDescription, setShowDescription] = useState(false);
15 |   const [showState, setShowState] = useState(false);
16 |   const showSidePanel = showDescription || showState;
17 | 
18 |   const handleShowSidePanel = (
19 |     showState: boolean,
20 |     showDescription: boolean,
21 |   ) => {
22 |     if (showState && showDescription) {
23 |       console.error("Cannot show both state and description");
24 |       return;
25 |     }
26 |     if (showState) {
27 |       setShowDescription(false);
28 |       setShowState(true);
29 |     } else if (showDescription) {
30 |       setShowState(false);
31 |       setShowDescription(true);
32 |     } else {
33 |       setShowState(false);
34 |       setShowDescription(false);
35 |     }
36 |   };
37 | 
38 |   return (
39 |     <div className="flex flex-col lg:flex-row w-full h-[80vh] p-8 bg-gray-50/50 rounded-2xl overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent">
40 |       {showSidePanel ? (
41 |         <StateView
42 |           handleShowSidePanel={handleShowSidePanel}
43 |           description={interruptObj.description}
44 |           values={thread.values}
45 |           view={showState ? "state" : "description"}
46 |         />
47 |       ) : (
48 |         <ThreadActionsView
49 |           interrupt={interruptObj}
50 |           handleShowSidePanel={handleShowSidePanel}
51 |           showState={showState}
52 |           showDescription={showDescription}
53 |         />
54 |       )}
55 |     </div>
56 |   );
57 | }
58 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/agent-inbox/types.ts:
--------------------------------------------------------------------------------
 1 | import { BaseMessage } from "@langchain/core/messages";
 2 | import { Thread, ThreadStatus } from "@langchain/langgraph-sdk";
 3 | import { HumanInterrupt, HumanResponse } from "@langchain/langgraph/prebuilt";
 4 | 
 5 | export type HumanResponseWithEdits = HumanResponse &
 6 |   (
 7 |     | { acceptAllowed?: false; editsMade?: never }
 8 |     | { acceptAllowed?: true; editsMade?: boolean }
 9 |   );
10 | 
11 | export type Email = {
12 |   id: string;
13 |   thread_id: string;
14 |   from_email: string;
15 |   to_email: string;
16 |   subject: string;
17 |   page_content: string;
18 |   send_time: string | undefined;
19 |   read?: boolean;
20 |   status?: "in-queue" | "processing" | "hitl" | "done";
21 | };
22 | 
23 | export interface ThreadValues {
24 |   email: Email;
25 |   messages: BaseMessage[];
26 |   triage: {
27 |     logic: string;
28 |     response: string;
29 |   };
30 | }
31 | 
32 | export type ThreadData<
33 |   ThreadValues extends Record<string, any> = Record<string, any>,
34 | > = {
35 |   thread: Thread<ThreadValues>;
36 | } & (
37 |   | {
38 |       status: "interrupted";
39 |       interrupts: HumanInterrupt[] | undefined;
40 |     }
41 |   | {
42 |       status: "idle" | "busy" | "error";
43 |       interrupts?: never;
44 |     }
45 | );
46 | 
47 | export type ThreadStatusWithAll = ThreadStatus | "all";
48 | 
49 | export type SubmitType = "accept" | "response" | "edit";
50 | 
51 | export interface AgentInbox {
52 |   /**
53 |    * A unique identifier for the inbox.
54 |    */
55 |   id: string;
56 |   /**
57 |    * The ID of the graph.
58 |    */
59 |   graphId: string;
60 |   /**
61 |    * The URL of the deployment. Either a localhost URL, or a deployment URL.
62 |    */
63 |   deploymentUrl: string;
64 |   /**
65 |    * Optional name for the inbox, used in the UI to label the inbox.
66 |    */
67 |   name?: string;
68 |   /**
69 |    * Whether or not the inbox is selected.
70 |    */
71 |   selected: boolean;
72 | }
73 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/history/index.tsx:
--------------------------------------------------------------------------------
  1 | import { Button } from "@/components/ui/button";
  2 | import { useThreads } from "@/providers/Thread";
  3 | import { Thread } from "@langchain/langgraph-sdk";
  4 | import { useEffect } from "react";
  5 | 
  6 | import { getContentString } from "../utils";
  7 | import { useQueryState, parseAsBoolean } from "nuqs";
  8 | import {
  9 |   Sheet,
 10 |   SheetContent,
 11 |   SheetHeader,
 12 |   SheetTitle,
 13 | } from "@/components/ui/sheet";
 14 | import { Skeleton } from "@/components/ui/skeleton";
 15 | import { PanelRightOpen, PanelRightClose } from "lucide-react";
 16 | import { useMediaQuery } from "@/hooks/useMediaQuery";
 17 | 
 18 | function ThreadList({
 19 |   threads,
 20 |   onThreadClick,
 21 | }: {
 22 |   threads: Thread[];
 23 |   onThreadClick?: (threadId: string) => void;
 24 | }) {
 25 |   const [threadId, setThreadId] = useQueryState("threadId");
 26 | 
 27 |   return (
 28 |     <div className="h-full flex flex-col w-full gap-2 items-start justify-start overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent">
 29 |       {threads.map((t) => {
 30 |         let itemText = t.thread_id;
 31 |         if (
 32 |           typeof t.values === "object" &&
 33 |           t.values &&
 34 |           "messages" in t.values &&
 35 |           Array.isArray(t.values.messages) &&
 36 |           t.values.messages?.length > 0
 37 |         ) {
 38 |           const firstMessage = t.values.messages[0];
 39 |           itemText = getContentString(firstMessage.content);
 40 |         }
 41 |         return (
 42 |           <div key={t.thread_id} className="w-full px-1">
 43 |             <Button
 44 |               variant="ghost"
 45 |               className="text-left items-start justify-start font-normal w-[280px]"
 46 |               onClick={(e) => {
 47 |                 e.preventDefault();
 48 |                 onThreadClick?.(t.thread_id);
 49 |                 if (t.thread_id === threadId) return;
 50 |                 setThreadId(t.thread_id);
 51 |               }}
 52 |             >
 53 |               <p className="truncate text-ellipsis">{itemText}</p>
 54 |             </Button>
 55 |           </div>
 56 |         );
 57 |       })}
 58 |     </div>
 59 |   );
 60 | }
 61 | 
 62 | function ThreadHistoryLoading() {
 63 |   return (
 64 |     <div className="h-full flex flex-col w-full gap-2 items-start justify-start overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent">
 65 |       {Array.from({ length: 30 }).map((_, i) => (
 66 |         <Skeleton key={`skeleton-${i}`} className="w-[280px] h-10" />
 67 |       ))}
 68 |     </div>
 69 |   );
 70 | }
 71 | 
 72 | export default function ThreadHistory() {
 73 |   const isLargeScreen = useMediaQuery("(min-width: 1024px)");
 74 |   const [chatHistoryOpen, setChatHistoryOpen] = useQueryState(
 75 |     "chatHistoryOpen",
 76 |     parseAsBoolean.withDefault(false),
 77 |   );
 78 | 
 79 |   const { getThreads, threads, setThreads, threadsLoading, setThreadsLoading } =
 80 |     useThreads();
 81 | 
 82 |   useEffect(() => {
 83 |     if (typeof window === "undefined") return;
 84 |     setThreadsLoading(true);
 85 |     getThreads()
 86 |       .then(setThreads)
 87 |       .catch(console.error)
 88 |       .finally(() => setThreadsLoading(false));
 89 |   }, []);
 90 | 
 91 |   return (
 92 |     <>
 93 |       <div className="hidden lg:flex flex-col border-r-[1px] border-slate-300 items-start justify-start gap-6 h-screen w-[300px] shrink-0 shadow-inner-right">
 94 |         <div className="flex items-center justify-between w-full pt-1.5 px-4">
 95 |           <Button
 96 |             className="hover:bg-gray-100"
 97 |             variant="ghost"
 98 |             onClick={() => setChatHistoryOpen((p) => !p)}
 99 |           >
100 |             {chatHistoryOpen ? (
101 |               <PanelRightOpen className="size-5" />
102 |             ) : (
103 |               <PanelRightClose className="size-5" />
104 |             )}
105 |           </Button>
106 |           <h1 className="text-xl font-semibold tracking-tight">
107 |             Thread History
108 |           </h1>
109 |         </div>
110 |         {threadsLoading ? (
111 |           <ThreadHistoryLoading />
112 |         ) : (
113 |           <ThreadList threads={threads} />
114 |         )}
115 |       </div>
116 |       <div className="lg:hidden">
117 |         <Sheet
118 |           open={!!chatHistoryOpen && !isLargeScreen}
119 |           onOpenChange={(open) => {
120 |             if (isLargeScreen) return;
121 |             setChatHistoryOpen(open);
122 |           }}
123 |         >
124 |           <SheetContent side="left" className="lg:hidden flex">
125 |             <SheetHeader>
126 |               <SheetTitle>Thread History</SheetTitle>
127 |             </SheetHeader>
128 |             <ThreadList
129 |               threads={threads}
130 |               onThreadClick={() => setChatHistoryOpen((o) => !o)}
131 |             />
132 |           </SheetContent>
133 |         </Sheet>
134 |       </div>
135 |     </>
136 |   );
137 | }
138 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/markdown-styles.css:
--------------------------------------------------------------------------------
 1 | /* Base markdown styles */
 2 | .markdown-content code:not(pre code) {
 3 |   background-color: rgba(0, 0, 0, 0.05);
 4 |   padding: 0.2em 0.4em;
 5 |   border-radius: 3px;
 6 |   font-size: 0.9em;
 7 | }
 8 | 
 9 | .markdown-content a {
10 |   color: #0070f3;
11 |   text-decoration: none;
12 | }
13 | 
14 | .markdown-content a:hover {
15 |   text-decoration: underline;
16 | }
17 | 
18 | .markdown-content blockquote {
19 |   border-left: 4px solid #ddd;
20 |   padding-left: 1rem;
21 |   color: #666;
22 | }
23 | 
24 | .markdown-content pre {
25 |   overflow-x: auto;
26 | }
27 | 
28 | .markdown-content table {
29 |   border-collapse: collapse;
30 |   width: 100%;
31 | }
32 | 
33 | .markdown-content th,
34 | .markdown-content td {
35 |   border: 1px solid #ddd;
36 |   padding: 8px;
37 | }
38 | 
39 | .markdown-content th {
40 |   background-color: #f2f2f2;
41 | }
42 | 
43 | .markdown-content tr:nth-child(even) {
44 |   background-color: #f9f9f9;
45 | }
46 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/messages/human.tsx:
--------------------------------------------------------------------------------
  1 | import { useStreamContext } from "@/providers/Stream";
  2 | import { Message } from "@langchain/langgraph-sdk";
  3 | import { useState } from "react";
  4 | import { getContentString } from "../utils";
  5 | import { cn } from "@/lib/utils";
  6 | import { Textarea } from "@/components/ui/textarea";
  7 | import { BranchSwitcher, CommandBar } from "./shared";
  8 | 
  9 | function EditableContent({
 10 |   value,
 11 |   setValue,
 12 |   onSubmit,
 13 | }: {
 14 |   value: string;
 15 |   setValue: React.Dispatch<React.SetStateAction<string>>;
 16 |   onSubmit: () => void;
 17 | }) {
 18 |   const handleKeyDown = (e: React.KeyboardEvent) => {
 19 |     if ((e.metaKey || e.ctrlKey) && e.key === "Enter") {
 20 |       e.preventDefault();
 21 |       onSubmit();
 22 |     }
 23 |   };
 24 | 
 25 |   return (
 26 |     <Textarea
 27 |       value={value}
 28 |       onChange={(e) => setValue(e.target.value)}
 29 |       onKeyDown={handleKeyDown}
 30 |       className="focus-visible:ring-0"
 31 |     />
 32 |   );
 33 | }
 34 | 
 35 | export function HumanMessage({
 36 |   message,
 37 |   isLoading,
 38 | }: {
 39 |   message: Message;
 40 |   isLoading: boolean;
 41 | }) {
 42 |   const thread = useStreamContext();
 43 |   const meta = thread.getMessagesMetadata(message);
 44 |   const parentCheckpoint = meta?.firstSeenState?.parent_checkpoint;
 45 | 
 46 |   const [isEditing, setIsEditing] = useState(false);
 47 |   const [value, setValue] = useState("");
 48 |   const contentString = getContentString(message.content);
 49 | 
 50 |   const handleSubmitEdit = () => {
 51 |     setIsEditing(false);
 52 | 
 53 |     const newMessage: Message = { type: "human", content: value };
 54 |     thread.submit(
 55 |       { messages: [newMessage] },
 56 |       {
 57 |         checkpoint: parentCheckpoint,
 58 |         streamMode: ["values"],
 59 |         optimisticValues: (prev) => {
 60 |           const values = meta?.firstSeenState?.values;
 61 |           if (!values) return prev;
 62 | 
 63 |           return {
 64 |             ...values,
 65 |             messages: [...(values.messages ?? []), newMessage],
 66 |           };
 67 |         },
 68 |       },
 69 |     );
 70 |   };
 71 | 
 72 |   return (
 73 |     <div
 74 |       className={cn(
 75 |         "flex items-center ml-auto gap-2 group",
 76 |         isEditing && "w-full max-w-xl",
 77 |       )}
 78 |     >
 79 |       <div className={cn("flex flex-col gap-2", isEditing && "w-full")}>
 80 |         {isEditing ? (
 81 |           <EditableContent
 82 |             value={value}
 83 |             setValue={setValue}
 84 |             onSubmit={handleSubmitEdit}
 85 |           />
 86 |         ) : (
 87 |           <p className="px-4 py-2 rounded-3xl bg-muted w-fit ml-auto whitespace-pre-wrap">
 88 |             {contentString}
 89 |           </p>
 90 |         )}
 91 | 
 92 |         <div
 93 |           className={cn(
 94 |             "flex gap-2 items-center ml-auto transition-opacity",
 95 |             "opacity-0 group-focus-within:opacity-100 group-hover:opacity-100",
 96 |             isEditing && "opacity-100",
 97 |           )}
 98 |         >
 99 |           <BranchSwitcher
100 |             branch={meta?.branch}
101 |             branchOptions={meta?.branchOptions}
102 |             onSelect={(branch) => thread.setBranch(branch)}
103 |             isLoading={isLoading}
104 |           />
105 |           <CommandBar
106 |             isLoading={isLoading}
107 |             content={contentString}
108 |             isEditing={isEditing}
109 |             setIsEditing={(c) => {
110 |               if (c) {
111 |                 setValue(contentString);
112 |               }
113 |               setIsEditing(c);
114 |             }}
115 |             handleSubmitEdit={handleSubmitEdit}
116 |             isHumanMessage={true}
117 |           />
118 |         </div>
119 |       </div>
120 |     </div>
121 |   );
122 | }
123 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/syntax-highlighter.tsx:
--------------------------------------------------------------------------------
 1 | import { PrismAsyncLight as SyntaxHighlighterPrism } from "react-syntax-highlighter";
 2 | import tsx from "react-syntax-highlighter/dist/esm/languages/prism/tsx";
 3 | import python from "react-syntax-highlighter/dist/esm/languages/prism/python";
 4 | import { coldarkDark } from "react-syntax-highlighter/dist/cjs/styles/prism";
 5 | import { FC } from "react";
 6 | 
 7 | // Register languages you want to support
 8 | SyntaxHighlighterPrism.registerLanguage("js", tsx);
 9 | SyntaxHighlighterPrism.registerLanguage("jsx", tsx);
10 | SyntaxHighlighterPrism.registerLanguage("ts", tsx);
11 | SyntaxHighlighterPrism.registerLanguage("tsx", tsx);
12 | SyntaxHighlighterPrism.registerLanguage("python", python);
13 | 
14 | interface SyntaxHighlighterProps {
15 |   children: string;
16 |   language: string;
17 |   className?: string;
18 | }
19 | 
20 | export const SyntaxHighlighter: FC<SyntaxHighlighterProps> = ({
21 |   children,
22 |   language,
23 |   className,
24 | }) => {
25 |   return (
26 |     <SyntaxHighlighterPrism
27 |       language={language}
28 |       style={coldarkDark}
29 |       customStyle={{
30 |         margin: 0,
31 |         width: "100%",
32 |         background: "transparent",
33 |         padding: "1.5rem 1rem",
34 |       }}
35 |       className={className}
36 |     >
37 |       {children}
38 |     </SyntaxHighlighterPrism>
39 |   );
40 | };
41 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/tooltip-icon-button.tsx:
--------------------------------------------------------------------------------
 1 | "use client";
 2 | 
 3 | import { forwardRef } from "react";
 4 | 
 5 | import {
 6 |   Tooltip,
 7 |   TooltipContent,
 8 |   TooltipProvider,
 9 |   TooltipTrigger,
10 | } from "@/components/ui/tooltip";
11 | import { Button, ButtonProps } from "@/components/ui/button";
12 | import { cn } from "@/lib/utils";
13 | 
14 | export type TooltipIconButtonProps = ButtonProps & {
15 |   tooltip: string;
16 |   side?: "top" | "bottom" | "left" | "right";
17 | };
18 | 
19 | export const TooltipIconButton = forwardRef<
20 |   HTMLButtonElement,
21 |   TooltipIconButtonProps
22 | >(({ children, tooltip, side = "bottom", className, ...rest }, ref) => {
23 |   return (
24 |     <TooltipProvider>
25 |       <Tooltip>
26 |         <TooltipTrigger asChild>
27 |           <Button
28 |             variant="ghost"
29 |             size="icon"
30 |             {...rest}
31 |             className={cn("size-6 p-1", className)}
32 |             ref={ref}
33 |           >
34 |             {children}
35 |             <span className="sr-only">{tooltip}</span>
36 |           </Button>
37 |         </TooltipTrigger>
38 |         <TooltipContent side={side}>{tooltip}</TooltipContent>
39 |       </Tooltip>
40 |     </TooltipProvider>
41 |   );
42 | });
43 | 
44 | TooltipIconButton.displayName = "TooltipIconButton";
45 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/thread/utils.ts:
--------------------------------------------------------------------------------
 1 | import type { Message } from "@langchain/langgraph-sdk";
 2 | 
 3 | export function getContentString(content: Message["content"]): string {
 4 |   if (typeof content === "string") return content;
 5 |   const texts = content
 6 |     .filter((c): c is { type: "text"; text: string } => c.type === "text")
 7 |     .map((c) => c.text);
 8 |   return texts.join(" ");
 9 | }
10 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/avatar.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as AvatarPrimitive from "@radix-ui/react-avatar";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Avatar({
 7 |   className,
 8 |   ...props
 9 | }: React.ComponentProps<typeof AvatarPrimitive.Root>) {
10 |   return (
11 |     <AvatarPrimitive.Root
12 |       data-slot="avatar"
13 |       className={cn(
14 |         "relative flex size-8 shrink-0 overflow-hidden rounded-full",
15 |         className,
16 |       )}
17 |       {...props}
18 |     />
19 |   );
20 | }
21 | 
22 | function AvatarImage({
23 |   className,
24 |   ...props
25 | }: React.ComponentProps<typeof AvatarPrimitive.Image>) {
26 |   return (
27 |     <AvatarPrimitive.Image
28 |       data-slot="avatar-image"
29 |       className={cn("aspect-square size-full", className)}
30 |       {...props}
31 |     />
32 |   );
33 | }
34 | 
35 | function AvatarFallback({
36 |   className,
37 |   ...props
38 | }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
39 |   return (
40 |     <AvatarPrimitive.Fallback
41 |       data-slot="avatar-fallback"
42 |       className={cn(
43 |         "bg-muted flex size-full items-center justify-center rounded-full",
44 |         className,
45 |       )}
46 |       {...props}
47 |     />
48 |   );
49 | }
50 | 
51 | export { Avatar, AvatarImage, AvatarFallback };
52 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/button.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import { Slot } from "@radix-ui/react-slot";
 3 | import { cva, type VariantProps } from "class-variance-authority";
 4 | 
 5 | import { cn } from "@/lib/utils";
 6 | 
 7 | const buttonVariants = cva(
 8 |   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
 9 |   {
10 |     variants: {
11 |       variant: {
12 |         default:
13 |           "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
14 |         destructive:
15 |           "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
16 |         outline:
17 |           "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
18 |         secondary:
19 |           "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
20 |         ghost: "hover:bg-accent hover:text-accent-foreground",
21 |         link: "text-primary underline-offset-4 hover:underline",
22 |         brand: "bg-[#2F6868] hover:bg-[#2F6868]/90 border-[#2F6868] text-white",
23 |       },
24 |       size: {
25 |         default: "h-9 px-4 py-2 has-[>svg]:px-3",
26 |         sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
27 |         lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
28 |         icon: "size-9",
29 |       },
30 |     },
31 |     defaultVariants: {
32 |       variant: "default",
33 |       size: "default",
34 |     },
35 |   },
36 | );
37 | 
38 | type ButtonProps = React.ComponentProps<"button"> &
39 |   VariantProps<typeof buttonVariants> & {
40 |     asChild?: boolean;
41 |   };
42 | 
43 | function Button({
44 |   className,
45 |   variant,
46 |   size,
47 |   asChild = false,
48 |   ...props
49 | }: ButtonProps) {
50 |   const Comp = asChild ? Slot : "button";
51 | 
52 |   return (
53 |     <Comp
54 |       data-slot="button"
55 |       className={cn(buttonVariants({ variant, size, className }))}
56 |       {...props}
57 |     />
58 |   );
59 | }
60 | 
61 | export { Button, buttonVariants, type ButtonProps };
62 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/card.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | 
 3 | import { cn } from "@/lib/utils";
 4 | 
 5 | function Card({ className, ...props }: React.ComponentProps<"div">) {
 6 |   return (
 7 |     <div
 8 |       data-slot="card"
 9 |       className={cn(
10 |         "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
11 |         className,
12 |       )}
13 |       {...props}
14 |     />
15 |   );
16 | }
17 | 
18 | function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
19 |   return (
20 |     <div
21 |       data-slot="card-header"
22 |       className={cn("flex flex-col gap-1.5 px-6", className)}
23 |       {...props}
24 |     />
25 |   );
26 | }
27 | 
28 | function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
29 |   return (
30 |     <div
31 |       data-slot="card-title"
32 |       className={cn("leading-none font-semibold", className)}
33 |       {...props}
34 |     />
35 |   );
36 | }
37 | 
38 | function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
39 |   return (
40 |     <div
41 |       data-slot="card-description"
42 |       className={cn("text-muted-foreground text-sm", className)}
43 |       {...props}
44 |     />
45 |   );
46 | }
47 | 
48 | function CardContent({ className, ...props }: React.ComponentProps<"div">) {
49 |   return (
50 |     <div
51 |       data-slot="card-content"
52 |       className={cn("px-6", className)}
53 |       {...props}
54 |     />
55 |   );
56 | }
57 | 
58 | function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
59 |   return (
60 |     <div
61 |       data-slot="card-footer"
62 |       className={cn("flex items-center px-6", className)}
63 |       {...props}
64 |     />
65 |   );
66 | }
67 | 
68 | export {
69 |   Card,
70 |   CardHeader,
71 |   CardFooter,
72 |   CardTitle,
73 |   CardDescription,
74 |   CardContent,
75 | };
76 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/input.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | 
 3 | import { cn } from "@/lib/utils";
 4 | 
 5 | function Input({ className, type, ...props }: React.ComponentProps<"input">) {
 6 |   return (
 7 |     <input
 8 |       type={type}
 9 |       data-slot="input"
10 |       className={cn(
11 |         "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
12 |         "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
13 |         className,
14 |       )}
15 |       {...props}
16 |     />
17 |   );
18 | }
19 | 
20 | export { Input };
21 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/label.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as LabelPrimitive from "@radix-ui/react-label";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Label({
 7 |   className,
 8 |   ...props
 9 | }: React.ComponentProps<typeof LabelPrimitive.Root>) {
10 |   return (
11 |     <LabelPrimitive.Root
12 |       data-slot="label"
13 |       className={cn(
14 |         "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
15 |         className,
16 |       )}
17 |       {...props}
18 |     />
19 |   );
20 | }
21 | 
22 | export { Label };
23 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/password-input.tsx:
--------------------------------------------------------------------------------
 1 | "use client";
 2 | 
 3 | import * as React from "react";
 4 | 
 5 | import { cn } from "@/lib/utils";
 6 | import { Input } from "./input";
 7 | import { Button } from "./button";
 8 | import { EyeIcon, EyeOffIcon } from "lucide-react";
 9 | 
10 | export const PasswordInput = React.forwardRef<
11 |   HTMLInputElement,
12 |   React.ComponentProps<"input">
13 | >(({ className, ...props }, ref) => {
14 |   const [showPassword, setShowPassword] = React.useState(false);
15 | 
16 |   return (
17 |     <div className="relative w-full">
18 |       <Input
19 |         type={showPassword ? "text" : "password"}
20 |         className={cn("hide-password-toggle pr-10", className)}
21 |         ref={ref}
22 |         {...props}
23 |       />
24 |       <Button
25 |         type="button"
26 |         variant="ghost"
27 |         size="sm"
28 |         className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
29 |         onClick={() => setShowPassword((prev) => !prev)}
30 |       >
31 |         {showPassword ? (
32 |           <EyeIcon className="h-4 w-4" aria-hidden="true" />
33 |         ) : (
34 |           <EyeOffIcon className="h-4 w-4" aria-hidden="true" />
35 |         )}
36 |         <span className="sr-only">
37 |           {showPassword ? "Hide password" : "Show password"}
38 |         </span>
39 |       </Button>
40 | 
41 |       {/* hides browsers password toggles */}
42 |       <style>{`
43 | 					.hide-password-toggle::-ms-reveal,
44 | 					.hide-password-toggle::-ms-clear {
45 | 						visibility: hidden;
46 | 						pointer-events: none;
47 | 						display: none;
48 | 					}
49 | 				`}</style>
50 |     </div>
51 |   );
52 | });
53 | 
54 | PasswordInput.displayName = "PasswordInput";
55 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/separator.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as SeparatorPrimitive from "@radix-ui/react-separator";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Separator({
 7 |   className,
 8 |   orientation = "horizontal",
 9 |   decorative = true,
10 |   ...props
11 | }: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
12 |   return (
13 |     <SeparatorPrimitive.Root
14 |       data-slot="separator-root"
15 |       decorative={decorative}
16 |       orientation={orientation}
17 |       className={cn(
18 |         "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
19 |         className,
20 |       )}
21 |       {...props}
22 |     />
23 |   );
24 | }
25 | 
26 | export { Separator };
27 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/sheet.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react";
  2 | import * as SheetPrimitive from "@radix-ui/react-dialog";
  3 | import { XIcon } from "lucide-react";
  4 | 
  5 | import { cn } from "@/lib/utils";
  6 | 
  7 | function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  8 |   return <SheetPrimitive.Root data-slot="sheet" {...props} />;
  9 | }
 10 | 
 11 | function SheetTrigger({
 12 |   ...props
 13 | }: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
 14 |   return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />;
 15 | }
 16 | 
 17 | function SheetClose({
 18 |   ...props
 19 | }: React.ComponentProps<typeof SheetPrimitive.Close>) {
 20 |   return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
 21 | }
 22 | 
 23 | function SheetPortal({
 24 |   ...props
 25 | }: React.ComponentProps<typeof SheetPrimitive.Portal>) {
 26 |   return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
 27 | }
 28 | 
 29 | function SheetOverlay({
 30 |   className,
 31 |   ...props
 32 | }: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
 33 |   return (
 34 |     <SheetPrimitive.Overlay
 35 |       data-slot="sheet-overlay"
 36 |       className={cn(
 37 |         "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
 38 |         className,
 39 |       )}
 40 |       {...props}
 41 |     />
 42 |   );
 43 | }
 44 | 
 45 | function SheetContent({
 46 |   className,
 47 |   children,
 48 |   side = "right",
 49 |   ...props
 50 | }: React.ComponentProps<typeof SheetPrimitive.Content> & {
 51 |   side?: "top" | "right" | "bottom" | "left";
 52 | }) {
 53 |   return (
 54 |     <SheetPortal>
 55 |       <SheetOverlay />
 56 |       <SheetPrimitive.Content
 57 |         data-slot="sheet-content"
 58 |         className={cn(
 59 |           "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
 60 |           side === "right" &&
 61 |             "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
 62 |           side === "left" &&
 63 |             "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
 64 |           side === "top" &&
 65 |             "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
 66 |           side === "bottom" &&
 67 |             "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
 68 |           className,
 69 |         )}
 70 |         {...props}
 71 |       >
 72 |         {children}
 73 |         <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
 74 |           <XIcon className="size-4" />
 75 |           <span className="sr-only">Close</span>
 76 |         </SheetPrimitive.Close>
 77 |       </SheetPrimitive.Content>
 78 |     </SheetPortal>
 79 |   );
 80 | }
 81 | 
 82 | function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
 83 |   return (
 84 |     <div
 85 |       data-slot="sheet-header"
 86 |       className={cn("flex flex-col gap-1.5 p-4", className)}
 87 |       {...props}
 88 |     />
 89 |   );
 90 | }
 91 | 
 92 | function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
 93 |   return (
 94 |     <div
 95 |       data-slot="sheet-footer"
 96 |       className={cn("mt-auto flex flex-col gap-2 p-4", className)}
 97 |       {...props}
 98 |     />
 99 |   );
100 | }
101 | 
102 | function SheetTitle({
103 |   className,
104 |   ...props
105 | }: React.ComponentProps<typeof SheetPrimitive.Title>) {
106 |   return (
107 |     <SheetPrimitive.Title
108 |       data-slot="sheet-title"
109 |       className={cn("text-foreground font-semibold", className)}
110 |       {...props}
111 |     />
112 |   );
113 | }
114 | 
115 | function SheetDescription({
116 |   className,
117 |   ...props
118 | }: React.ComponentProps<typeof SheetPrimitive.Description>) {
119 |   return (
120 |     <SheetPrimitive.Description
121 |       data-slot="sheet-description"
122 |       className={cn("text-muted-foreground text-sm", className)}
123 |       {...props}
124 |     />
125 |   );
126 | }
127 | 
128 | export {
129 |   Sheet,
130 |   SheetTrigger,
131 |   SheetClose,
132 |   SheetContent,
133 |   SheetHeader,
134 |   SheetFooter,
135 |   SheetTitle,
136 |   SheetDescription,
137 | };
138 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/skeleton.tsx:
--------------------------------------------------------------------------------
 1 | import { cn } from "@/lib/utils";
 2 | 
 3 | function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
 4 |   return (
 5 |     <div
 6 |       data-slot="skeleton"
 7 |       className={cn("bg-primary/10 animate-pulse rounded-md", className)}
 8 |       {...props}
 9 |     />
10 |   );
11 | }
12 | 
13 | export { Skeleton };
14 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/sonner.tsx:
--------------------------------------------------------------------------------
 1 | import { useTheme } from "next-themes";
 2 | import { Toaster as Sonner, ToasterProps } from "sonner";
 3 | 
 4 | const Toaster = ({ ...props }: ToasterProps) => {
 5 |   const { theme = "system" } = useTheme();
 6 | 
 7 |   return (
 8 |     <Sonner
 9 |       theme={theme as ToasterProps["theme"]}
10 |       className="toaster group"
11 |       toastOptions={{
12 |         classNames: {
13 |           toast:
14 |             "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
15 |           description: "group-[.toast]:text-muted-foreground",
16 |           actionButton:
17 |             "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
18 |           cancelButton:
19 |             "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
20 |         },
21 |       }}
22 |       {...props}
23 |     />
24 |   );
25 | };
26 | 
27 | export { Toaster };
28 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/switch.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as SwitchPrimitive from "@radix-ui/react-switch";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function Switch({
 7 |   className,
 8 |   ...props
 9 | }: React.ComponentProps<typeof SwitchPrimitive.Root>) {
10 |   return (
11 |     <SwitchPrimitive.Root
12 |       data-slot="switch"
13 |       className={cn(
14 |         "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
15 |         className,
16 |       )}
17 |       {...props}
18 |     >
19 |       <SwitchPrimitive.Thumb
20 |         data-slot="switch-thumb"
21 |         className={cn(
22 |           "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
23 |         )}
24 |       />
25 |     </SwitchPrimitive.Root>
26 |   );
27 | }
28 | 
29 | export { Switch };
30 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/textarea.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | 
 3 | import { cn } from "@/lib/utils";
 4 | 
 5 | function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
 6 |   return (
 7 |     <textarea
 8 |       data-slot="textarea"
 9 |       className={cn(
10 |         "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
11 |         className,
12 |       )}
13 |       {...props}
14 |     />
15 |   );
16 | }
17 | 
18 | export { Textarea };
19 | 


--------------------------------------------------------------------------------
/templates/vite/src/components/ui/tooltip.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react";
 2 | import * as TooltipPrimitive from "@radix-ui/react-tooltip";
 3 | 
 4 | import { cn } from "@/lib/utils";
 5 | 
 6 | function TooltipProvider({
 7 |   delayDuration = 0,
 8 |   ...props
 9 | }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
10 |   return (
11 |     <TooltipPrimitive.Provider
12 |       data-slot="tooltip-provider"
13 |       delayDuration={delayDuration}
14 |       {...props}
15 |     />
16 |   );
17 | }
18 | 
19 | function Tooltip({
20 |   ...props
21 | }: React.ComponentProps<typeof TooltipPrimitive.Root>) {
22 |   return (
23 |     <TooltipProvider>
24 |       <TooltipPrimitive.Root data-slot="tooltip" {...props} />
25 |     </TooltipProvider>
26 |   );
27 | }
28 | 
29 | function TooltipTrigger({
30 |   ...props
31 | }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
32 |   return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />;
33 | }
34 | 
35 | function TooltipContent({
36 |   className,
37 |   sideOffset = 0,
38 |   children,
39 |   ...props
40 | }: React.ComponentProps<typeof TooltipPrimitive.Content>) {
41 |   return (
42 |     <TooltipPrimitive.Portal>
43 |       <TooltipPrimitive.Content
44 |         data-slot="tooltip-content"
45 |         sideOffset={sideOffset}
46 |         className={cn(
47 |           "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
48 |           className,
49 |         )}
50 |         {...props}
51 |       >
52 |         {children}
53 |         <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
54 |       </TooltipPrimitive.Content>
55 |     </TooltipPrimitive.Portal>
56 |   );
57 | }
58 | 
59 | export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
60 | 


--------------------------------------------------------------------------------
/templates/vite/src/hooks/useMediaQuery.tsx:
--------------------------------------------------------------------------------
 1 | import { useEffect, useState } from "react";
 2 | 
 3 | export function useMediaQuery(query: string) {
 4 |   const [matches, setMatches] = useState(false);
 5 | 
 6 |   useEffect(() => {
 7 |     const media = window.matchMedia(query);
 8 |     setMatches(media.matches);
 9 | 
10 |     const listener = (e: MediaQueryListEvent) => setMatches(e.matches);
11 |     media.addEventListener("change", listener);
12 |     return () => media.removeEventListener("change", listener);
13 |   }, [query]);
14 | 
15 |   return matches;
16 | }
17 | 


--------------------------------------------------------------------------------
/templates/vite/src/lib/agent-inbox-interrupt.ts:
--------------------------------------------------------------------------------
 1 | import { HumanInterrupt } from "@langchain/langgraph/prebuilt";
 2 | 
 3 | export function isAgentInboxInterruptSchema(
 4 |   value: unknown,
 5 | ): value is HumanInterrupt | HumanInterrupt[] {
 6 |   const valueAsObject = Array.isArray(value) ? value[0] : value;
 7 |   return (
 8 |     valueAsObject &&
 9 |     typeof valueAsObject === "object" &&
10 |     "action_request" in valueAsObject &&
11 |     typeof valueAsObject.action_request === "object" &&
12 |     "config" in valueAsObject &&
13 |     typeof valueAsObject.config === "object" &&
14 |     "allow_respond" in valueAsObject.config &&
15 |     "allow_accept" in valueAsObject.config &&
16 |     "allow_edit" in valueAsObject.config &&
17 |     "allow_ignore" in valueAsObject.config
18 |   );
19 | }
20 | 


--------------------------------------------------------------------------------
/templates/vite/src/lib/api-key.tsx:
--------------------------------------------------------------------------------
 1 | export function getApiKey(): string | null {
 2 |   try {
 3 |     if (typeof window === "undefined") return null;
 4 |     return window.localStorage.getItem("lg:chat:apiKey") ?? null;
 5 |   } catch {
 6 |     // no-op
 7 |   }
 8 | 
 9 |   return null;
10 | }
11 | 


--------------------------------------------------------------------------------
/templates/vite/src/lib/ensure-tool-responses.ts:
--------------------------------------------------------------------------------
 1 | import { v4 as uuidv4 } from "uuid";
 2 | import { Message, ToolMessage } from "@langchain/langgraph-sdk";
 3 | 
 4 | export const DO_NOT_RENDER_ID_PREFIX = "do-not-render-";
 5 | 
 6 | export function ensureToolCallsHaveResponses(messages: Message[]): Message[] {
 7 |   const newMessages: ToolMessage[] = [];
 8 | 
 9 |   messages.forEach((message, index) => {
10 |     if (message.type !== "ai" || message.tool_calls?.length === 0) {
11 |       // If it's not an AI message, or it doesn't have tool calls, we can ignore.
12 |       return;
13 |     }
14 |     // If it has tool calls, ensure the message which follows this is a tool message
15 |     const followingMessage = messages[index + 1];
16 |     if (followingMessage && followingMessage.type === "tool") {
17 |       // Following message is a tool message, so we can ignore.
18 |       return;
19 |     }
20 | 
21 |     // Since the following message is not a tool message, we must create a new tool message
22 |     newMessages.push(
23 |       ...(message.tool_calls?.map((tc) => ({
24 |         type: "tool" as const,
25 |         tool_call_id: tc.id ?? "",
26 |         id: `${DO_NOT_RENDER_ID_PREFIX}${uuidv4()}`,
27 |         name: tc.name,
28 |         content: "Successfully handled tool call.",
29 |       })) ?? []),
30 |     );
31 |   });
32 | 
33 |   return newMessages;
34 | }
35 | 


--------------------------------------------------------------------------------
/templates/vite/src/lib/utils.ts:
--------------------------------------------------------------------------------
1 | import { clsx, type ClassValue } from "clsx";
2 | import { twMerge } from "tailwind-merge";
3 | 
4 | export function cn(...inputs: ClassValue[]) {
5 |   return twMerge(clsx(inputs));
6 | }
7 | 


--------------------------------------------------------------------------------
/templates/vite/src/main.tsx:
--------------------------------------------------------------------------------
 1 | import "./index.css";
 2 | import App from "./App.tsx";
 3 | import { createRoot } from "react-dom/client";
 4 | import { StreamProvider } from "./providers/Stream.tsx";
 5 | import { ThreadProvider } from "./providers/Thread.tsx";
 6 | import { Toaster } from "@/components/ui/sonner";
 7 | import { NuqsAdapter } from "nuqs/adapters/react-router/v6";
 8 | import { BrowserRouter } from "react-router-dom";
 9 | 
10 | createRoot(document.getElementById("root")!).render(
11 |   <BrowserRouter>
12 |     <NuqsAdapter>
13 |       <ThreadProvider>
14 |         <StreamProvider>
15 |           <App />
16 |         </StreamProvider>
17 |       </ThreadProvider>
18 |       <Toaster />
19 |     </NuqsAdapter>
20 |   </BrowserRouter>,
21 | );
22 | 


--------------------------------------------------------------------------------
/templates/vite/src/providers/Thread.tsx:
--------------------------------------------------------------------------------
 1 | import { validate } from "uuid";
 2 | import { getApiKey } from "@/lib/api-key";
 3 | import { Thread } from "@langchain/langgraph-sdk";
 4 | import { useQueryState } from "nuqs";
 5 | import {
 6 |   createContext,
 7 |   useContext,
 8 |   ReactNode,
 9 |   useCallback,
10 |   useState,
11 |   Dispatch,
12 |   SetStateAction,
13 | } from "react";
14 | import { createClient } from "./client";
15 | 
16 | interface ThreadContextType {
17 |   getThreads: () => Promise<Thread[]>;
18 |   threads: Thread[];
19 |   setThreads: Dispatch<SetStateAction<Thread[]>>;
20 |   threadsLoading: boolean;
21 |   setThreadsLoading: Dispatch<SetStateAction<boolean>>;
22 | }
23 | 
24 | const ThreadContext = createContext<ThreadContextType | undefined>(undefined);
25 | 
26 | function getThreadSearchMetadata(
27 |   assistantId: string,
28 | ): { graph_id: string } | { assistant_id: string } {
29 |   if (validate(assistantId)) {
30 |     return { assistant_id: assistantId };
31 |   } else {
32 |     return { graph_id: assistantId };
33 |   }
34 | }
35 | 
36 | export function ThreadProvider({ children }: { children: ReactNode }) {
37 |   const [apiUrl] = useQueryState("apiUrl");
38 |   const [assistantId] = useQueryState("assistantId");
39 |   const [threads, setThreads] = useState<Thread[]>([]);
40 |   const [threadsLoading, setThreadsLoading] = useState(false);
41 | 
42 |   const getThreads = useCallback(async (): Promise<Thread[]> => {
43 |     if (!apiUrl || !assistantId) return [];
44 |     const client = createClient(apiUrl, getApiKey() ?? undefined);
45 | 
46 |     const threads = await client.threads.search({
47 |       metadata: {
48 |         ...getThreadSearchMetadata(assistantId),
49 |       },
50 |       limit: 100,
51 |     });
52 | 
53 |     return threads;
54 |   }, [apiUrl, assistantId]);
55 | 
56 |   const value = {
57 |     getThreads,
58 |     threads,
59 |     setThreads,
60 |     threadsLoading,
61 |     setThreadsLoading,
62 |   };
63 | 
64 |   return (
65 |     <ThreadContext.Provider value={value}>{children}</ThreadContext.Provider>
66 |   );
67 | }
68 | 
69 | export function useThreads() {
70 |   const context = useContext(ThreadContext);
71 |   if (context === undefined) {
72 |     throw new Error("useThreads must be used within a ThreadProvider");
73 |   }
74 |   return context;
75 | }
76 | 


--------------------------------------------------------------------------------
/templates/vite/src/providers/client.ts:
--------------------------------------------------------------------------------
1 | import { Client } from "@langchain/langgraph-sdk";
2 | 
3 | export function createClient(apiUrl: string, apiKey: string | undefined) {
4 |   return new Client({
5 |     apiKey,
6 |     apiUrl,
7 |   });
8 | }
9 | 


--------------------------------------------------------------------------------
/templates/vite/src/vite-env.d.ts:
--------------------------------------------------------------------------------
1 | /// <reference types="vite/client" />
2 | 


--------------------------------------------------------------------------------
/templates/vite/tailwind.config.js:
--------------------------------------------------------------------------------
 1 | /** @type {import('tailwindcss').Config} */
 2 | module.exports = {
 3 |   darkMode: ["class"],
 4 |   content: [
 5 |     "./index.html",
 6 |     "./src/**/*.{ts,tsx,js,jsx}",
 7 |     "./agent/**/*.{ts,tsx,js,jsx}",
 8 |   ],
 9 |   theme: {
10 |     extend: {
11 |       borderRadius: {
12 |         lg: "var(--radius)",
13 |         md: "calc(var(--radius) - 2px)",
14 |         sm: "calc(var(--radius) - 4px)",
15 |       },
16 |       components: {
17 |         ".scrollbar-pretty":
18 |           "overflow-y-scroll [&::-webkit-scrollbar]:w-1.5 [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-300 [&::-webkit-scrollbar-track]:bg-transparent",
19 |       },
20 |       colors: {
21 |         background: "hsl(var(--background))",
22 |         foreground: "hsl(var(--foreground))",
23 |         card: {
24 |           DEFAULT: "hsl(var(--card))",
25 |           foreground: "hsl(var(--card-foreground))",
26 |         },
27 |         popover: {
28 |           DEFAULT: "hsl(var(--popover))",
29 |           foreground: "hsl(var(--popover-foreground))",
30 |         },
31 |         primary: {
32 |           DEFAULT: "hsl(var(--primary))",
33 |           foreground: "hsl(var(--primary-foreground))",
34 |         },
35 |         secondary: {
36 |           DEFAULT: "hsl(var(--secondary))",
37 |           foreground: "hsl(var(--secondary-foreground))",
38 |         },
39 |         muted: {
40 |           DEFAULT: "hsl(var(--muted))",
41 |           foreground: "hsl(var(--muted-foreground))",
42 |         },
43 |         accent: {
44 |           DEFAULT: "hsl(var(--accent))",
45 |           foreground: "hsl(var(--accent-foreground))",
46 |         },
47 |         destructive: {
48 |           DEFAULT: "hsl(var(--destructive))",
49 |           foreground: "hsl(var(--destructive-foreground))",
50 |         },
51 |         border: "hsl(var(--border))",
52 |         input: "hsl(var(--input))",
53 |         ring: "hsl(var(--ring))",
54 |         chart: {
55 |           1: "hsl(var(--chart-1))",
56 |           2: "hsl(var(--chart-2))",
57 |           3: "hsl(var(--chart-3))",
58 |           4: "hsl(var(--chart-4))",
59 |           5: "hsl(var(--chart-5))",
60 |         },
61 |       },
62 |     },
63 |   },
64 |   plugins: [require("tailwindcss-animate"), require("tailwind-scrollbar")],
65 | };
66 | 


--------------------------------------------------------------------------------
/templates/vite/tsconfig.app.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
 4 |     "target": "ES2023",
 5 |     "useDefineForClassFields": true,
 6 |     "lib": ["ES2023", "DOM", "DOM.Iterable"],
 7 |     "module": "ES2022",
 8 |     "skipLibCheck": true,
 9 | 
10 |     /* Bundler mode */
11 |     "moduleResolution": "bundler",
12 |     "allowImportingTsExtensions": true,
13 |     "isolatedModules": true,
14 |     "moduleDetection": "force",
15 |     "noEmit": true,
16 |     "jsx": "react-jsx",
17 | 
18 |     /* Linting */
19 |     "strict": true,
20 |     "noUnusedLocals": true,
21 |     "noUnusedParameters": true,
22 |     "noFallthroughCasesInSwitch": true,
23 |     "noUncheckedSideEffectImports": true,
24 |     "baseUrl": ".",
25 |     "paths": {
26 |       "@/*": ["./src/*"]
27 |     }
28 |   },
29 |   "include": ["src", "agent"]
30 | }
31 | 


--------------------------------------------------------------------------------
/templates/vite/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "files": [],
 3 |   "references": [
 4 |     { "path": "./tsconfig.app.json" },
 5 |     { "path": "./tsconfig.node.json" }
 6 |   ],
 7 |   "compilerOptions": {
 8 |     "baseUrl": ".",
 9 |     "paths": {
10 |       "@/*": ["./src/*"]
11 |     }
12 |   }
13 | }
14 | 


--------------------------------------------------------------------------------
/templates/vite/tsconfig.node.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
 4 |     "target": "ES2022",
 5 |     "lib": ["ES2023"],
 6 |     "module": "ESNext",
 7 |     "skipLibCheck": true,
 8 | 
 9 |     /* Bundler mode */
10 |     "moduleResolution": "bundler",
11 |     "allowImportingTsExtensions": true,
12 |     "isolatedModules": true,
13 |     "moduleDetection": "force",
14 |     "noEmit": true,
15 | 
16 |     /* Linting */
17 |     "strict": true,
18 |     "noUnusedLocals": true,
19 |     "noUnusedParameters": true,
20 |     "noFallthroughCasesInSwitch": true,
21 |     "noUncheckedSideEffectImports": true
22 |   },
23 |   "include": ["vite.config.ts"]
24 | }
25 | 


--------------------------------------------------------------------------------
/templates/vite/turbo.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "extends": ["//"],
 3 |   "tasks": {
 4 |     "build": {
 5 |       "outputs": [".next/**", "!.next/cache/**"]
 6 |     },
 7 |     "build:internal": {
 8 |       "dependsOn": ["^build:internal"]
 9 |     },
10 |     "dev": {
11 |       "dependsOn": ["^dev"]
12 |     }
13 |   }
14 | }
15 | 


--------------------------------------------------------------------------------
/templates/vite/vite.config.ts:
--------------------------------------------------------------------------------
 1 | import path from "path";
 2 | import { defineConfig } from "vite";
 3 | import react from "@vitejs/plugin-react";
 4 | import tailwindcss from "@tailwindcss/vite";
 5 | 
 6 | // https://vite.dev/config/
 7 | export default defineConfig({
 8 |   plugins: [react(), tailwindcss()],
 9 |   resolve: {
10 |     alias: {
11 |       "@": path.resolve(__dirname, "./src"),
12 |     },
13 |   },
14 | });
15 | 


--------------------------------------------------------------------------------
/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "extends": "@tsconfig/recommended",
 3 |   "compilerOptions": {
 4 |     "target": "ES2021",
 5 |     "lib": ["ES2021", "ES2022.Object", "DOM"],
 6 |     "module": "NodeNext",
 7 |     "moduleResolution": "nodenext",
 8 |     "esModuleInterop": true,
 9 |     "noImplicitReturns": true,
10 |     "declaration": true,
11 |     "noFallthroughCasesInSwitch": true,
12 |     "noUnusedLocals": true,
13 |     "noUnusedParameters": true,
14 |     "useDefineForClassFields": true,
15 |     "strictPropertyInitialization": false,
16 |     "allowJs": true,
17 |     "strict": true,
18 |     "strictFunctionTypes": false,
19 |     "outDir": "dist",
20 |     "types": ["jest", "node"],
21 |     "resolveJsonModule": true
22 |   },
23 |   "include": ["**/*.ts", "**/*.js", "jest.setup.cjs", "eslint.config.cjs"],
24 |   "exclude": ["node_modules", "dist", "src/create-agent-chat-app/template"]
25 | }
26 | 


--------------------------------------------------------------------------------